{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.1", "generated_at": "2022-02-09T17:12:47.137370Z", "invocation_id": "67a20753-8800-4838-bd30-29d9fae0ca56", "env": {"DBT_CLOUD_PROJECT_ID": "63316", "DBT_CLOUD_RUN_ID": "43531564", "DBT_CLOUD_JOB_ID": "50153", "DBT_CLOUD_RUN_REASON": "scheduled", "DBT_CLOUD_RUN_REASON_CATEGORY": "scheduled"}, "project_id": "1dceb10ca815de1f4551482048a978b5", "user_id": "8e4d39d6-c5a1-4ae5-a3a1-3109401f01b4", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.understood_analytics.editorial_current_content": {"raw_sql": "with contentful as(\r\nselect \r\n   -- ids\r\n   id as contentful_id,\r\n   to_binary(replace(id, '-'), 'utf-8') as pk_contentful_id,\r\n   metainformation_id\r\n\r\n   --dates\r\n   first_published_at_est,\r\n   created_at_est,\r\n   updated_at_est,\r\n   start_timestamp,\r\n   end_timestamp,\r\n   article_start_timestamp,\r\n   article_end_timestamp,\r\n\r\n   -- content info\r\n   is_current,\r\n   content_type,\r\n   article_type,\r\n   article_language,\r\n   title,\r\n   is_program_educators,\r\n   is_program_families,\r\n   is_program_workplace,\r\n   is_program_youngadults,\r\n   has_glance,\r\n   has_keytakeaway,\r\n\r\n   url_path,\r\n   url_path_channel,\r\n   url_path_topic,\r\n   url_path_subtopic,\r\n\r\n   article_text,\r\n   article_body_text,\r\n   article_complete_text,\r\n\r\n   --asset counts\r\n   embedded_object_count,\r\n   embedded_videoblock_count,\r\n   article_link_count,\r\n   downloadable_asset_count,\r\n   tinytout_count,\r\n\r\n   --word counts\r\n   title_word_count,\r\n   glance_word_count,\r\n   article_part_word_count,\r\n   article_total_word_count,\r\n   keytakeaway_word_count,\r\n\r\n   --character counts\r\n   title_character_count,\r\n   glance_character_count,\r\n   article_part_character_count,\r\n   article_total_character_count,\r\n   keytakeaway_character_count,\r\n\r\n   datediff(days,first_published_at_est,current_date()) as days_since_publication\r\n\r\nfrom {{ source('contentful', 'article') }}\r\nwhere is_current = 'true'   \r\n),\r\n\r\ncontentful_tags_agg as( \r\n    select * \r\n    from  {{ref('stg_contentful_tags_agg_json')}}\r\n ),\r\n\r\ncontentful_kab as( \r\n    select * \r\n    from  {{ref('stg_contentful_kab_pivot')}}\r\n ),\r\n\r\ncontentful_moments as( \r\n    select * \r\n    from  {{ref('stg_contentful_moments_pivot')}}\r\n ),\r\n\r\n contentful_stages as( \r\n    select * \r\n    from  {{ref('stg_contentful_stages_pivot')}}\r\n ),\r\n\r\n  contentful_external as( \r\n    select * \r\n    from  {{ref('stg_contentful_external_pivot')}}\r\n )\r\n\r\nselect \r\n   contentful.*,\r\n   contentful_tags_agg.contentful_article_tags_json,\r\n   contentful_tags_agg.contentful_article_tags_count,\r\n\r\n   --kab tags flag fields\r\n   {{ dbt_utils.star(from=ref('stg_contentful_kab_pivot'), except=[\"contentful_id\"]) }},\r\n\r\n   --moments tags flag fields\r\n   {{ dbt_utils.star(from=ref('stg_contentful_moments_pivot'), except=[\"contentful_id\"]) }},\r\n\r\n   --stages tags flag fields\r\n   {{ dbt_utils.star(from=ref('stg_contentful_stages_pivot'), except=[\"contentful_id\"]) }},\r\n\r\n   --external tags flag fields\r\n   {{ dbt_utils.star(from=ref('stg_contentful_external_pivot'), except=[\"contentful_id\"]) }}\r\nfrom contentful\r\nleft join  contentful_tags_agg on contentful.contentful_id = contentful_tags_agg.contentful_id\r\nleft join  contentful_kab on contentful.contentful_id = contentful_kab.contentful_id\r\nleft join  contentful_moments on contentful.contentful_id = contentful_moments.contentful_id\r\nleft join  contentful_stages on contentful.contentful_id = contentful_stages.contentful_id\r\nleft join  contentful_external on contentful.contentful_id = contentful_external.contentful_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star"], "nodes": ["source.understood_analytics.contentful.article", "model.understood_analytics.stg_contentful_tags_agg_json", "model.understood_analytics.stg_contentful_kab_pivot", "model.understood_analytics.stg_contentful_moments_pivot", "model.understood_analytics.stg_contentful_stages_pivot", "model.understood_analytics.stg_contentful_external_pivot", "model.understood_analytics.stg_contentful_kab_pivot", "model.understood_analytics.stg_contentful_moments_pivot", "model.understood_analytics.stg_contentful_stages_pivot", "model.understood_analytics.stg_contentful_external_pivot"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "@Laura"}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "contentful_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "marts", "editorial", "editorial_current_content"], "unique_id": "model.understood_analytics.editorial_current_content", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/editorial/editorial_current_content.sql", "original_file_path": "models/marts/editorial/editorial_current_content.sql", "name": "editorial_current_content", "alias": "editorial_current_content", "checksum": {"name": "sha256", "checksum": "fddf2e1d9372b506fc9f017608971b5866f745b69d04b0b395c485dd2fd919fb"}, "tags": [], "refs": [["stg_contentful_tags_agg_json"], ["stg_contentful_kab_pivot"], ["stg_contentful_moments_pivot"], ["stg_contentful_stages_pivot"], ["stg_contentful_external_pivot"], ["stg_contentful_kab_pivot"], ["stg_contentful_moments_pivot"], ["stg_contentful_stages_pivot"], ["stg_contentful_external_pivot"]], "sources": [["contentful", "article"]], "description": "Contenful metadata about Understood collateral.  Includes tags, word counts, page info, etc...", "columns": {"contentful_id": {"name": "contentful_id", "description": "Unique id for assests managed via contentful.", "meta": {"dimension_measure": "dimension", "primary_key": true, "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pk_contentful_id": {"name": "pk_contentful_id", "description": "Binary of contentful ID, for efficient joins.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "first_published_at_est": {"name": "first_published_at_est", "description": "First Published At EST", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Date", "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "created_at_est": {"name": "created_at_est", "description": "Created At EST", "meta": {"dimension_measure": "dimension", "looker_field_group": "Date", "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "updated_at_est": {"name": "updated_at_est", "description": "Updated At EST", "meta": {"dimension_measure": "dimension", "looker_field_group": "Date"}, "data_type": null, "quote": null, "tags": []}, "is_current": {"name": "is_current", "description": "Is Current", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "start_timestamp": {"name": "start_timestamp", "description": "Start Timestamp", "meta": {"dimension_measure": "dimension", "looker_field_group": "Date", "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "end_timestamp": {"name": "end_timestamp", "description": "End Timestamp", "meta": {"dimension_measure": "dimension", "looker_field_group": "Date", "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "article_start_timestamp": {"name": "article_start_timestamp", "description": "Article Start Timestamp", "meta": {"dimension_measure": "dimension", "looker_field_group": "Date", "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "article_end_timestamp": {"name": "article_end_timestamp", "description": "Article End Timestamp", "meta": {"dimension_measure": "dimension", "looker_field_group": "Date", "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "content_type": {"name": "content_type", "description": "Content Type", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Contentful", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "article_type": {"name": "article_type", "description": "Article Type", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Contentful", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "article_language": {"name": "article_language", "description": "Article Language", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "title": {"name": "title", "description": "Title", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "is_program_educators": {"name": "is_program_educators", "description": "Is Program Educators", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "is_program_families": {"name": "is_program_families", "description": "Is Program Families", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "is_program_workplace": {"name": "is_program_workplace", "description": "Is Program Workplace", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "is_program_youngadults": {"name": "is_program_youngadults", "description": "Is Program Youngadults", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "has_glance": {"name": "has_glance", "description": "Has Glance", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "has_keytakeaway": {"name": "has_keytakeaway", "description": "Has Keytakeaway", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "url_path": {"name": "url_path", "description": "URL Path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "URL", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "url_path_channel": {"name": "url_path_channel", "description": "URL Path Channel", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "URL", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "url_path_topic": {"name": "url_path_topic", "description": "URL Path Topic", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "URL", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "url_path_subtopic": {"name": "url_path_subtopic", "description": "URL Path Subtopic", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "URL", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "article_text": {"name": "article_text", "description": "Article Text", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Text", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "article_body_text": {"name": "article_body_text", "description": "Article Body Text", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Text", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "article_complete_text": {"name": "article_complete_text", "description": "Article Complete Text", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Text", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "embedded_object_count": {"name": "embedded_object_count", "description": "Embedded Object Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "embedded_videoblock_count": {"name": "embedded_videoblock_count", "description": "Embedded Videoblock Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "article_link_count": {"name": "article_link_count", "description": "Article Link Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "downloadable_asset_count": {"name": "downloadable_asset_count", "description": "Downloadable Asset Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tinytout_count": {"name": "tinytout_count", "description": "Tinytout Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "title_word_count": {"name": "title_word_count", "description": "Title Word Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "glance_word_count": {"name": "glance_word_count", "description": "Glance Word Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "article_part_word_count": {"name": "article_part_word_count", "description": "Article Part Word Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "article_total_word_count": {"name": "article_total_word_count", "description": "Article Total Word Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "keytakeaway_word_count": {"name": "keytakeaway_word_count", "description": "Keytakeaway Word Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "title_character_count": {"name": "title_character_count", "description": "Title Character Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "glance_character_count": {"name": "glance_character_count", "description": "Glance Character Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "article_part_character_count": {"name": "article_part_character_count", "description": "Article Part Character Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "article_total_character_count": {"name": "article_total_character_count", "description": "Article Total Character Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "keytakeaway_character_count": {"name": "keytakeaway_character_count", "description": "Keytakeaway Character Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Stats", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "days_since_publication": {"name": "days_since_publication", "description": "Days Since Publication", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Article", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "contentful_article_tags_json": {"name": "contentful_article_tags_json", "description": "JSON array of tags for the article.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "contentful_article_tags_count": {"name": "contentful_article_tags_count", "description": "Count of tags for the article.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_kab_list": {"name": "tag_kab_list", "description": "Combined list of tags for the article where tag_category_name is 'Kab intent'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "tag_kab_count": {"name": "tag_kab_count", "description": "Count of tags for the article where tag_category_name is 'Kab intent'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_kab_building_knowledge": {"name": "tag_kab_building_knowledge", "description": "Flag for articles where kab tag is 'building knowledge'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - KAB", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_kab_changing_behavior": {"name": "tag_kab_changing_behavior", "description": "Flag for articles where kab tag is 'changing behavior'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - KAB", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_kab_changing_attitudes": {"name": "tag_kab_changing_attitudes", "description": "Flag for articles where kab tag is 'changing attitudes'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - KAB", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_moments_list": {"name": "tag_moments_list", "description": "Combined list of tags for the article where tag_category_name is 'Moments'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "tag_moments_count": {"name": "tag_moments_count", "description": "Count of tags for the article where tag_category_name is 'Moments'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_moments_1_being_understood": {"name": "tag_moments_1_being_understood", "description": "Flag for articles where moments tag is '1 being understood'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Moments", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_moments_2_finding_voice": {"name": "tag_moments_2_finding_voice", "description": "Flag for articles where moments tag is '2 finding voice'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Moments", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_moments_3_trying_life": {"name": "tag_moments_3_trying_life", "description": "Flag for articles where moments tag is '3 trying life'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Moments", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_moments_4_thriving": {"name": "tag_moments_4_thriving", "description": "Flag for articles where moments tag is '4 thriving'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Moments", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_list": {"name": "tag_stages_list", "description": "Combined list of tags for the article where tag_category_name is 'Stages'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_count": {"name": "tag_stages_count", "description": "Count of tags for the article where tag_category_name is 'Stages'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m1_coping": {"name": "tag_stages_m1_coping", "description": "Flag for articles where stages tag is ' m1 coping'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m1_confusion": {"name": "tag_stages_m1_confusion", "description": "Flag for articles where stages tag is ' m1 confusion'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m1_acceptance": {"name": "tag_stages_m1_acceptance", "description": "Flag for articles where stages tag is ' m1 acceptance'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_comparison_across_all_moments_": {"name": "tag_stages_comparison_across_all_moments_", "description": "Flag for articles where stages tag is ' comparison across all moments '.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m2_trying": {"name": "tag_stages_m2_trying", "description": "Flag for articles where stages tag is ' m2 trying'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m2_anger": {"name": "tag_stages_m2_anger", "description": "Flag for articles where stages tag is ' m2 anger'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_advocacy_across_all_moments_": {"name": "tag_stages_advocacy_across_all_moments_", "description": "Flag for articles where stages tag is ' advocacy across all moments '.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m2_mastery": {"name": "tag_stages_m2_mastery", "description": "Flag for articles where stages tag is ' m2 mastery'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m3_employment": {"name": "tag_stages_m3_employment", "description": "Flag for articles where stages tag is ' m3 employment'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m3_deciding": {"name": "tag_stages_m3_deciding", "description": "Flag for articles where stages tag is ' m3 deciding'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m4_resilience": {"name": "tag_stages_m4_resilience", "description": "Flag for articles where stages tag is ' m4 resilience'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m3_dependency": {"name": "tag_stages_m3_dependency", "description": "Flag for articles where stages tag is ' m3 dependency'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m4_pathing": {"name": "tag_stages_m4_pathing", "description": "Flag for articles where stages tag is ' m4 pathing'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_stages_m4_hopelessness": {"name": "tag_stages_m4_hopelessness", "description": "Flag for articles where stages tag is ' m4 hopelessness'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - Stages", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_list": {"name": "tag_external_list", "description": "Combined list of tags for the article where tag_source is 'external_tag'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "tag_external_count": {"name": "tag_external_count", "description": "Count of tags for the article where tag_source is 'external_tag'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_school_supports": {"name": "tag_external_school_supports", "description": "Flag for articles where external tag is 'school supports'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_strategies_and_tips": {"name": "tag_external_strategies_and_tips", "description": "Flag for articles where external tag is 'strategies and tips'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_parenting": {"name": "tag_external_parenting", "description": "Flag for articles where external tag is 'parenting'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_school_struggles": {"name": "tag_external_school_struggles", "description": "Flag for articles where external tag is 'school struggles'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_reading_and_writing": {"name": "tag_external_reading_and_writing", "description": "Flag for articles where external tag is 'reading and writing'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_root_causes_": {"name": "tag_external_root_causes_", "description": "Flag for articles where external tag is 'root causes '.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_personal_stories": {"name": "tag_external_personal_stories", "description": "Flag for articles where external tag is 'personal stories'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_managing_emotions": {"name": "tag_external_managing_emotions", "description": "Flag for articles where external tag is 'managing emotions'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_covid": {"name": "tag_external_covid", "description": "Flag for articles where external tag is 'covid'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_signs_and_symptoms": {"name": "tag_external_signs_and_symptoms", "description": "Flag for articles where external tag is 'signs and symptoms'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_confidence_and_self_esteem": {"name": "tag_external_confidence_and_self_esteem", "description": "Flag for articles where external tag is 'confidence and self esteem'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_stress_and_anxiety": {"name": "tag_external_stress_and_anxiety", "description": "Flag for articles where external tag is 'stress and anxiety'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_focus_and_attention": {"name": "tag_external_focus_and_attention", "description": "Flag for articles where external tag is 'focus and attention'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_talking_and_understanding": {"name": "tag_external_talking_and_understanding", "description": "Flag for articles where external tag is 'talking and understanding'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_distance_learning": {"name": "tag_external_distance_learning", "description": "Flag for articles where external tag is 'distance learning'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_math": {"name": "tag_external_math", "description": "Flag for articles where external tag is 'math'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_on_the_job": {"name": "tag_external_on_the_job", "description": "Flag for articles where external tag is 'on the job'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_social_skills": {"name": "tag_external_social_skills", "description": "Flag for articles where external tag is 'social skills'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_staying_organized": {"name": "tag_external_staying_organized", "description": "Flag for articles where external tag is 'staying organized'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_frustration": {"name": "tag_external_frustration", "description": "Flag for articles where external tag is 'frustration'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_avoiding_and_procrastinating": {"name": "tag_external_avoiding_and_procrastinating", "description": "Flag for articles where external tag is 'avoiding and procrastinating'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_following_instructions": {"name": "tag_external_following_instructions", "description": "Flag for articles where external tag is 'following instructions'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_hyperactivity": {"name": "tag_external_hyperactivity", "description": "Flag for articles where external tag is 'hyperactivity'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_distraction": {"name": "tag_external_distraction", "description": "Flag for articles where external tag is 'distraction'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_supporting_your_child_at_school": {"name": "tag_external_supporting_your_child_at_school", "description": "Flag for articles where external tag is 'supporting your child at school'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "tag_external_executive_functioning_skills": {"name": "tag_external_executive_functioning_skills", "description": "Flag for articles where external tag is 'executive functioning skills'.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Tags - External", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/marts/editorial/editorial.yml", "compiled_path": "target/compiled/understood_analytics/models/marts/editorial/editorial_current_content.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.094612, "compiled_sql": "with contentful as(\nselect \n   -- ids\n   id as contentful_id,\n   to_binary(replace(id, '-'), 'utf-8') as pk_contentful_id,\n   metainformation_id\n\n   --dates\n   first_published_at_est,\n   created_at_est,\n   updated_at_est,\n   start_timestamp,\n   end_timestamp,\n   article_start_timestamp,\n   article_end_timestamp,\n\n   -- content info\n   is_current,\n   content_type,\n   article_type,\n   article_language,\n   title,\n   is_program_educators,\n   is_program_families,\n   is_program_workplace,\n   is_program_youngadults,\n   has_glance,\n   has_keytakeaway,\n\n   url_path,\n   url_path_channel,\n   url_path_topic,\n   url_path_subtopic,\n\n   article_text,\n   article_body_text,\n   article_complete_text,\n\n   --asset counts\n   embedded_object_count,\n   embedded_videoblock_count,\n   article_link_count,\n   downloadable_asset_count,\n   tinytout_count,\n\n   --word counts\n   title_word_count,\n   glance_word_count,\n   article_part_word_count,\n   article_total_word_count,\n   keytakeaway_word_count,\n\n   --character counts\n   title_character_count,\n   glance_character_count,\n   article_part_character_count,\n   article_total_character_count,\n   keytakeaway_character_count,\n\n   datediff(days,first_published_at_est,current_date()) as days_since_publication\n\nfrom reporting_database.contentful.article\nwhere is_current = 'true'   \n),\n\ncontentful_tags_agg as( \n    select * \n    from  analytic_layer_prod.core.stg_contentful_tags_agg_json\n ),\n\ncontentful_kab as( \n    select * \n    from  analytic_layer_prod.core.stg_contentful_kab_pivot\n ),\n\ncontentful_moments as( \n    select * \n    from  analytic_layer_prod.core.stg_contentful_moments_pivot\n ),\n\n contentful_stages as( \n    select * \n    from  analytic_layer_prod.core.stg_contentful_stages_pivot\n ),\n\n  contentful_external as( \n    select * \n    from  analytic_layer_prod.core.stg_contentful_external_pivot\n )\n\nselect \n   contentful.*,\n   contentful_tags_agg.contentful_article_tags_json,\n   contentful_tags_agg.contentful_article_tags_count,\n\n   --kab tags flag fields\n   \"TAG_KAB_LIST\" as \"TAG_KAB_LIST\",\n  \"TAG_KAB_COUNT\" as \"TAG_KAB_COUNT\",\n  \"tag_kab_building_knowledge\" as \"tag_kab_building_knowledge\",\n  \"tag_kab_changing_behavior\" as \"tag_kab_changing_behavior\",\n  \"tag_kab_changing_attitudes\" as \"tag_kab_changing_attitudes\",\n\n   --moments tags flag fields\n   \"TAG_MOMENTS_LIST\" as \"TAG_MOMENTS_LIST\",\n  \"TAG_MOMENTS_COUNT\" as \"TAG_MOMENTS_COUNT\",\n  \"tag_moments_1_being_understood\" as \"tag_moments_1_being_understood\",\n  \"tag_moments_2_finding_voice\" as \"tag_moments_2_finding_voice\",\n  \"tag_moments_3_trying_life\" as \"tag_moments_3_trying_life\",\n  \"tag_moments_4_thriving\" as \"tag_moments_4_thriving\",\n\n   --stages tags flag fields\n   \"TAG_STAGES_LIST\" as \"TAG_STAGES_LIST\",\n  \"TAG_STAGES_COUNT\" as \"TAG_STAGES_COUNT\",\n  \"tag_stages_m1_coping\" as \"tag_stages_m1_coping\",\n  \"tag_stages_m1_confusion\" as \"tag_stages_m1_confusion\",\n  \"tag_stages_m1_acceptance\" as \"tag_stages_m1_acceptance\",\n  \"tag_stages_comparison_across_all_moments_\" as \"tag_stages_comparison_across_all_moments_\",\n  \"tag_stages_m2_trying\" as \"tag_stages_m2_trying\",\n  \"tag_stages_m2_anger\" as \"tag_stages_m2_anger\",\n  \"tag_stages_m2_mastery\" as \"tag_stages_m2_mastery\",\n  \"tag_stages_advocacy_across_all_moments_\" as \"tag_stages_advocacy_across_all_moments_\",\n  \"tag_stages_m3_employment\" as \"tag_stages_m3_employment\",\n  \"tag_stages_m3_deciding\" as \"tag_stages_m3_deciding\",\n  \"tag_stages_m4_resilience\" as \"tag_stages_m4_resilience\",\n  \"tag_stages_m3_dependency\" as \"tag_stages_m3_dependency\",\n  \"tag_stages_m4_pathing\" as \"tag_stages_m4_pathing\",\n  \"tag_stages_m4_hopelessness\" as \"tag_stages_m4_hopelessness\",\n\n   --external tags flag fields\n   \"TAG_EXTERNAL_LIST\" as \"TAG_EXTERNAL_LIST\",\n  \"TAG_EXTERNAL_COUNT\" as \"TAG_EXTERNAL_COUNT\",\n  \"tag_external_school_supports\" as \"tag_external_school_supports\",\n  \"tag_external_strategies_and_tips\" as \"tag_external_strategies_and_tips\",\n  \"tag_external_parenting\" as \"tag_external_parenting\",\n  \"tag_external_school_struggles\" as \"tag_external_school_struggles\",\n  \"tag_external_reading_and_writing\" as \"tag_external_reading_and_writing\",\n  \"tag_external_root_causes_\" as \"tag_external_root_causes_\",\n  \"tag_external_personal_stories\" as \"tag_external_personal_stories\",\n  \"tag_external_managing_emotions\" as \"tag_external_managing_emotions\",\n  \"tag_external_signs_and_symptoms\" as \"tag_external_signs_and_symptoms\",\n  \"tag_external_covid\" as \"tag_external_covid\",\n  \"tag_external_confidence_and_self_esteem\" as \"tag_external_confidence_and_self_esteem\",\n  \"tag_external_focus_and_attention\" as \"tag_external_focus_and_attention\",\n  \"tag_external_stress_and_anxiety\" as \"tag_external_stress_and_anxiety\",\n  \"tag_external_talking_and_understanding\" as \"tag_external_talking_and_understanding\",\n  \"tag_external_distance_learning\" as \"tag_external_distance_learning\",\n  \"tag_external_math\" as \"tag_external_math\",\n  \"tag_external_on_the_job\" as \"tag_external_on_the_job\",\n  \"tag_external_social_skills\" as \"tag_external_social_skills\",\n  \"tag_external_staying_organized\" as \"tag_external_staying_organized\",\n  \"tag_external_frustration\" as \"tag_external_frustration\",\n  \"tag_external_avoiding_and_procrastinating\" as \"tag_external_avoiding_and_procrastinating\",\n  \"tag_external_following_instructions\" as \"tag_external_following_instructions\",\n  \"tag_external_hyperactivity\" as \"tag_external_hyperactivity\",\n  \"tag_external_distraction\" as \"tag_external_distraction\",\n  \"tag_external_supporting_your_child_at_school\" as \"tag_external_supporting_your_child_at_school\",\n  \"tag_external_executive_functioning_skills\" as \"tag_external_executive_functioning_skills\"\nfrom contentful\nleft join  contentful_tags_agg on contentful.contentful_id = contentful_tags_agg.contentful_id\nleft join  contentful_kab on contentful.contentful_id = contentful_kab.contentful_id\nleft join  contentful_moments on contentful.contentful_id = contentful_moments.contentful_id\nleft join  contentful_stages on contentful.contentful_id = contentful_stages.contentful_id\nleft join  contentful_external on contentful.contentful_id = contentful_external.contentful_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.editorial_current_content"}, "model.understood_analytics.u_org_session": {"raw_sql": "with u_org_session as (\r\n  select *,\r\n    case when traffic_medium in ('paid marketing', 'organic marketing', 'partnerships', 'email', 'community-post-reshare', 'community-podcast', 'community-response', 'community-post') then true\r\n    else false\r\n    end as is_marketing_traffic\r\n  from {{ref('stg_sp_session')}}\r\n  where has_site_data  = true\r\n  -- test for incremental load\r\n    {% if is_incremental() %}\r\n    and   session_date_est >= (\r\n    select dateadd(day, -3, max(session_date_est)) from {{this}}\r\n    )\r\n    {% endif %}\r\n)\r\nselect\r\n--ids\r\n  session_id,\r\n  to_binary(replace(session_id, '-'), 'hex') as pk_session_id,\r\n  understood_id,\r\n  content_id_initial,\r\n  content_id_latest,\r\n  application_id_initial,\r\n  has_site_data,\r\n  has_wunder_data,\r\n\r\n--dates\r\n  session_date_est,\r\n  session_time_est,\r\n  session_timestamp_est,\r\n\r\n\r\n  platform_type_initial,\r\n  had_subscribe_newsletter,\r\n  had_signup,\r\n  is_logged_in,\r\n  is_user_initial_session,\r\n\r\n-- page info\r\n  page_path_initial,\r\n  page_path_first_initial,\r\n  page_path_second_initial,\r\n  page_path_third_initial,\r\n  page_path_slug_initial,\r\n\r\n  page_path_latest,\r\n  page_path_first_latest,\r\n  page_path_second_latest,\r\n  page_path_third_latest,\r\n  page_path_slug_latest,\r\n\r\n-- site\r\n  site_context_site_section_initial,\r\n  site_context_language_initial,\r\n  site_context_site_section_latest,\r\n  site_context_language_latest,\r\n\r\n-- referrer\r\n  referrer_url_initial,\r\n  referrer_scheme_initial,\r\n  referrer_host_initial,\r\n  referrer_port_initial,\r\n  referrer_path_initial,\r\n  referrer_query_initial,\r\n  referrer_fragment_initial,\r\n  referrer_medium_initial,\r\n  referrer_source_initial,\r\n  referrer_keyword_initial,\r\n\r\n--marketing\r\n  is_marketing_traffic,\r\n  marketing_click_id_initial,\r\n  marketing_medium_initial,\r\n  marketing_source_initial,\r\n  marketing_keyword_initial,\r\n  marketing_content_initial,\r\n  marketing_campaign_initial,\r\n  marketing_network_initial,\r\n\r\n--engagement\r\n  engagement_second,\r\n  engagement_is_bounce_session,\r\n  engagement_is_unengaged,\r\n  engagement_pageview_count,\r\n  engagement_pagepath_unique_count\r\n  from u_org_session", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.understood_analytics.stg_sp_session"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "sync_all_columns", "cluster_by": ["session_date_est"], "unique_key": "session_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "marts", "u_org", "u_org_session"], "unique_id": "model.understood_analytics.u_org_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session.sql", "original_file_path": "models/marts/u_org/u_org_session.sql", "name": "u_org_session", "alias": "u_org_session", "checksum": {"name": "sha256", "checksum": "eb44250db616d1361c0658a82e7d13cee8d7772294a0efee655cc707b4531c22"}, "tags": [], "refs": [["stg_sp_session"]], "sources": [], "description": "Sessionss for U.org, when a user interacts with the website.", "columns": {"session_id": {"name": "session_id", "description": "Unique id for sessions.  Primary key of the table ", "meta": {"primary_key": true, "dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pk_session_id": {"name": "pk_session_id", "description": "Binary of Session Id.  For efficient joins.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "understood_id": {"name": "understood_id", "description": "User id unique across all platform.  Generated by DE process.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "content_id_initial": {"name": "content_id_initial", "description": "First Id for assests managed via contentful during session.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "content_id_latest": {"name": "content_id_latest", "description": "Last Id for assests managed via contentful during session.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "application_id_initial": {"name": "application_id_initial", "description": "First Snowplow ID of session to identify use.  'web-id', 'app-id', etc...", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "has_site_data": {"name": "has_site_data", "description": "Binary for website records", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "has_wunder_data": {"name": "has_wunder_data", "description": "Binary for community app  records", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "session_date_est": {"name": "session_date_est", "description": "Date that session started, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "date"}, "data_type": null, "quote": null, "tags": []}, "session_time_est": {"name": "session_time_est", "description": "Time that session started, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "time"}, "data_type": null, "quote": null, "tags": []}, "session_timestamp_est": {"name": "session_timestamp_est", "description": "Timestamp that session started, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "platform_type_initial": {"name": "platform_type_initial", "description": "", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "had_subscribe_newsletter": {"name": "had_subscribe_newsletter", "description": "Whether a user had a successful newsletter subscription event in the session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Account", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "had_signup": {"name": "had_signup", "description": "Whether a user had a successful signup event in the session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Account", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "is_logged_in": {"name": "is_logged_in", "description": "Whether a user is logged in for the session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Account", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "is_user_initial_session": {"name": "is_user_initial_session", "description": "Whether first session for user", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "page_path_initial": {"name": "page_path_initial", "description": "path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_first_initial": {"name": "page_path_first_initial", "description": "The first part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_second_initial": {"name": "page_path_second_initial", "description": "The second part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_third_initial": {"name": "page_path_third_initial", "description": "The third part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_slug_initial": {"name": "page_path_slug_initial", "description": "The last part of the path, which is the slug in the article", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_latest": {"name": "page_path_latest", "description": "path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_first_latest": {"name": "page_path_first_latest", "description": "The first part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_second_latest": {"name": "page_path_second_latest", "description": "The second part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_third_latest": {"name": "page_path_third_latest", "description": "The third part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_slug_latest": {"name": "page_path_slug_latest", "description": "The last part of the path, which is the slug in the article", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_context_site_section_initial": {"name": "site_context_site_section_initial", "description": "section of the site that the event occured on ", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_context_language_initial": {"name": "site_context_language_initial", "description": "language of the page/context", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_context_site_section_latest": {"name": "site_context_site_section_latest", "description": "section of the site that the event occured on ", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_context_language_latest": {"name": "site_context_language_latest", "description": "language of the page/context", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_url_initial": {"name": "referrer_url_initial", "description": "The full url of the referrer, previous page", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_scheme_initial": {"name": "referrer_scheme_initial", "description": "scheme", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_host_initial": {"name": "referrer_host_initial", "description": "hostname", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_port_initial": {"name": "referrer_port_initial", "description": "port", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_path_initial": {"name": "referrer_path_initial", "description": "path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_query_initial": {"name": "referrer_query_initial", "description": "referrer query string/parameters", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_fragment_initial": {"name": "referrer_fragment_initial", "description": "Referrer fragment", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_medium_initial": {"name": "referrer_medium_initial", "description": "type of referrer", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_source_initial": {"name": "referrer_source_initial", "description": "name of the referrer if it is recognized", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_keyword_initial": {"name": "referrer_keyword_initial", "description": "keywords if the source is a search engine", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "is_marketing_traffic": {"name": "is_marketing_traffic", "description": "Is Marketing Traffic", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "marketing_click_id_initial": {"name": "marketing_click_id_initial", "description": "Marketing Click Id Initial", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_medium_initial": {"name": "marketing_medium_initial", "description": "Marketing Medium Initial", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_source_initial": {"name": "marketing_source_initial", "description": "Marketing Source Initial", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_keyword_initial": {"name": "marketing_keyword_initial", "description": "Marketing Keyword Initial", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_content_initial": {"name": "marketing_content_initial", "description": "Marketing Content Initial", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_campaign_initial": {"name": "marketing_campaign_initial", "description": "Marketing Campaign Initial", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_network_initial": {"name": "marketing_network_initial", "description": "Marketing Network Initial", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "engagement_second": {"name": "engagement_second", "description": "Engagement Second", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "engagement_is_bounce_session": {"name": "engagement_is_bounce_session", "description": "Engagement Is Bounce Session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "engagement_is_unengaged": {"name": "engagement_is_unengaged", "description": "Engagement Is Unengaged", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "engagement_pageview_count": {"name": "engagement_pageview_count", "description": "Engagement Pageview Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "engagement_pagepath_unique_count": {"name": "engagement_pagepath_unique_count", "description": "Engagement Pagepath Unique Count", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_marketing_session": {"name": "flag_marketing_session", "description": "Flag Marketing Session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_user_initial_session": {"name": "flag_user_initial_session", "description": "Flag User Initial Session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_user_returning_session": {"name": "flag_user_returning_session", "description": "Flag User Returning Session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_unengaged_session": {"name": "flag_unengaged_session", "description": "Flag Unengaged Session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_engaged_session": {"name": "flag_engaged_session", "description": "Flag Engaged Session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_bounced_session": {"name": "flag_bounced_session", "description": "Flag Bounced Session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/marts/u_org/u_org_session.yml", "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.5234716, "compiled_sql": "with u_org_session as (\n  select *,\n    case when traffic_medium in ('paid marketing', 'organic marketing', 'partnerships', 'email', 'community-post-reshare', 'community-podcast', 'community-response', 'community-post') then true\n    else false\n    end as is_marketing_traffic\n  from analytic_layer_prod.core.stg_sp_session\n  where has_site_data  = true\n  -- test for incremental load\n    \n    and   session_date_est >= (\n    select dateadd(day, -3, max(session_date_est)) from analytic_layer_prod.core.u_org_session\n    )\n    \n)\nselect\n--ids\n  session_id,\n  to_binary(replace(session_id, '-'), 'hex') as pk_session_id,\n  understood_id,\n  content_id_initial,\n  content_id_latest,\n  application_id_initial,\n  has_site_data,\n  has_wunder_data,\n\n--dates\n  session_date_est,\n  session_time_est,\n  session_timestamp_est,\n\n\n  platform_type_initial,\n  had_subscribe_newsletter,\n  had_signup,\n  is_logged_in,\n  is_user_initial_session,\n\n-- page info\n  page_path_initial,\n  page_path_first_initial,\n  page_path_second_initial,\n  page_path_third_initial,\n  page_path_slug_initial,\n\n  page_path_latest,\n  page_path_first_latest,\n  page_path_second_latest,\n  page_path_third_latest,\n  page_path_slug_latest,\n\n-- site\n  site_context_site_section_initial,\n  site_context_language_initial,\n  site_context_site_section_latest,\n  site_context_language_latest,\n\n-- referrer\n  referrer_url_initial,\n  referrer_scheme_initial,\n  referrer_host_initial,\n  referrer_port_initial,\n  referrer_path_initial,\n  referrer_query_initial,\n  referrer_fragment_initial,\n  referrer_medium_initial,\n  referrer_source_initial,\n  referrer_keyword_initial,\n\n--marketing\n  is_marketing_traffic,\n  marketing_click_id_initial,\n  marketing_medium_initial,\n  marketing_source_initial,\n  marketing_keyword_initial,\n  marketing_content_initial,\n  marketing_campaign_initial,\n  marketing_network_initial,\n\n--engagement\n  engagement_second,\n  engagement_is_bounce_session,\n  engagement_is_unengaged,\n  engagement_pageview_count,\n  engagement_pagepath_unique_count\n  from u_org_session", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.u_org_session"}, "model.understood_analytics.u_org_event": {"raw_sql": "with events as (\r\n  select *\r\n  from {{ref('stg_sp_events')}}\r\n  where  has_site_data  = true\r\n    -- test for incremental load\r\n    {% if is_incremental() %}\r\n    and   event_date_est >= (\r\n    select dateadd(day, -3, max(event_date_est)) from {{this}}\r\n    )\r\n    {% endif %}\r\n)\r\n\r\nselect\r\n--ids\r\nunique_event_id,\r\nto_binary(replace(unique_pageview_id, '-'), 'hex') as pk_unique_pageview_id,\r\nto_binary(replace(session_id, '-'), 'hex') as pk_session_id,\r\nunderstood_id,\r\nsession_id,\r\napplication_id,\r\nunique_pageview_id,\r\ncontentful_id,\r\n\r\n--dates\r\nevent_date_est,\r\nevent_time_est,\r\nevent_timestamp_est,\r\n--data\r\nevent_name,\r\nevent_type,\r\nsite_section,\r\nunit_name,\r\nunit_location,\r\nsignup_postalcode,\r\naccount_submit_success,\r\naccount_signup_type,\r\nis_content,\r\nis_external,\r\narticle_url,\r\nbutton_name,\r\nbutton_type,\r\ndownload_title,\r\nplatform,\r\nposition_in_unit,\r\njson,\r\nhelpful,\r\nprogram,\r\nsubmitted_text,\r\nsubmit_success,\r\nvideo_id,\r\ninterval,\r\npercent_completed,\r\naudience,\r\nsubmitted_list,\r\nsubmitted_list_size,\r\nlinked_content_id,\r\nlinked_content_url,\r\n\r\n--flags for metrics\r\ncase when (event_name = 'account' and event_type = 'account_creation')\r\n    OR (event_name= 'engagement' and event_type = 'download') \r\n    OR (event_name= 'engagement' and event_type = 'share')\r\n    OR (event_name= 'engagement' and event_type = 'rating')\r\n    OR (event_name= 'engagement' and event_type = 'search')\r\n    OR (event_name= 'engagement' and event_type = 'print')\r\n    OR (event_name= 'engagement' and event_type = 'bookmark')\r\n    OR (event_name= 'engagement' and event_type = 'subscribe' and submit_success = 'true')\r\n    OR (unit_name in ('recommended for you', 'quick tips', 'deeper dives', 'our community', 'trending') \r\n          and (site_section='hub')  \r\n          and event_name= 'navigation' and event_type = 'click'\r\n        )\r\n    OR (unit_name in ('topic preferences inline', 'topic preferences','topic_preferences') \r\n        and site_section in ('hub','articles') \r\n        and event_name= 'engagement' and event_type in ('select','select topics') \r\n        ) \r\n    OR (unit_name ='accordion' and event_name = 'navigation' and event_type = 'click') \r\n    OR (unit_name ='carousel' = 1 and event_name = 'navigation' and event_type = 'click')\r\n    OR (button_name = 'learn_more' and event_name= 'navigation' and event_type = 'click')\r\n    OR (event_name = 'engagement' and event_type = 'community_download')\r\nthen 1 else 0 end as flag_core_actions\r\nfrom events", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.understood_analytics.stg_sp_events"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"owner": "@Allie"}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "sync_all_columns", "cluster_by": ["event_name", "event_type", "unit_name"], "unique_key": "unique_event_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "marts", "u_org", "u_org_event"], "unique_id": "model.understood_analytics.u_org_event", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event.sql", "original_file_path": "models/marts/u_org/u_org_event.sql", "name": "u_org_event", "alias": "u_org_event", "checksum": {"name": "sha256", "checksum": "ccbde9a9ce835e2cd28ed5d5dbc095e79b5824db1106913d829f25ced5e7c30e"}, "tags": [], "refs": [["stg_sp_events"]], "sources": [], "description": "Events for U.org, accounts, engagement etc...", "columns": {"unique_event_id": {"name": "unique_event_id", "description": "Unique id for impression events. Primary key of the table.", "meta": {"dimension_measure": "dimension", "primary_key": true, "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "understood_id": {"name": "understood_id", "description": "User id unique across all platform.  Generated by DE process.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pk_session_id": {"name": "pk_session_id", "description": "Binary of Session Id.  For efficient joins.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pk_unique_pageview_id": {"name": "pk_unique_pageview_id", "description": "Id to identify page/screen that event occurred on.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "Id to identify pageviews and events within an alloted time-period.  Derived from timeout calculations.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "application_id": {"name": "application_id", "description": "Snowplow ID to identify use.  'web-id', 'app-id', etc...", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "contentful_id": {"name": "contentful_id", "description": "Id for assests managed via contentful.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "unique_pageview_id": {"name": "unique_pageview_id", "description": "Id to identify page/screen that event occurred on.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "event_date_est": {"name": "event_date_est", "description": "Date that event occured, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_hidden": true, "looker_field_type": "date"}, "data_type": null, "quote": null, "tags": []}, "event_time_est": {"name": "event_time_est", "description": "Time that event occured, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_hidden": true, "looker_field_type": "time"}, "data_type": null, "quote": null, "tags": []}, "event_timestamp_est": {"name": "event_timestamp_est", "description": "Timestamp that event occured, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_hidden": true, "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "event_name": {"name": "event_name", "description": "The name type of event recorded.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "event_type": {"name": "event_type", "description": "The type of event recorded.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_section": {"name": "site_section", "description": "The name type of event recorded.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "unit_name": {"name": "unit_name", "description": "The type of event recorded.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "signup_postalcode": {"name": "signup_postalcode", "description": "Postal code submitted with account creation.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_hidden": true, "looker_field_group": "Misc", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "account_submit_success": {"name": "account_submit_success", "description": "Whether the submission of the account creation was successful.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "account_signup_type": {"name": "account_signup_type", "description": "Type of account signup.  'Email', 'Google', 'Apple' etc.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "is_content": {"name": "is_content", "description": "Flag for contenful resources", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "is_external": {"name": "is_external", "description": "Flag for external resources", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "button_name": {"name": "button_name", "description": "The name of the button that is clicked on during the navigation event.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "button_type": {"name": "button_type", "description": "Type of button", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "download_title": {"name": "download_title", "description": "The title of the download that is downloaded.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "platform": {"name": "platform", "description": "Platform when sharing & following.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "position_in_unit": {"name": "position_in_unit", "description": "# position of resource clicked.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "number", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "json": {"name": "json", "description": "JSON from Context provided by SP", "meta": {"dimension_measure": "dimension", "looker": true, "looker_hidden": true, "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "helpful": {"name": "helpful", "description": "Rates the piece of content as helpful or not.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "yesno", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "program": {"name": "program", "description": "The program specified in the engagement context.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "submitted_text": {"name": "submitted_text", "description": "The text submitted during a comment, reply, or discussion. This does not incude the submitted email text.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "submit_success": {"name": "submit_success", "description": "Whether the submission was successful.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "yesno", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "video_id": {"name": "video_id", "description": "Id of video content.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "interval": {"name": "interval", "description": "Interval.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "percent_completed": {"name": "percent_completed", "description": "Percent completed.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "audience": {"name": "audience", "description": "These are the prefs that a user puts in about themselves.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "submitted_list": {"name": "submitted_list", "description": "The list of submitted values in an event when they are a list", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "string", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "submitted_list_size": {"name": "submitted_list_size", "description": "The # of items submitted.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_type": "number", "looker_field_group": "Action"}, "data_type": null, "quote": null, "tags": []}, "linked_content_id": {"name": "linked_content_id", "description": "Reference to contenful id.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "linked_content_url": {"name": "linked_content_url", "description": "Reference to url.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Misc", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "flag_core_actions": {"name": "flag_core_actions", "description": "0/1 indicator for all core action events.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flags", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/marts/u_org/u_org_event.yml", "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_event.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.867622, "compiled_sql": "with events as (\n  select *\n  from analytic_layer_prod.core.stg_sp_events\n  where  has_site_data  = true\n    -- test for incremental load\n    \n    and   event_date_est >= (\n    select dateadd(day, -3, max(event_date_est)) from analytic_layer_prod.core.u_org_event\n    )\n    \n)\n\nselect\n--ids\nunique_event_id,\nto_binary(replace(unique_pageview_id, '-'), 'hex') as pk_unique_pageview_id,\nto_binary(replace(session_id, '-'), 'hex') as pk_session_id,\nunderstood_id,\nsession_id,\napplication_id,\nunique_pageview_id,\ncontentful_id,\n\n--dates\nevent_date_est,\nevent_time_est,\nevent_timestamp_est,\n--data\nevent_name,\nevent_type,\nsite_section,\nunit_name,\nunit_location,\nsignup_postalcode,\naccount_submit_success,\naccount_signup_type,\nis_content,\nis_external,\narticle_url,\nbutton_name,\nbutton_type,\ndownload_title,\nplatform,\nposition_in_unit,\njson,\nhelpful,\nprogram,\nsubmitted_text,\nsubmit_success,\nvideo_id,\ninterval,\npercent_completed,\naudience,\nsubmitted_list,\nsubmitted_list_size,\nlinked_content_id,\nlinked_content_url,\n\n--flags for metrics\ncase when (event_name = 'account' and event_type = 'account_creation')\n    OR (event_name= 'engagement' and event_type = 'download') \n    OR (event_name= 'engagement' and event_type = 'share')\n    OR (event_name= 'engagement' and event_type = 'rating')\n    OR (event_name= 'engagement' and event_type = 'search')\n    OR (event_name= 'engagement' and event_type = 'print')\n    OR (event_name= 'engagement' and event_type = 'bookmark')\n    OR (event_name= 'engagement' and event_type = 'subscribe' and submit_success = 'true')\n    OR (unit_name in ('recommended for you', 'quick tips', 'deeper dives', 'our community', 'trending') \n          and (site_section='hub')  \n          and event_name= 'navigation' and event_type = 'click'\n        )\n    OR (unit_name in ('topic preferences inline', 'topic preferences','topic_preferences') \n        and site_section in ('hub','articles') \n        and event_name= 'engagement' and event_type in ('select','select topics') \n        ) \n    OR (unit_name ='accordion' and event_name = 'navigation' and event_type = 'click') \n    OR (unit_name ='carousel' = 1 and event_name = 'navigation' and event_type = 'click')\n    OR (button_name = 'learn_more' and event_name= 'navigation' and event_type = 'click')\n    OR (event_name = 'engagement' and event_type = 'community_download')\nthen 1 else 0 end as flag_core_actions\nfrom events", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.u_org_event"}, "model.understood_analytics.u_org_pageview": {"raw_sql": "with u_org_pageview as (\r\n  select *\r\n  from {{ref('stg_sp_pageview')}}\r\n  where has_site_data  = true\r\n    -- test for incremental load\r\n    {% if is_incremental() %}\r\n    and   pageview_date_est >= (\r\n    select dateadd(day, -3, max(pageview_date_est)) from {{this}}\r\n    )\r\n    {% endif %}\r\n)\r\n\r\nselect \r\n  --ids\r\n  u_org_pageview.unique_pageview_id,\r\n  to_binary(replace(u_org_pageview.unique_pageview_id, '-'), 'hex') as pk_unique_pageview_id,\r\n  to_binary(replace(u_org_pageview.session_id, '-'), 'hex') as pk_session_id,\r\n  to_binary(replace(u_org_pageview.contentful_id, '-'), 'utf-8') as pk_contentful_id,\r\n  u_org_pageview.understood_id,\r\n  u_org_pageview.session_id,\r\n  u_org_pageview.contentful_id,\r\n  u_org_pageview.application_id,\r\n  u_org_pageview.has_site_data,\r\n  u_org_pageview.has_wunder_data,\r\n  \r\n  --dates\r\n  u_org_pageview.pageview_date_est,\r\n  u_org_pageview.pageview_time_est,\r\n  u_org_pageview.pageview_timestamp_est,\r\n\r\n  --page info\r\n  u_org_pageview.is_initial_user_pageview,\r\n  u_org_pageview.user_pageview_order,\r\n  u_org_pageview.pageview_order,\r\n  u_org_pageview.is_initial_session_pageview,\r\n  u_org_pageview.is_latest_session_pageview,\r\n  u_org_pageview.page_pageping_count,\r\n  u_org_pageview.pageview_engagement_second,\r\n  u_org_pageview.page_url,\r\n  u_org_pageview.page_title,\r\n  u_org_pageview.page_scheme,\r\n  u_org_pageview.page_host,\r\n  u_org_pageview.page_port,\r\n  u_org_pageview.page_path,\r\n  u_org_pageview.page_path_language,\r\n  u_org_pageview.page_path_language_country,\r\n  u_org_pageview.page_path_first,\r\n  u_org_pageview.page_path_second,\r\n  u_org_pageview.page_path_third,\r\n  u_org_pageview.page_path_slug,\r\n  u_org_pageview.page_query,\r\n  u_org_pageview.page_encoding,\r\n  u_org_pageview.page_fragment,\r\n\r\n  --site info\r\n  u_org_pageview.site_external_content_id,\r\n  u_org_pageview.site_model_name,\r\n  u_org_pageview.site_model_version,\r\n  u_org_pageview.site_language,\r\n  u_org_pageview.site_section,\r\n  u_org_pageview.site_unit_name,\r\n  u_org_pageview.site_unit_location,\r\n  u_org_pageview.site_program,\r\n  u_org_pageview.site_channel,\r\n  u_org_pageview.site_topic,\r\n  u_org_pageview.site_subtopic,\r\n\r\n  -- referrer info\r\n  u_org_pageview.referrer_url,\r\n  u_org_pageview.referrer_scheme,\r\n  u_org_pageview.referrer_host,\r\n  u_org_pageview.referrer_port,\r\n  u_org_pageview.referrer_path,\r\n  u_org_pageview.referrer_query,\r\n  u_org_pageview.referrer_fragment,\r\n  u_org_pageview.referrer_medium,\r\n  u_org_pageview.referrer_source,\r\n  u_org_pageview.referrer_keyword,\r\n\r\n  -- location\r\n  u_org_pageview.location_latitude,\r\n  u_org_pageview.location_longitude,\r\n  u_org_pageview.location_postalcode,\r\n  u_org_pageview.location_city,\r\n  u_org_pageview.location_country,\r\n  u_org_pageview.location_region_code,\r\n  u_org_pageview.location_region_name,\r\n  u_org_pageview.location_timezone,\r\n  u_org_pageview.location_os_timezone,\r\n\r\n  --device\r\n  u_org_pageview.device_browser_language,\r\n  u_org_pageview.device_browser_language_country,\r\n  u_org_pageview.device_browser_language_code,\r\n  u_org_pageview.device_network_type,\r\n  u_org_pageview.device_class,\r\n  u_org_pageview.device_operating_system_class,\r\n  u_org_pageview.phone_carrier,\r\n  u_org_pageview.agent_class,\r\n  u_org_pageview.device_brand,\r\n  u_org_pageview.device_family,\r\n  u_org_pageview.device_name,\r\n  u_org_pageview.device_version,\r\n  u_org_pageview.device_firmware_version,\r\n  u_org_pageview.device_cpu,\r\n  u_org_pageview.device_operating_system_family,\r\n  u_org_pageview.device_operating_system_name,\r\n  u_org_pageview.device_operating_system_version,\r\n  u_org_pageview.device_layout_engine_name,\r\n  u_org_pageview.device_layout_engine_version,\r\n  u_org_pageview.device_useragent_name,\r\n  u_org_pageview.device_useragent_version,\r\n  u_org_pageview.device_webview_app_name,\r\n  u_org_pageview.device_webview_app_version,\r\n  u_org_pageview.device_apple_idfv,\r\n\r\n  --marketing info\r\n  u_org_pageview.marketing_click_id,\r\n  u_org_pageview.marketing_medium,\r\n  u_org_pageview.marketing_source,\r\n  u_org_pageview.marketing_keyword,\r\n  u_org_pageview.marketing_content,\r\n  u_org_pageview.marketing_campaign,\r\n  u_org_pageview.marketing_network,\r\n  u_org_pageview.take_note_campaign,\r\n\r\n  --engagement\r\n  u_org_pageview.engagement_is_unengaged,\r\n  u_org_pageview.engagement_x_percentage_scrolled,\r\n  u_org_pageview.engagement_y_percentage_scrolled,\r\n  u_org_pageview.pageview_engagement_second as engagement_second  \r\nfrom u_org_pageview", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.understood_analytics.stg_sp_pageview"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "sync_all_columns", "cluster_by": ["site_section"], "unique_key": "unique_pageview_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "marts", "u_org", "u_org_pageview"], "unique_id": "model.understood_analytics.u_org_pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview.sql", "original_file_path": "models/marts/u_org/u_org_pageview.sql", "name": "u_org_pageview", "alias": "u_org_pageview", "checksum": {"name": "sha256", "checksum": "ab8e20471a4b8384bc4731d280f05261d00f3c7d59a9b5f853e18f2e7bd6de8f"}, "tags": [], "refs": [["stg_sp_pageview"]], "sources": [], "description": "Pageviews for U.org, when a user visits a particular page on the website.", "columns": {"unique_pageview_id": {"name": "unique_pageview_id", "description": "Unique id for pageviews. Primary key of the table.", "meta": {"dimension_measure": "dimension", "primary_key": true, "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pk_session_id": {"name": "pk_session_id", "description": "Binary of Session Id, for efficient joins.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pk_unique_pageview_id": {"name": "pk_unique_pageview_id", "description": "Binary of pageview ID, for efficient joins.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pk_contentful_id": {"name": "pk_contentful_id", "description": "Binary of contentful ID, for efficient joins.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "understood_id": {"name": "understood_id", "description": "User id unique across all platform.  Generated by DE process.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "session_id": {"name": "session_id", "description": "Id to identify pageviews and events within an alloted time-period.  Derived from timeout calculations.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "contentful_id": {"name": "contentful_id", "description": "Id for assests managed via contentful.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "application_id": {"name": "application_id", "description": "Snowplow ID to identify use.  'web-id', 'app-id', etc...", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "IDs", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "has_site_data": {"name": "has_site_data", "description": "Binary for website records", "meta": {"dimension_measure": "dimension", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "has_wunder_data": {"name": "has_wunder_data", "description": "Binary for community app  records", "meta": {"dimension_measure": "dimension", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "pageview_date_est": {"name": "pageview_date_est", "description": "Date that pageview occured, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_hidden": true, "looker_field_type": "date"}, "data_type": null, "quote": null, "tags": []}, "pageview_time_est": {"name": "pageview_time_est", "description": "Time that pageview occured, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_hidden": true, "looker_field_type": "time"}, "data_type": null, "quote": null, "tags": []}, "pageview_timestamp_est": {"name": "pageview_timestamp_est", "description": "Timestamp that pageview occured, based on derived_timestamp.", "meta": {"dimension_measure": "dimension", "looker": true, "looker_hidden": true, "looker_field_type": "date_time"}, "data_type": null, "quote": null, "tags": []}, "is_initial_user_pageview": {"name": "is_initial_user_pageview", "description": "This is true if this is the first pageview that an understood id has had", "meta": {"dimension_measure": "dimension", "looker_field_group": "Page", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "user_pageview_order": {"name": "user_pageview_order", "description": "The order of the pageview events for a user with an understood id", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pageview_order": {"name": "pageview_order", "description": "The order number of the pageview in a single session", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "is_initial_session_pageview": {"name": "is_initial_session_pageview", "description": "If a pageview is the first pageview of a session, this is true", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "is_latest_session_pageview": {"name": "is_latest_session_pageview", "description": "If this is the last pageview of a session, this is true", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "yesno"}, "data_type": null, "quote": null, "tags": []}, "page_pageping_count": {"name": "page_pageping_count", "description": "The number of pagepings for a particular pageview", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "pageview_engagement_second": {"name": "pageview_engagement_second", "description": "The sum of all of the ping engagement times", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_url": {"name": "page_url", "description": "The full url with the parameters ", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_title": {"name": "page_title", "description": "title", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_scheme": {"name": "page_scheme", "description": "scheme", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_host": {"name": "page_host", "description": "hostname", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_port": {"name": "page_port", "description": "port", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path": {"name": "page_path", "description": "path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_language": {"name": "page_path_language", "description": "The language part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_language_country": {"name": "page_path_language_country", "description": "The country code of the language of the article", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_first": {"name": "page_path_first", "description": "The first part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_second": {"name": "page_path_second", "description": "The second part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_third": {"name": "page_path_third", "description": "The third part of the path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_path_slug": {"name": "page_path_slug", "description": "The last part of the path, which is the slug in the article", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_query": {"name": "page_query", "description": "query parameters", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_encoding": {"name": "page_encoding", "description": "the encoding of a doc", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "page_fragment": {"name": "page_fragment", "description": "url fragment", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Page", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_external_content_id": {"name": "site_external_content_id", "description": "The id of external audio or video", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_model_name": {"name": "site_model_name", "description": "name of the model", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_model_version": {"name": "site_model_version", "description": "version of the model", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_language": {"name": "site_language", "description": "language of the page/context", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_section": {"name": "site_section", "description": "section of the site that the event occured on ", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_unit_name": {"name": "site_unit_name", "description": "name of the unit that the event occured on", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_unit_location": {"name": "site_unit_location", "description": "location of the unit that the event occurred on", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_program": {"name": "site_program", "description": "The position in something like a carousel", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_channel": {"name": "site_channel", "description": "program that the event corresponds to, use for filtering in reporting", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_topic": {"name": "site_topic", "description": "topic of the page/context", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "site_subtopic": {"name": "site_subtopic", "description": "subtopic of the page/context", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Site", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_url": {"name": "referrer_url", "description": "The full url of the referrer, previous page", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_scheme": {"name": "referrer_scheme", "description": "scheme", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_host": {"name": "referrer_host", "description": "hostname", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_port": {"name": "referrer_port", "description": "port", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_path": {"name": "referrer_path", "description": "path", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_query": {"name": "referrer_query", "description": "referrer query string/parameters", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_fragment": {"name": "referrer_fragment", "description": "Referrer fragment", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_medium": {"name": "referrer_medium", "description": "type of referrer", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_source": {"name": "referrer_source", "description": "name of the referrer if it is recognized", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "referrer_keyword": {"name": "referrer_keyword", "description": "keywords if the source is a search engine", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Referrer", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_latitude": {"name": "location_latitude", "description": "The zipcode that the user signed up with", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_longitude": {"name": "location_longitude", "description": "Latitude", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_postalcode": {"name": "location_postalcode", "description": "Postalcode", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_city": {"name": "location_city", "description": "City that the user is in", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_country": {"name": "location_country", "description": "City that the user is in", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_region_code": {"name": "location_region_code", "description": "ISO 3166-1 country codes", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_region_name": {"name": "location_region_name", "description": "ISO-3166-2 region codes", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_timezone": {"name": "location_timezone", "description": "Timezone", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "location_os_timezone": {"name": "location_os_timezone", "description": "client operating system's time zone", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Location", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_browser_language": {"name": "device_browser_language", "description": "The language part of the browser's language", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_browser_language_country": {"name": "device_browser_language_country", "description": "Device Browser Language Country", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_browser_language_code": {"name": "device_browser_language_code", "description": "Device Browser Language Code", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_network_type": {"name": "device_network_type", "description": "Device Network Type", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_class": {"name": "device_class", "description": "Device Class", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_operating_system_class": {"name": "device_operating_system_class", "description": "Device Operating System Class", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "phone_carrier": {"name": "phone_carrier", "description": "Phone Carrier", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "agent_class": {"name": "agent_class", "description": "Agent Class", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_brand": {"name": "device_brand", "description": "Device Brand", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_family": {"name": "device_family", "description": "Device Family", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_name": {"name": "device_name", "description": "Device Name", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_version": {"name": "device_version", "description": "Device Version", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_firmware_version": {"name": "device_firmware_version", "description": "Device Firmware Version", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_cpu": {"name": "device_cpu", "description": "Device Cpu", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_operating_system_family": {"name": "device_operating_system_family", "description": "Device Operating System Family", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_operating_system_name": {"name": "device_operating_system_name", "description": "Device Operating System Name", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_operating_system_version": {"name": "device_operating_system_version", "description": "Device Operating System Version", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_layout_engine_name": {"name": "device_layout_engine_name", "description": "Device Layout Engine Name", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_layout_engine_version": {"name": "device_layout_engine_version", "description": "Device Layout Engine Version", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_useragent_name": {"name": "device_useragent_name", "description": "Device Useragent Name", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_useragent_version": {"name": "device_useragent_version", "description": "Device Useragent Version", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_webview_app_name": {"name": "device_webview_app_name", "description": "Device Webview App Name", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_webview_app_version": {"name": "device_webview_app_version", "description": "Device Webview App Version", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "device_apple_idfv": {"name": "device_apple_idfv", "description": "Device Apple Idfv", "meta": {"dimension_measure": "dimension", "looker": false, "looker_field_group": "Device", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_click_id": {"name": "marketing_click_id", "description": "Marketing Click Id", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_medium": {"name": "marketing_medium", "description": "Marketing Medium", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_source": {"name": "marketing_source", "description": "Marketing Source", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_keyword": {"name": "marketing_keyword", "description": "Marketing Keyword", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_content": {"name": "marketing_content", "description": "Marketing Content", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_campaign": {"name": "marketing_campaign", "description": "Marketing Campaign", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "marketing_network": {"name": "marketing_network", "description": "Marketing Network", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Marketing", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "engagement_is_unengaged": {"name": "engagement_is_unengaged", "description": "Engagement Is Unengaged", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "engagement_x_percentage_scrolled": {"name": "engagement_x_percentage_scrolled", "description": "Engagement X Percentage Scrolled", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "engagement_y_percentage_scrolled": {"name": "engagement_y_percentage_scrolled", "description": "Engagement Y Percentage Scrolled", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "engagement_second": {"name": "engagement_second", "description": "Engagement Second", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Engagement", "looker_field_type": "string"}, "data_type": null, "quote": null, "tags": []}, "flag_new_user_page_view": {"name": "flag_new_user_page_view", "description": "Flag New User Page View", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_is_unengaged_page_view": {"name": "flag_is_unengaged_page_view", "description": "Flag Is Unengaged Page View", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_is_engaged_page_view": {"name": "flag_is_engaged_page_view", "description": "Flag Is Engaged Page View", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_entry_page_page_view": {"name": "flag_entry_page_page_view", "description": "Flag Entry Page Page View", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_exit_page_page_view": {"name": "flag_exit_page_page_view", "description": "Flag Exit Page Page View", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}, "flag_page_completion": {"name": "flag_page_completion", "description": "Flag Page Completion", "meta": {"dimension_measure": "dimension", "looker": true, "looker_field_group": "Flag", "looker_field_type": "number"}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/marts/u_org/u_org_pageview.yml", "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.267119, "compiled_sql": "with u_org_pageview as (\n  select *\n  from analytic_layer_prod.core.stg_sp_pageview\n  where has_site_data  = true\n    -- test for incremental load\n    \n    and   pageview_date_est >= (\n    select dateadd(day, -3, max(pageview_date_est)) from analytic_layer_prod.core.u_org_pageview\n    )\n    \n)\n\nselect \n  --ids\n  u_org_pageview.unique_pageview_id,\n  to_binary(replace(u_org_pageview.unique_pageview_id, '-'), 'hex') as pk_unique_pageview_id,\n  to_binary(replace(u_org_pageview.session_id, '-'), 'hex') as pk_session_id,\n  to_binary(replace(u_org_pageview.contentful_id, '-'), 'utf-8') as pk_contentful_id,\n  u_org_pageview.understood_id,\n  u_org_pageview.session_id,\n  u_org_pageview.contentful_id,\n  u_org_pageview.application_id,\n  u_org_pageview.has_site_data,\n  u_org_pageview.has_wunder_data,\n  \n  --dates\n  u_org_pageview.pageview_date_est,\n  u_org_pageview.pageview_time_est,\n  u_org_pageview.pageview_timestamp_est,\n\n  --page info\n  u_org_pageview.is_initial_user_pageview,\n  u_org_pageview.user_pageview_order,\n  u_org_pageview.pageview_order,\n  u_org_pageview.is_initial_session_pageview,\n  u_org_pageview.is_latest_session_pageview,\n  u_org_pageview.page_pageping_count,\n  u_org_pageview.pageview_engagement_second,\n  u_org_pageview.page_url,\n  u_org_pageview.page_title,\n  u_org_pageview.page_scheme,\n  u_org_pageview.page_host,\n  u_org_pageview.page_port,\n  u_org_pageview.page_path,\n  u_org_pageview.page_path_language,\n  u_org_pageview.page_path_language_country,\n  u_org_pageview.page_path_first,\n  u_org_pageview.page_path_second,\n  u_org_pageview.page_path_third,\n  u_org_pageview.page_path_slug,\n  u_org_pageview.page_query,\n  u_org_pageview.page_encoding,\n  u_org_pageview.page_fragment,\n\n  --site info\n  u_org_pageview.site_external_content_id,\n  u_org_pageview.site_model_name,\n  u_org_pageview.site_model_version,\n  u_org_pageview.site_language,\n  u_org_pageview.site_section,\n  u_org_pageview.site_unit_name,\n  u_org_pageview.site_unit_location,\n  u_org_pageview.site_program,\n  u_org_pageview.site_channel,\n  u_org_pageview.site_topic,\n  u_org_pageview.site_subtopic,\n\n  -- referrer info\n  u_org_pageview.referrer_url,\n  u_org_pageview.referrer_scheme,\n  u_org_pageview.referrer_host,\n  u_org_pageview.referrer_port,\n  u_org_pageview.referrer_path,\n  u_org_pageview.referrer_query,\n  u_org_pageview.referrer_fragment,\n  u_org_pageview.referrer_medium,\n  u_org_pageview.referrer_source,\n  u_org_pageview.referrer_keyword,\n\n  -- location\n  u_org_pageview.location_latitude,\n  u_org_pageview.location_longitude,\n  u_org_pageview.location_postalcode,\n  u_org_pageview.location_city,\n  u_org_pageview.location_country,\n  u_org_pageview.location_region_code,\n  u_org_pageview.location_region_name,\n  u_org_pageview.location_timezone,\n  u_org_pageview.location_os_timezone,\n\n  --device\n  u_org_pageview.device_browser_language,\n  u_org_pageview.device_browser_language_country,\n  u_org_pageview.device_browser_language_code,\n  u_org_pageview.device_network_type,\n  u_org_pageview.device_class,\n  u_org_pageview.device_operating_system_class,\n  u_org_pageview.phone_carrier,\n  u_org_pageview.agent_class,\n  u_org_pageview.device_brand,\n  u_org_pageview.device_family,\n  u_org_pageview.device_name,\n  u_org_pageview.device_version,\n  u_org_pageview.device_firmware_version,\n  u_org_pageview.device_cpu,\n  u_org_pageview.device_operating_system_family,\n  u_org_pageview.device_operating_system_name,\n  u_org_pageview.device_operating_system_version,\n  u_org_pageview.device_layout_engine_name,\n  u_org_pageview.device_layout_engine_version,\n  u_org_pageview.device_useragent_name,\n  u_org_pageview.device_useragent_version,\n  u_org_pageview.device_webview_app_name,\n  u_org_pageview.device_webview_app_version,\n  u_org_pageview.device_apple_idfv,\n\n  --marketing info\n  u_org_pageview.marketing_click_id,\n  u_org_pageview.marketing_medium,\n  u_org_pageview.marketing_source,\n  u_org_pageview.marketing_keyword,\n  u_org_pageview.marketing_content,\n  u_org_pageview.marketing_campaign,\n  u_org_pageview.marketing_network,\n  u_org_pageview.take_note_campaign,\n\n  --engagement\n  u_org_pageview.engagement_is_unengaged,\n  u_org_pageview.engagement_x_percentage_scrolled,\n  u_org_pageview.engagement_y_percentage_scrolled,\n  u_org_pageview.pageview_engagement_second as engagement_second  \nfrom u_org_pageview", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.u_org_pageview"}, "model.understood_analytics.meta_manifest_columns": {"raw_sql": "with current_artifact as (\r\n    select *\r\n    from {{ref('stg_dbt__artifacts')}}\r\n    where artifact_type ='manifest.json'\r\n    order by generated_at desc \r\n    limit 1\r\n),\r\n\r\nmodel_nodes as (\r\n    select \r\n        nodes.key as node_name,\r\n        nodes.value as node_json,\r\n        node_json:alias::string as node_alias,\r\n        node_json:database::string as node_database,\r\n        node_json:description::string as node_description,\r\n        node_json:relation_name::string as node_relation_name,\r\n        node_json:\"schema\"::string as node_schema,\r\n        node_json:unique_id::string as node_unique_id\r\n    from current_artifact\r\n    , lateral flatten( input => data:nodes ) as nodes\r\n    where left(nodes.key,5) = 'model' and node_json:\"schema\"::string = 'core')\r\n\r\nselect \r\n    model_nodes.*,\r\n    node_columns.value:description::string as column_description,\r\n    node_columns.value:\"name\"::string as column_name,\r\n    node_columns.value:data_type::string as column_data_type,\r\n    node_columns.value:tags as column_tags,\r\n    node_columns.value:meta:dimension_measure::string as column_meta_dimension_measure,\r\n    node_columns.value:meta:primary_key::string as column_meta_primary_key,\t\r\n    node_columns.value:meta:looker::string as column_meta_is_looker,\t\r\n    node_columns.value:meta:looker_hidden::string as column_meta_looker_hidden,\t   \r\n    node_columns.value:meta:looker_field_group::string as column_meta_looker_field_group,\t\r\n    node_columns.value:meta:looker_field_type::string as column_meta_looker_field_type\r\nfrom model_nodes\r\n,lateral flatten( input => node_json:columns ) as node_columns", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "dbt_meta_data", "meta_manifest_columns"], "unique_id": "model.understood_analytics.meta_manifest_columns", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/dbt_meta_data/meta_manifest_columns.sql", "original_file_path": "models/staging/dbt_meta_data/meta_manifest_columns.sql", "name": "meta_manifest_columns", "alias": "meta_manifest_columns", "checksum": {"name": "sha256", "checksum": "d3a88361457e2552dc9a2af272948fe9e733f2effd7d0a47f2f23d54c670a6e7"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "Generates metadata from manifest file auto-generated by dbt", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/staging/dbt_meta_data/meta.yml", "compiled_path": "target/compiled/understood_analytics/models/staging/dbt_meta_data/meta_manifest_columns.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3087914, "compiled_sql": "with current_artifact as (\n    select *\n    from analytic_layer_prod.core_dbt_artifacts.stg_dbt__artifacts\n    where artifact_type ='manifest.json'\n    order by generated_at desc \n    limit 1\n),\n\nmodel_nodes as (\n    select \n        nodes.key as node_name,\n        nodes.value as node_json,\n        node_json:alias::string as node_alias,\n        node_json:database::string as node_database,\n        node_json:description::string as node_description,\n        node_json:relation_name::string as node_relation_name,\n        node_json:\"schema\"::string as node_schema,\n        node_json:unique_id::string as node_unique_id\n    from current_artifact\n    , lateral flatten( input => data:nodes ) as nodes\n    where left(nodes.key,5) = 'model' and node_json:\"schema\"::string = 'core')\n\nselect \n    model_nodes.*,\n    node_columns.value:description::string as column_description,\n    node_columns.value:\"name\"::string as column_name,\n    node_columns.value:data_type::string as column_data_type,\n    node_columns.value:tags as column_tags,\n    node_columns.value:meta:dimension_measure::string as column_meta_dimension_measure,\n    node_columns.value:meta:primary_key::string as column_meta_primary_key,\t\n    node_columns.value:meta:looker::string as column_meta_is_looker,\t\n    node_columns.value:meta:looker_hidden::string as column_meta_looker_hidden,\t   \n    node_columns.value:meta:looker_field_group::string as column_meta_looker_field_group,\t\n    node_columns.value:meta:looker_field_type::string as column_meta_looker_field_type\nfrom model_nodes\n,lateral flatten( input => node_json:columns ) as node_columns", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.meta_manifest_columns"}, "model.understood_analytics.meta_metrics": {"raw_sql": "with current_artifact as (\r\nselect *\r\nfrom {{ref('stg_dbt__artifacts')}}\r\nwhere artifact_type ='manifest.json'\r\norder by generated_at desc \r\nlimit 1\r\n)\r\n  \r\nselect \r\n    value:name::string as metric,\r\n    value:description::string as description,\r\n    value:type::string as type,\r\n    value:sql::string as sql,\r\n    value:meta:looker_field_group::string as group_label,\r\n    value:meta:looker_value_format::string as value_format\r\nfrom current_artifact\r\n, lateral flatten( input => data:metrics ) as metrics", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "dbt_meta_data", "meta_metrics"], "unique_id": "model.understood_analytics.meta_metrics", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/dbt_meta_data/meta_metrics.sql", "original_file_path": "models/staging/dbt_meta_data/meta_metrics.sql", "name": "meta_metrics", "alias": "meta_metrics", "checksum": {"name": "sha256", "checksum": "58bc92242bb753b970b71ef4a9cfe3f12a95efff35e12a99e904670c08795ac7"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "Metrics definitions", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/staging/dbt_meta_data/meta.yml", "compiled_path": "target/compiled/understood_analytics/models/staging/dbt_meta_data/meta_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3132539, "compiled_sql": "with current_artifact as (\nselect *\nfrom analytic_layer_prod.core_dbt_artifacts.stg_dbt__artifacts\nwhere artifact_type ='manifest.json'\norder by generated_at desc \nlimit 1\n)\n  \nselect \n    value:name::string as metric,\n    value:description::string as description,\n    value:type::string as type,\n    value:sql::string as sql,\n    value:meta:looker_field_group::string as group_label,\n    value:meta:looker_value_format::string as value_format\nfrom current_artifact\n, lateral flatten( input => data:metrics ) as metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.meta_metrics"}, "model.understood_analytics.meta_looker_dimensions": {"raw_sql": "SELECT \r\n    node_alias,\r\n    case when column_meta_looker_field_type in ('date','time') then 'dimension_group' else 'dimension' end ||\r\n    ': ' || column_name || ' {' || CHAR(10)||\r\n    array_to_string(array_construct_compact(\r\n        concat('description',': \"',  column_description,'\"'),\r\n        concat('primary_key',': ', case when column_meta_primary_key = true then 'yes' end),\r\n        concat('type',': ', case when column_meta_looker_field_type in ('date','time') then 'time' else column_meta_looker_field_type end),\r\n        concat('convert_tz',': ', case when column_meta_looker_field_type in ('date','time') then 'no' else null end),\r\n        concat('timeframes',': ', case when column_meta_looker_field_type = 'date' then '[date, week, quarter, month, year]' when column_meta_looker_field_type ='time' then '[time_of_day, hour_of_day,hour4]' else null end),\r\n        concat('hidden',': ', case when column_meta_looker_hidden = true then 'yes' end),\r\n        concat('group_label',': \"', column_meta_looker_field_group,'\"')\r\n    ), CHAR(10)||'  ') \r\n    || CHAR(10)|| '}' as lookml_field\r\nfrom {{ref('meta_manifest_columns')}}\r\nwhere column_meta_is_looker = true and column_meta_dimension_measure = 'dimension'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.understood_analytics.meta_manifest_columns"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "dbt_meta_data", "meta_looker_dimensions"], "unique_id": "model.understood_analytics.meta_looker_dimensions", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/dbt_meta_data/meta_looker_dimensions.sql", "original_file_path": "models/staging/dbt_meta_data/meta_looker_dimensions.sql", "name": "meta_looker_dimensions", "alias": "meta_looker_dimensions", "checksum": {"name": "sha256", "checksum": "7507d29ab993e7721e2261df67c4888eb9cadebce186ec1c566927615c5da6c0"}, "tags": [], "refs": [["meta_manifest_columns"]], "sources": [], "description": "Extracts fields tagged as dimensions from manifest file and prepares LookML", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/staging/dbt_meta_data/meta.yml", "compiled_path": "target/compiled/understood_analytics/models/staging/dbt_meta_data/meta_looker_dimensions.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3098683, "compiled_sql": "SELECT \n    node_alias,\n    case when column_meta_looker_field_type in ('date','time') then 'dimension_group' else 'dimension' end ||\n    ': ' || column_name || ' {' || CHAR(10)||\n    array_to_string(array_construct_compact(\n        concat('description',': \"',  column_description,'\"'),\n        concat('primary_key',': ', case when column_meta_primary_key = true then 'yes' end),\n        concat('type',': ', case when column_meta_looker_field_type in ('date','time') then 'time' else column_meta_looker_field_type end),\n        concat('convert_tz',': ', case when column_meta_looker_field_type in ('date','time') then 'no' else null end),\n        concat('timeframes',': ', case when column_meta_looker_field_type = 'date' then '[date, week, quarter, month, year]' when column_meta_looker_field_type ='time' then '[time_of_day, hour_of_day,hour4]' else null end),\n        concat('hidden',': ', case when column_meta_looker_hidden = true then 'yes' end),\n        concat('group_label',': \"', column_meta_looker_field_group,'\"')\n    ), CHAR(10)||'  ') \n    || CHAR(10)|| '}' as lookml_field\nfrom analytic_layer_prod.core.meta_manifest_columns\nwhere column_meta_is_looker = true and column_meta_dimension_measure = 'dimension'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.meta_looker_dimensions"}, "model.understood_analytics.meta_looker_view": {"raw_sql": "select *\r\nfrom {{ref('meta_looker_dimensions')}}\r\n\r\nunion all \r\nselect *\r\nfrom {{ref('meta_looker_metrics')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.understood_analytics.meta_looker_dimensions", "model.understood_analytics.meta_looker_metrics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "dbt_meta_data", "meta_looker_view"], "unique_id": "model.understood_analytics.meta_looker_view", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/dbt_meta_data/meta_looker_view.sql", "original_file_path": "models/staging/dbt_meta_data/meta_looker_view.sql", "name": "meta_looker_view", "alias": "meta_looker_view", "checksum": {"name": "sha256", "checksum": "5b8d92605cc70e97901035d92ef0e49ab45341b2b75737999fa209850c151337"}, "tags": [], "refs": [["meta_looker_dimensions"], ["meta_looker_metrics"]], "sources": [], "description": "LookML for view from dbt metadata", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/staging/dbt_meta_data/meta.yml", "compiled_path": "target/compiled/understood_analytics/models/staging/dbt_meta_data/meta_looker_view.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3121173, "compiled_sql": "select *\nfrom analytic_layer_prod.core.meta_looker_dimensions\n\nunion all \nselect *\nfrom analytic_layer_prod.core.meta_looker_metrics", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.meta_looker_view"}, "model.understood_analytics.meta_looker_metrics": {"raw_sql": "with current_artifact as (\r\n    select *\r\n    from {{ref('stg_dbt__artifacts')}}\r\n    where artifact_type ='manifest.json'\r\n    order by generated_at desc \r\n    limit 1\r\n  )\r\n\r\nselect \r\n    value:refs[0][0]::string as src_table,\r\n    'measure' || ': ' || value:name::string || ' {' || CHAR(10)||\r\n    array_to_string(array_construct_compact(\r\n        concat('description',': \"',  value:description::string,'\"'),\r\n        concat('type',': ', value:type::string),\r\n        concat('sql',': ', value:sql::string, ';;'),\r\n        concat('hidden',': ', case when value:meta:looker_hidden::string = true then 'yes' end),\r\n        concat('group_label',': \"', value:meta:looker_field_group::string,'\"'),\r\n        concat('value_format',': \"', value:meta:looker_value_format::string,'\"')\r\n    ), CHAR(10)||'  ') \r\n    || CHAR(10)|| '}' as lookml_field\r\nfrom current_artifact\r\n, lateral flatten( input => data:metrics ) as metrics\r\nwhere value:meta:looker::string = true", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "dbt_meta_data", "meta_looker_metrics"], "unique_id": "model.understood_analytics.meta_looker_metrics", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/dbt_meta_data/meta_looker_metrics.sql", "original_file_path": "models/staging/dbt_meta_data/meta_looker_metrics.sql", "name": "meta_looker_metrics", "alias": "meta_looker_metrics", "checksum": {"name": "sha256", "checksum": "d2921369dd116bdeda6d13d115acca572a9a535291adc544b7777cbfea646168"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "Extracts metrics from manifest file and prepares LookML", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/staging/dbt_meta_data/meta.yml", "compiled_path": "target/compiled/understood_analytics/models/staging/dbt_meta_data/meta_looker_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3109477, "compiled_sql": "with current_artifact as (\n    select *\n    from analytic_layer_prod.core_dbt_artifacts.stg_dbt__artifacts\n    where artifact_type ='manifest.json'\n    order by generated_at desc \n    limit 1\n  )\n\nselect \n    value:refs[0][0]::string as src_table,\n    'measure' || ': ' || value:name::string || ' {' || CHAR(10)||\n    array_to_string(array_construct_compact(\n        concat('description',': \"',  value:description::string,'\"'),\n        concat('type',': ', value:type::string),\n        concat('sql',': ', value:sql::string, ';;'),\n        concat('hidden',': ', case when value:meta:looker_hidden::string = true then 'yes' end),\n        concat('group_label',': \"', value:meta:looker_field_group::string,'\"'),\n        concat('value_format',': \"', value:meta:looker_value_format::string,'\"')\n    ), CHAR(10)||'  ') \n    || CHAR(10)|| '}' as lookml_field\nfrom current_artifact\n, lateral flatten( input => data:metrics ) as metrics\nwhere value:meta:looker::string = true", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.meta_looker_metrics"}, "model.understood_analytics.stg_current_contentful_tag_external": {"raw_sql": "with external_current_raw as(\r\n    select *,\r\n      lower(regexp_replace(tag_title,'[^a-zA-Z0-9]+','_')) as tag_name_for_fields\r\n    from {{ source('contentful', 'article_tag') }}\r\n    where tag_source = 'external_tag' \r\n      and is_current='TRUE'\r\n)\r\n\r\nselect * \r\nfrom external_current_raw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.understood_analytics.contentful.article_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_current_contentful_tag_external"], "unique_id": "model.understood_analytics.stg_current_contentful_tag_external", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_current_contentful_tag_external.sql", "original_file_path": "models/staging/contentful/stg_current_contentful_tag_external.sql", "name": "stg_current_contentful_tag_external", "alias": "stg_current_contentful_tag_external", "checksum": {"name": "sha256", "checksum": "2485f8b237b6dd2ace65097a5a79bdd72ba5a13f706bdd978e7532ea506d85ea"}, "tags": [], "refs": [], "sources": [["contentful", "article_tag"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_current_contentful_tag_external.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.6432889, "compiled_sql": "with external_current_raw as(\n    select *,\n      lower(regexp_replace(tag_title,'[^a-zA-Z0-9]+','_')) as tag_name_for_fields\n    from reporting_database.contentful.article_tag\n    where tag_source = 'external_tag' \n      and is_current='TRUE'\n)\n\nselect * \nfrom external_current_raw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_current_contentful_tag_external"}, "model.understood_analytics.stg_contentful_external_pivot": {"raw_sql": "select\r\n    article_id as contentful_id,\r\n    listagg(distinct tag_title, '|') within group (order by tag_title) as tag_external_list,\r\n    count(*) as tag_external_count,\r\n    {{ dbt_utils.pivot('tag_name', dbt_utils.get_column_values(ref('stg_current_contentful_tag_external'),\r\n                                                            'tag_name_for_fields'),\r\n                                                            prefix = 'tag_external_'\r\n                                                            ) }}\r\nfrom {{ref('stg_current_contentful_tag_external')}}\r\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["model.understood_analytics.stg_current_contentful_tag_external", "model.understood_analytics.stg_current_contentful_tag_external"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_contentful_external_pivot"], "unique_id": "model.understood_analytics.stg_contentful_external_pivot", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_contentful_external_pivot.sql", "original_file_path": "models/staging/contentful/stg_contentful_external_pivot.sql", "name": "stg_contentful_external_pivot", "alias": "stg_contentful_external_pivot", "checksum": {"name": "sha256", "checksum": "92b86fa34af5273ac4c1d19b5b20465412217a498224b8faf8134f50d1a5bff3"}, "tags": [], "refs": [["stg_current_contentful_tag_external"], ["stg_current_contentful_tag_external"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_contentful_external_pivot.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.645494, "compiled_sql": "select\n    article_id as contentful_id,\n    listagg(distinct tag_title, '|') within group (order by tag_title) as tag_external_list,\n    count(*) as tag_external_count,\n    \n  \n    sum(\n      \n      case\n      when tag_name = 'school_supports'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_school_supports\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'strategies_and_tips'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_strategies_and_tips\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'parenting'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_parenting\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'school_struggles'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_school_struggles\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'reading_and_writing'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_reading_and_writing\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'root_causes_'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_root_causes_\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'personal_stories'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_personal_stories\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'managing_emotions'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_managing_emotions\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'signs_and_symptoms'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_signs_and_symptoms\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'covid'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_covid\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'confidence_and_self_esteem'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_confidence_and_self_esteem\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'focus_and_attention'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_focus_and_attention\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'stress_and_anxiety'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_stress_and_anxiety\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'talking_and_understanding'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_talking_and_understanding\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'distance_learning'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_distance_learning\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'math'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_math\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'on_the_job'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_on_the_job\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'social_skills'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_social_skills\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'staying_organized'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_staying_organized\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'frustration'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_frustration\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'avoiding_and_procrastinating'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_avoiding_and_procrastinating\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'following_instructions'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_following_instructions\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'hyperactivity'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_hyperactivity\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'distraction'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_distraction\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'supporting_your_child_at_school'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_supporting_your_child_at_school\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'executive_functioning_skills'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_external_executive_functioning_skills\"\n      \n    \n    \n  \n\nfrom analytic_layer_prod.core.stg_current_contentful_tag_external\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_contentful_external_pivot"}, "model.understood_analytics.stg_current_contentful_tag_moments": {"raw_sql": "with moments_current_raw as(\r\n    select *,\r\n      lower(regexp_replace(tag_name,'[^a-zA-Z0-9]+','_')) as tag_name_for_fields\r\n    from {{ source('contentful', 'article_tag') }}\r\n    where upper(tag_category_name) in (upper('moments'))\r\n      and is_current='TRUE'\r\n)\r\n\r\nselect *\r\nfrom moments_current_raw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.understood_analytics.contentful.article_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_current_contentful_tag_moments"], "unique_id": "model.understood_analytics.stg_current_contentful_tag_moments", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_current_contentful_tag_moments.sql", "original_file_path": "models/staging/contentful/stg_current_contentful_tag_moments.sql", "name": "stg_current_contentful_tag_moments", "alias": "stg_current_contentful_tag_moments", "checksum": {"name": "sha256", "checksum": "0b8fc3944626d1f12294d522d71e12892e9554ffefd1ff34ff297a8e6616c98a"}, "tags": [], "refs": [], "sources": [["contentful", "article_tag"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_current_contentful_tag_moments.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.6705441, "compiled_sql": "with moments_current_raw as(\n    select *,\n      lower(regexp_replace(tag_name,'[^a-zA-Z0-9]+','_')) as tag_name_for_fields\n    from reporting_database.contentful.article_tag\n    where upper(tag_category_name) in (upper('moments'))\n      and is_current='TRUE'\n)\n\nselect *\nfrom moments_current_raw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_current_contentful_tag_moments"}, "model.understood_analytics.stg_contentful_moments_pivot": {"raw_sql": "select\r\n    article_id as contentful_id,\r\n    listagg(distinct tag_name, '|') within group (order by tag_name) as tag_moments_list,\r\n    count(*) as tag_moments_count,\r\n    {{ dbt_utils.pivot('tag_name_for_fields', dbt_utils.get_column_values(ref('stg_current_contentful_tag_moments'),\r\n                                                            'tag_name_for_fields'),\r\n                                                            prefix = 'tag_moments_'\r\n                                                            ) }}\r\nfrom {{ref('stg_current_contentful_tag_moments')}}\r\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["model.understood_analytics.stg_current_contentful_tag_moments", "model.understood_analytics.stg_current_contentful_tag_moments"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_contentful_moments_pivot"], "unique_id": "model.understood_analytics.stg_contentful_moments_pivot", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_contentful_moments_pivot.sql", "original_file_path": "models/staging/contentful/stg_contentful_moments_pivot.sql", "name": "stg_contentful_moments_pivot", "alias": "stg_contentful_moments_pivot", "checksum": {"name": "sha256", "checksum": "c887ba3100b324f564e4975fe3c084effa793d61e2b73aac758d61c48cf0d0aa"}, "tags": [], "refs": [["stg_current_contentful_tag_moments"], ["stg_current_contentful_tag_moments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_contentful_moments_pivot.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.672687, "compiled_sql": "select\n    article_id as contentful_id,\n    listagg(distinct tag_name, '|') within group (order by tag_name) as tag_moments_list,\n    count(*) as tag_moments_count,\n    \n  \n    sum(\n      \n      case\n      when tag_name_for_fields = '1_being_understood'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_moments_1_being_understood\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name_for_fields = '2_finding_voice'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_moments_2_finding_voice\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name_for_fields = '3_trying_life'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_moments_3_trying_life\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name_for_fields = '4_thriving'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_moments_4_thriving\"\n      \n    \n    \n  \n\nfrom analytic_layer_prod.core.stg_current_contentful_tag_moments\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_contentful_moments_pivot"}, "model.understood_analytics.stg_contentful_stages_pivot": {"raw_sql": "select\r\n    article_id as contentful_id,\r\n    listagg(distinct tag_name, '|') within group (order by tag_name) as tag_stages_list,\r\n    count(*) as tag_stages_count,\r\n    {{ dbt_utils.pivot('tag_name', dbt_utils.get_column_values(ref('stg_current_contentful_tag_stages'),\r\n                                                            'tag_name_for_fields'),\r\n                                                            prefix = 'tag_stages_'\r\n                                                            ) }}\r\nfrom {{ref('stg_current_contentful_tag_stages')}}\r\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["model.understood_analytics.stg_current_contentful_tag_stages", "model.understood_analytics.stg_current_contentful_tag_stages"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_contentful_stages_pivot"], "unique_id": "model.understood_analytics.stg_contentful_stages_pivot", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_contentful_stages_pivot.sql", "original_file_path": "models/staging/contentful/stg_contentful_stages_pivot.sql", "name": "stg_contentful_stages_pivot", "alias": "stg_contentful_stages_pivot", "checksum": {"name": "sha256", "checksum": "db268124dd13b48696a63b3c53920d52650cb8df570475efc52d86c63eadfb01"}, "tags": [], "refs": [["stg_current_contentful_tag_stages"], ["stg_current_contentful_tag_stages"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_contentful_stages_pivot.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.6787033, "compiled_sql": "select\n    article_id as contentful_id,\n    listagg(distinct tag_name, '|') within group (order by tag_name) as tag_stages_list,\n    count(*) as tag_stages_count,\n    \n  \n    sum(\n      \n      case\n      when tag_name = 'm1_coping'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m1_coping\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm1_confusion'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m1_confusion\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm1_acceptance'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m1_acceptance\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'comparison_across_all_moments_'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_comparison_across_all_moments_\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm2_trying'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m2_trying\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm2_anger'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m2_anger\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm2_mastery'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m2_mastery\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'advocacy_across_all_moments_'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_advocacy_across_all_moments_\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm3_employment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m3_employment\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm3_deciding'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m3_deciding\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm4_resilience'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m4_resilience\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm3_dependency'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m3_dependency\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm4_pathing'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m4_pathing\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'm4_hopelessness'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_stages_m4_hopelessness\"\n      \n    \n    \n  \n\nfrom analytic_layer_prod.core.stg_current_contentful_tag_stages\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_contentful_stages_pivot"}, "model.understood_analytics.stg_contentful_tags_agg_json": {"raw_sql": "with articles_tag_current as (select \r\n    article_id,\r\n        array_agg(object_construct(\r\n                                    'tag_id',tag_id,\r\n                                    'tag_name', tag_name,\r\n                                    'tag_title', tag_title,\r\n                                    'tag_description', tag_description,                   \r\n                                    'tag_category_name', tag_category_name,\r\n                                    'tag_category_strength', tag_category_strength,\r\n                                    'start_timestamp', start_timestamp,\r\n                                    'end_timestamp', end_timestamp\r\n                                        )\r\n  ) :: variant AS contentful_article_tags_json\r\n    from {{ source('contentful', 'article_tag') }}\r\n    where is_current='TRUE'\r\n    GROUP BY 1\r\n)    \r\n\r\nselect\r\narticle_id as contentful_id,\r\ncontentful_article_tags_json,\r\narray_size(contentful_article_tags_json) as contentful_article_tags_count\r\nfrom articles_tag_current", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.understood_analytics.contentful.article_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_contentful_tags_agg_json"], "unique_id": "model.understood_analytics.stg_contentful_tags_agg_json", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_contentful_tags_agg_json.sql", "original_file_path": "models/staging/contentful/stg_contentful_tags_agg_json.sql", "name": "stg_contentful_tags_agg_json", "alias": "stg_contentful_tags_agg_json", "checksum": {"name": "sha256", "checksum": "4480ee90e17bfc5867ced48fe090cdd5bdce6e48c849df8715d41804e847e990"}, "tags": [], "refs": [], "sources": [["contentful", "article_tag"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_contentful_tags_agg_json.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.6855426, "compiled_sql": "with articles_tag_current as (select \n    article_id,\n        array_agg(object_construct(\n                                    'tag_id',tag_id,\n                                    'tag_name', tag_name,\n                                    'tag_title', tag_title,\n                                    'tag_description', tag_description,                   \n                                    'tag_category_name', tag_category_name,\n                                    'tag_category_strength', tag_category_strength,\n                                    'start_timestamp', start_timestamp,\n                                    'end_timestamp', end_timestamp\n                                        )\n  ) :: variant AS contentful_article_tags_json\n    from reporting_database.contentful.article_tag\n    where is_current='TRUE'\n    GROUP BY 1\n)    \n\nselect\narticle_id as contentful_id,\ncontentful_article_tags_json,\narray_size(contentful_article_tags_json) as contentful_article_tags_count\nfrom articles_tag_current", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_contentful_tags_agg_json"}, "model.understood_analytics.stg_contentful_kab_pivot": {"raw_sql": "select\r\n    article_id as contentful_id,\r\n    listagg(distinct tag_name, '|') within group (order by tag_name) as tag_kab_list,\r\n    count(*) as tag_kab_count,\r\n    {{ dbt_utils.pivot('tag_name', dbt_utils.get_column_values(ref('stg_current_contentful_tag_kab'),\r\n                                                            'tag_name_for_fields'),\r\n                                                            prefix = 'tag_kab_'\r\n                                                            ) }}\r\nfrom {{ref('stg_current_contentful_tag_kab')}}\r\ngroup by 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["model.understood_analytics.stg_current_contentful_tag_kab", "model.understood_analytics.stg_current_contentful_tag_kab"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_contentful_kab_pivot"], "unique_id": "model.understood_analytics.stg_contentful_kab_pivot", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_contentful_kab_pivot.sql", "original_file_path": "models/staging/contentful/stg_contentful_kab_pivot.sql", "name": "stg_contentful_kab_pivot", "alias": "stg_contentful_kab_pivot", "checksum": {"name": "sha256", "checksum": "0d4ca78aa3e30a0ff6c636873c380316afbf94633ca14246c400aa296769456a"}, "tags": [], "refs": [["stg_current_contentful_tag_kab"], ["stg_current_contentful_tag_kab"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_contentful_kab_pivot.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.6876683, "compiled_sql": "select\n    article_id as contentful_id,\n    listagg(distinct tag_name, '|') within group (order by tag_name) as tag_kab_list,\n    count(*) as tag_kab_count,\n    \n  \n    sum(\n      \n      case\n      when tag_name = 'building_knowledge'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_kab_building_knowledge\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'changing_behavior'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_kab_changing_behavior\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when tag_name = 'changing_attitudes'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tag_kab_changing_attitudes\"\n      \n    \n    \n  \n\nfrom analytic_layer_prod.core.stg_current_contentful_tag_kab\ngroup by 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_contentful_kab_pivot"}, "model.understood_analytics.stg_current_contentful_tag_stages": {"raw_sql": "with stages_current_raw as(\r\n    select *,\r\n      lower(regexp_replace(tag_name,'[^a-zA-Z0-9]+','_')) as tag_name_for_fields\r\n    from {{ source('contentful', 'article_tag') }}\r\n    where upper(tag_category_name) in (upper('stages'))\r\n      and is_current='TRUE'\r\n)\r\n\r\nselect *\r\nfrom stages_current_raw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.understood_analytics.contentful.article_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_current_contentful_tag_stages"], "unique_id": "model.understood_analytics.stg_current_contentful_tag_stages", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_current_contentful_tag_stages.sql", "original_file_path": "models/staging/contentful/stg_current_contentful_tag_stages.sql", "name": "stg_current_contentful_tag_stages", "alias": "stg_current_contentful_tag_stages", "checksum": {"name": "sha256", "checksum": "dd21f7938942facb76362c07c4d73cf2b50b833d4870c4fd86dda592a82a790c"}, "tags": [], "refs": [], "sources": [["contentful", "article_tag"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_current_contentful_tag_stages.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.693628, "compiled_sql": "with stages_current_raw as(\n    select *,\n      lower(regexp_replace(tag_name,'[^a-zA-Z0-9]+','_')) as tag_name_for_fields\n    from reporting_database.contentful.article_tag\n    where upper(tag_category_name) in (upper('stages'))\n      and is_current='TRUE'\n)\n\nselect *\nfrom stages_current_raw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_current_contentful_tag_stages"}, "model.understood_analytics.stg_current_contentful_tag_kab": {"raw_sql": "with kab_current_raw as(\r\n    select *,\r\n      lower(regexp_replace(tag_name,'[^a-zA-Z0-9]+','_')) as tag_name_for_fields\r\n    from {{ source('contentful', 'article_tag') }}\r\n    where upper(tag_category_name) in (upper('kab intent'))\r\n      and is_current='TRUE'\r\n)\r\n\r\nselect * \r\nfrom kab_current_raw", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.understood_analytics.contentful.article_tag"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "contentful", "stg_current_contentful_tag_kab"], "unique_id": "model.understood_analytics.stg_current_contentful_tag_kab", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/contentful/stg_current_contentful_tag_kab.sql", "original_file_path": "models/staging/contentful/stg_current_contentful_tag_kab.sql", "name": "stg_current_contentful_tag_kab", "alias": "stg_current_contentful_tag_kab", "checksum": {"name": "sha256", "checksum": "57c6e3a3f3b483073bf3a1a970cc536f22b8a9957555dc5032feb58f34847774"}, "tags": [], "refs": [], "sources": [["contentful", "article_tag"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/contentful/stg_current_contentful_tag_kab.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.695678, "compiled_sql": "with kab_current_raw as(\n    select *,\n      lower(regexp_replace(tag_name,'[^a-zA-Z0-9]+','_')) as tag_name_for_fields\n    from reporting_database.contentful.article_tag\n    where upper(tag_category_name) in (upper('kab intent'))\n      and is_current='TRUE'\n)\n\nselect * \nfrom kab_current_raw", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_current_contentful_tag_kab"}, "model.understood_analytics.stg_sp_pageview": {"raw_sql": "select \r\n      --ids\r\n      unique_pageview_id,\r\n      understood_id,\r\n      session_id,\r\n      application_id,\r\n      has_site_data,\r\n      has_wunder_data,\r\n      content_id as contentful_id,\r\n      \r\n\r\n      --timestamps\r\n      derived_timestamp,\r\n      etl_timestamp,\r\n      device_created_timestamp,\r\n\r\n      --dates\r\n      to_date(convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz))) as pageview_date_est,\r\n      to_time(convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz))) as pageview_time_est,\r\n      convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz)) as pageview_timestamp_est,\r\n\r\n      -- snowplow\r\n      sp_tracker_type,\r\n      sp_tracker_version,\r\n      sp_collector_version,\r\n      sp_etl_version,\r\n\r\n      --page info\r\n      is_initial_user_pageview,\r\n      user_pageview_order,\r\n      pageview_order,\r\n      is_initial_session_pageview,\r\n      is_latest_session_pageview,\r\n      pageping_count as page_pageping_count,\r\n      pageview_engagement_second,\r\n      page_url,\r\n      page_title,\r\n      page_scheme,\r\n      page_host,\r\n      page_port,\r\n      page_path,\r\n      page_path_language,\r\n      page_path_language_country,\r\n      page_path_first,\r\n      page_path_second,\r\n      page_path_third,\r\n      page_path_slug,\r\n      page_query,\r\n      page_encoding,\r\n      page_fragment,\r\n\r\n      --site info\r\n      external_content_id as site_external_content_id,\r\n      understood_model_name as site_model_name,\r\n      understood_model_version as site_model_version,\r\n      understood_site_language as site_language,\r\n      understood_site_section as site_section,\r\n      understood_unit_name as site_unit_name,\r\n      understood_unit_location as site_unit_location,\r\n      understood_program as site_program,\r\n      understood_channel as site_channel,\r\n      understood_topic as site_topic,\r\n      understood_subtopic as site_subtopic,\r\n\r\n      -- referrer info\r\n      referrer_url,\r\n      referrer_scheme,\r\n      referrer_host,\r\n      referrer_port,\r\n      referrer_path,\r\n      referrer_query,\r\n      referrer_fragment,\r\n      referrer_medium,\r\n      referrer_source,\r\n      referrer_keyword,\r\n\r\n      -- location\r\n      user_latitude as location_latitude,\r\n      user_longitude as location_longitude,\r\n      user_postalcode as location_postalcode,\r\n      user_city as location_city,\r\n      user_country as location_country,\r\n      user_region_code as location_region_code,\r\n      user_region_name as location_region_name,\r\n      user_timezone as location_timezone,\r\n      operating_system_timezone as location_os_timezone,\r\n\r\n      --device\r\n      browser_language as device_browser_language,\r\n      browser_language_country as device_browser_language_country,\r\n      browser_language_code as device_browser_language_code,\r\n      network_type as device_network_type,\r\n      device_class,\r\n      operating_system_class as device_operating_system_class,\r\n      phone_carrier,\r\n      agent_class,\r\n      device_brand,\r\n      device_family,\r\n      device_name,\r\n      device_version,\r\n      device_firmware_version,\r\n      device_cpu,\r\n      operating_system_family as device_operating_system_family,\r\n      operating_system_name as device_operating_system_name,\r\n      operating_system_version as device_operating_system_version,\r\n      layout_engine_name as device_layout_engine_name,\r\n      layout_engine_version as device_layout_engine_version,\r\n      useragent_name as device_useragent_name,\r\n      useragent_version as device_useragent_version,\r\n      webview_app_name as device_webview_app_name,\r\n      webview_app_version as device_webview_app_version,\r\n      apple_idfv as device_apple_idfv,\r\n\r\n      --marketing info\r\n      marketing_click_id,\r\n      marketing_medium,\r\n      marketing_source,\r\n      marketing_keyword,\r\n      marketing_content,\r\n      marketing_campaign,\r\n      marketing_network,\r\n\r\n      --engagement\r\n      case when pageview_engagement_second = 0 then true else false end as engagement_is_unengaged,\r\n      case\r\n          when ( page_horizontal_coverage_percent > 100 ) then 100\r\n          else page_horizontal_coverage_percent\r\n      end as engagement_x_percentage_scrolled,\r\n      case\r\n          when ( page_vertical_coverage_percent > 100 ) then 100\r\n          else page_vertical_coverage_percent\r\n      end as engagement_y_percentage_scrolled,\r\n      case\r\n            when marketing_campaign ilike '%take-note-fam-edu%'\r\n                    or marketing_campaign ilike '%take-note-fm-edu%'\r\n            then 'Take NOTE Families and Educators'\r\n            when marketing_campaign ilike '%take-note-oct-20-fm%'\r\n                    or marketing_campaign ilike '%take-note-sep20-fm%'\r\n                    or marketing_campaign ilike '%takenote-sep20-fm%'\r\n                    or marketing_campaign = 'take-n'\r\n                    or marketing_campaign ilike '%take-note-aug-social%'\r\n                    or marketing_campaign = 'take-note-sep20'\r\n                    or marketing_campaign ilike '%take-note-fam%'\r\n                    or marketing_campaign ilike '%take-note-fm%'\r\n                    or marketing_campaign ilike '%take-note-y2-awareness-survey-pre-launch-july21-fm%'\r\n            then 'Take NOTE Families'\r\n            when marketing_campaign ilike '%take-note-edu%'\r\n                    or marketing_campaign ilike '%take-note-y2---edu%'\r\n                    or marketing_campaign ilike '%take-note-y2 - edu%'\r\n                    or marketing_campaign ilike '%Take Note Year 2 -Educators%'\r\n                    or marketing_campaign ilike '%Take Note Year 2 - Educators%'\r\n                    or marketing_campaign ilike '%Take Note Year 2 - Teachers%'\r\n                    or marketing_campaign ilike '%take note educators%'\r\n                    or marketing_campaign ilike '%take note year 2- educators%'\r\n            then 'Take NOTE Educators'\r\n            when marketing_campaign ilike '%sermo unit%'\r\n                    or marketing_campaign ilike '%poll unit%'\r\n                    or marketing_campaign ilike '%take-note-ped%'\r\n                    or marketing_campaign ilike '%ped%'\r\n                    or marketing_campaign ilike '%take-note-y2---ped%'\r\n                    or marketing_campaign ilike '%take-note-y2 - ped%'\r\n                    or marketing_campaign ilike '%take note year 2 - ped%'\r\n                    or marketing_campaign ilike '%take note year 2 -ped%'\r\n            then 'Take NOTE Pediatricians'\r\n            else 'All Other'\r\n        end as take_note_campaign\r\nfrom {{ source('snowplow', 'pageview') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.understood_analytics.snowplow.pageview"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "snowplow", "stg_sp_pageview"], "unique_id": "model.understood_analytics.stg_sp_pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/snowplow/stg_sp_pageview.sql", "original_file_path": "models/staging/snowplow/stg_sp_pageview.sql", "name": "stg_sp_pageview", "alias": "stg_sp_pageview", "checksum": {"name": "sha256", "checksum": "103059a9680f8bd847ea947ccde92be9125f0519005b5bef2514a0faac85a609"}, "tags": [], "refs": [], "sources": [["snowplow", "pageview"]], "description": "Snowplow pageview", "columns": {"unique_pageview_id": {"name": "unique_pageview_id", "description": "Unique id for pageviews.  Primary key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/staging/snowplow/stg_sp.yml", "compiled_path": "target/compiled/understood_analytics/models/staging/snowplow/stg_sp_pageview.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3439953, "compiled_sql": "select \n      --ids\n      unique_pageview_id,\n      understood_id,\n      session_id,\n      application_id,\n      has_site_data,\n      has_wunder_data,\n      content_id as contentful_id,\n      \n\n      --timestamps\n      derived_timestamp,\n      etl_timestamp,\n      device_created_timestamp,\n\n      --dates\n      to_date(convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz))) as pageview_date_est,\n      to_time(convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz))) as pageview_time_est,\n      convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz)) as pageview_timestamp_est,\n\n      -- snowplow\n      sp_tracker_type,\n      sp_tracker_version,\n      sp_collector_version,\n      sp_etl_version,\n\n      --page info\n      is_initial_user_pageview,\n      user_pageview_order,\n      pageview_order,\n      is_initial_session_pageview,\n      is_latest_session_pageview,\n      pageping_count as page_pageping_count,\n      pageview_engagement_second,\n      page_url,\n      page_title,\n      page_scheme,\n      page_host,\n      page_port,\n      page_path,\n      page_path_language,\n      page_path_language_country,\n      page_path_first,\n      page_path_second,\n      page_path_third,\n      page_path_slug,\n      page_query,\n      page_encoding,\n      page_fragment,\n\n      --site info\n      external_content_id as site_external_content_id,\n      understood_model_name as site_model_name,\n      understood_model_version as site_model_version,\n      understood_site_language as site_language,\n      understood_site_section as site_section,\n      understood_unit_name as site_unit_name,\n      understood_unit_location as site_unit_location,\n      understood_program as site_program,\n      understood_channel as site_channel,\n      understood_topic as site_topic,\n      understood_subtopic as site_subtopic,\n\n      -- referrer info\n      referrer_url,\n      referrer_scheme,\n      referrer_host,\n      referrer_port,\n      referrer_path,\n      referrer_query,\n      referrer_fragment,\n      referrer_medium,\n      referrer_source,\n      referrer_keyword,\n\n      -- location\n      user_latitude as location_latitude,\n      user_longitude as location_longitude,\n      user_postalcode as location_postalcode,\n      user_city as location_city,\n      user_country as location_country,\n      user_region_code as location_region_code,\n      user_region_name as location_region_name,\n      user_timezone as location_timezone,\n      operating_system_timezone as location_os_timezone,\n\n      --device\n      browser_language as device_browser_language,\n      browser_language_country as device_browser_language_country,\n      browser_language_code as device_browser_language_code,\n      network_type as device_network_type,\n      device_class,\n      operating_system_class as device_operating_system_class,\n      phone_carrier,\n      agent_class,\n      device_brand,\n      device_family,\n      device_name,\n      device_version,\n      device_firmware_version,\n      device_cpu,\n      operating_system_family as device_operating_system_family,\n      operating_system_name as device_operating_system_name,\n      operating_system_version as device_operating_system_version,\n      layout_engine_name as device_layout_engine_name,\n      layout_engine_version as device_layout_engine_version,\n      useragent_name as device_useragent_name,\n      useragent_version as device_useragent_version,\n      webview_app_name as device_webview_app_name,\n      webview_app_version as device_webview_app_version,\n      apple_idfv as device_apple_idfv,\n\n      --marketing info\n      marketing_click_id,\n      marketing_medium,\n      marketing_source,\n      marketing_keyword,\n      marketing_content,\n      marketing_campaign,\n      marketing_network,\n\n      --engagement\n      case when pageview_engagement_second = 0 then true else false end as engagement_is_unengaged,\n      case\n          when ( page_horizontal_coverage_percent > 100 ) then 100\n          else page_horizontal_coverage_percent\n      end as engagement_x_percentage_scrolled,\n      case\n          when ( page_vertical_coverage_percent > 100 ) then 100\n          else page_vertical_coverage_percent\n      end as engagement_y_percentage_scrolled,\n      case\n            when marketing_campaign ilike '%take-note-fam-edu%'\n                    or marketing_campaign ilike '%take-note-fm-edu%'\n            then 'Take NOTE Families and Educators'\n            when marketing_campaign ilike '%take-note-oct-20-fm%'\n                    or marketing_campaign ilike '%take-note-sep20-fm%'\n                    or marketing_campaign ilike '%takenote-sep20-fm%'\n                    or marketing_campaign = 'take-n'\n                    or marketing_campaign ilike '%take-note-aug-social%'\n                    or marketing_campaign = 'take-note-sep20'\n                    or marketing_campaign ilike '%take-note-fam%'\n                    or marketing_campaign ilike '%take-note-fm%'\n                    or marketing_campaign ilike '%take-note-y2-awareness-survey-pre-launch-july21-fm%'\n            then 'Take NOTE Families'\n            when marketing_campaign ilike '%take-note-edu%'\n                    or marketing_campaign ilike '%take-note-y2---edu%'\n                    or marketing_campaign ilike '%take-note-y2 - edu%'\n                    or marketing_campaign ilike '%Take Note Year 2 -Educators%'\n                    or marketing_campaign ilike '%Take Note Year 2 - Educators%'\n                    or marketing_campaign ilike '%Take Note Year 2 - Teachers%'\n                    or marketing_campaign ilike '%take note educators%'\n                    or marketing_campaign ilike '%take note year 2- educators%'\n            then 'Take NOTE Educators'\n            when marketing_campaign ilike '%sermo unit%'\n                    or marketing_campaign ilike '%poll unit%'\n                    or marketing_campaign ilike '%take-note-ped%'\n                    or marketing_campaign ilike '%ped%'\n                    or marketing_campaign ilike '%take-note-y2---ped%'\n                    or marketing_campaign ilike '%take-note-y2 - ped%'\n                    or marketing_campaign ilike '%take note year 2 - ped%'\n                    or marketing_campaign ilike '%take note year 2 -ped%'\n            then 'Take NOTE Pediatricians'\n            else 'All Other'\n        end as take_note_campaign\nfrom reporting_database.snowplow_data_model.pageview", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_sp_pageview"}, "model.understood_analytics.stg_sp_session": {"raw_sql": "with stg_session as (\r\nselect\r\n  *,\r\n  case\r\n    when marketing_medium_initial is null then referrer_medium_initial\r\n    else marketing_medium_initial \r\n  end as marketing_and_referrer_medium_combined\r\nfrom {{ source('snowplow', 'session') }}\r\n)\r\n\r\nselect \r\n\r\n--ids\r\n  session_id,\r\n  understood_id,\r\n  content_id_initial,\r\n  content_id_latest,\r\n  application_id_initial,\r\n  has_site_data,\r\n  has_wunder_data,\r\n\r\n--timestamps\r\n  session_derived_timestamp_start,\r\n  session_etl_timestamp_start,\r\n\r\n--dates\r\n  to_date(convert_timezone('UTC', 'America/New_York', cast(session_derived_timestamp_start as timestamp_ntz))) as session_date_est,\r\n  to_time(convert_timezone('UTC', 'America/New_York', cast(session_derived_timestamp_start as timestamp_ntz))) as session_time_est,\r\n  convert_timezone('UTC', 'America/New_York', cast(session_derived_timestamp_start as timestamp_ntz)) as session_timestamp_est,\r\n\r\n  platform_type_initial,\r\n  had_subscribe_newsletter,\r\n  had_signup,\r\n  is_logged_in,\r\n  is_user_initial_session,\r\n\r\n-- page info\r\n  page_path_initial,\r\n  page_path_first_initial,\r\n  page_path_second_initial,\r\n  page_path_third_initial,\r\n  page_path_slug_initial,\r\n\r\n  page_path_latest,\r\n  page_path_first_latest,\r\n  page_path_second_latest,\r\n  page_path_third_latest,\r\n  page_path_slug_latest,\r\n\r\n-- site\r\n  site_context_site_section_initial,\r\n  site_context_language_initial,\r\n  site_context_site_section_latest,\r\n  site_context_language_latest,\r\n\r\n-- referrer\r\n  referrer_url_initial,\r\n  referrer_scheme_initial,\r\n  referrer_host_initial,\r\n  referrer_port_initial,\r\n  referrer_path_initial,\r\n  referrer_query_initial,\r\n  referrer_fragment_initial,\r\n  referrer_medium_initial,\r\n  referrer_source_initial,\r\n  referrer_keyword_initial,\r\n\r\n--marketing\r\n  marketing_click_id_initial,\r\n  marketing_medium_initial,\r\n  marketing_source_initial,\r\n  marketing_keyword_initial,\r\n  marketing_content_initial,\r\n  marketing_campaign_initial,\r\n  marketing_network_initial,\r\n\r\n  marketing_and_referrer_medium_combined,\r\n  case\r\n    when marketing_and_referrer_medium_combined ilike 'cpc' THEN 'paid marketing'\r\n    when marketing_and_referrer_medium_combined ilike '%paid%' THEN 'paid marketing'\r\n    when marketing_and_referrer_medium_combined ilike '%social%' THEN 'organic marketing'\r\n    when marketing_and_referrer_medium_combined ilike '%organic%' THEN 'organic marketing'\r\n    when marketing_and_referrer_medium_combined ilike 'search' THEN 'organic search'\r\n    when marketing_and_referrer_medium_combined ilike '%unknown%' THEN 'direct/unknown'\r\n    when marketing_and_referrer_medium_combined ilike '%email%' THEN 'email'\r\n    when marketing_and_referrer_medium_combined is NULL THEN 'direct/unknown'\r\n    else marketing_and_referrer_medium_combined\r\n  end as traffic_medium,\r\n\r\n--engagement\r\n  session_engagement_second as engagement_second,\r\n  case when session_engagement_second = 0 then true else false end as engagement_is_unengaged,\r\n  is_bounce_session as engagement_is_bounce_session,\r\n  pageview_count as engagement_pageview_count,\r\n  pagepath_unique_count as engagement_pagepath_unique_count\r\n\r\nfrom stg_session", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.understood_analytics.snowplow.session"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "snowplow", "stg_sp_session"], "unique_id": "model.understood_analytics.stg_sp_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/snowplow/stg_sp_session.sql", "original_file_path": "models/staging/snowplow/stg_sp_session.sql", "name": "stg_sp_session", "alias": "stg_sp_session", "checksum": {"name": "sha256", "checksum": "687edb6a0be0d4192fb0ef0b21c55e4db03a76511f28ef0bb8acf75ab7b24f90"}, "tags": [], "refs": [], "sources": [["snowplow", "session"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/snowplow/stg_sp_session.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426523.700039, "compiled_sql": "with stg_session as (\nselect\n  *,\n  case\n    when marketing_medium_initial is null then referrer_medium_initial\n    else marketing_medium_initial \n  end as marketing_and_referrer_medium_combined\nfrom reporting_database.snowplow_data_model.session\n)\n\nselect \n\n--ids\n  session_id,\n  understood_id,\n  content_id_initial,\n  content_id_latest,\n  application_id_initial,\n  has_site_data,\n  has_wunder_data,\n\n--timestamps\n  session_derived_timestamp_start,\n  session_etl_timestamp_start,\n\n--dates\n  to_date(convert_timezone('UTC', 'America/New_York', cast(session_derived_timestamp_start as timestamp_ntz))) as session_date_est,\n  to_time(convert_timezone('UTC', 'America/New_York', cast(session_derived_timestamp_start as timestamp_ntz))) as session_time_est,\n  convert_timezone('UTC', 'America/New_York', cast(session_derived_timestamp_start as timestamp_ntz)) as session_timestamp_est,\n\n  platform_type_initial,\n  had_subscribe_newsletter,\n  had_signup,\n  is_logged_in,\n  is_user_initial_session,\n\n-- page info\n  page_path_initial,\n  page_path_first_initial,\n  page_path_second_initial,\n  page_path_third_initial,\n  page_path_slug_initial,\n\n  page_path_latest,\n  page_path_first_latest,\n  page_path_second_latest,\n  page_path_third_latest,\n  page_path_slug_latest,\n\n-- site\n  site_context_site_section_initial,\n  site_context_language_initial,\n  site_context_site_section_latest,\n  site_context_language_latest,\n\n-- referrer\n  referrer_url_initial,\n  referrer_scheme_initial,\n  referrer_host_initial,\n  referrer_port_initial,\n  referrer_path_initial,\n  referrer_query_initial,\n  referrer_fragment_initial,\n  referrer_medium_initial,\n  referrer_source_initial,\n  referrer_keyword_initial,\n\n--marketing\n  marketing_click_id_initial,\n  marketing_medium_initial,\n  marketing_source_initial,\n  marketing_keyword_initial,\n  marketing_content_initial,\n  marketing_campaign_initial,\n  marketing_network_initial,\n\n  marketing_and_referrer_medium_combined,\n  case\n    when marketing_and_referrer_medium_combined ilike 'cpc' THEN 'paid marketing'\n    when marketing_and_referrer_medium_combined ilike '%paid%' THEN 'paid marketing'\n    when marketing_and_referrer_medium_combined ilike '%social%' THEN 'organic marketing'\n    when marketing_and_referrer_medium_combined ilike '%organic%' THEN 'organic marketing'\n    when marketing_and_referrer_medium_combined ilike 'search' THEN 'organic search'\n    when marketing_and_referrer_medium_combined ilike '%unknown%' THEN 'direct/unknown'\n    when marketing_and_referrer_medium_combined ilike '%email%' THEN 'email'\n    when marketing_and_referrer_medium_combined is NULL THEN 'direct/unknown'\n    else marketing_and_referrer_medium_combined\n  end as traffic_medium,\n\n--engagement\n  session_engagement_second as engagement_second,\n  case when session_engagement_second = 0 then true else false end as engagement_is_unengaged,\n  is_bounce_session as engagement_is_bounce_session,\n  pageview_count as engagement_pageview_count,\n  pagepath_unique_count as engagement_pagepath_unique_count\n\nfrom stg_session", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_sp_session"}, "model.understood_analytics.stg_sp_events": {"raw_sql": "select\r\n    --ids\r\n    unique_event_id,\r\n    understood_id,\r\n    session_id,\r\n    application_id,\r\n    unique_pageview_id,\r\n    has_site_data,\r\n    has_wunder_data,\r\n    content_id as contentful_id,\r\n\r\n    --timestamps\r\n    derived_timestamp,\r\n    etl_timestamp,\r\n    device_created_timestamp,\r\n    --dates\r\n    to_date(convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz))) as event_date_est,\r\n    to_time(convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz))) as event_time_est,\r\n    convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz)) as event_timestamp_est,\r\n    -- snowplow\r\n    sp_tracker_type,\r\n    sp_tracker_version,\r\n    sp_collector_version,\r\n    sp_etl_version,\r\n    --data\r\n    understood_site_section as site_section,\r\n    case when SPLIT_PART(understood_unit_name , '_', 1) ='carousel' then 'carousel' \r\n    when SPLIT_PART(understood_unit_name , ':', 1) ='contributor_spotlight' then 'contributor_spotlight'\r\n    when SPLIT_PART(understood_unit_name , ':', 1) ='contributor_spotlight_card' then 'contributor_spotlight_card'\r\n    when SPLIT_PART(understood_unit_name , ':', 1) ='author_card' then 'author_card'\r\n    when SPLIT_PART(understood_unit_name , ':', 1) ='social_modal' then 'social_modal'\r\n    else understood_unit_name  end as unit_name,\r\n    understood_unit_location as unit_location,\r\n    navigation_is_content as is_content,\r\n    navigation_is_external as is_external,\r\n    navigation_article_id as article_id,\r\n    navigation_article_url as article_url,\r\n    json_extract_path_text(custom_context_json, 'platform') as platform,\r\n    understood_position_in_unit as position_in_unit,\r\n    custom_context_json as json,\r\n    event_name,\r\n    event_type,\r\n    json_extract_path_text(custom_context_json, 'helpful') as helpful,\r\n    json_extract_path_text(custom_context_json, 'program') as program,\r\n    navigation_button_name as button_name,\r\n    json_extract_path_text(custom_context_json, 'button_type') as button_type,\r\n    engagement_submitted_text as submitted_text,\r\n    engagement_download_title as download_title,\r\n    json_extract_path_text(custom_context_json, 'submit_success') as submit_success,\r\n    json_extract_path_text(custom_context_json, 'video_id') as video_id,\r\n    json_extract_path_text(custom_context_json, 'interval') as interval,\r\n    json_extract_path_text(custom_context_json, 'percent_completed') as percent_completed,\r\n    json_extract_path_text(custom_context_json, 'audience') as audience,\r\n    engagement_submitted_list as submitted_list,\r\n    case when engagement_submitted_list[0] IN ('[null]') then 0 \r\n    else array_size(STRTOK_TO_ARRAY(engagement_submitted_list[0], ', []')) end as submitted_list_size,\r\n    json_extract_path_text(custom_context_json, 'linked_content_id') as linked_content_id,\r\n    json_extract_path_text(custom_context_json, 'linked_content_url') as linked_content_url,\r\n    signup_postalcode,\r\n    account_submit_success,\r\n    account_signup_type\r\nfrom {{ source('snowplow', 'site_interaction') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.understood_analytics.snowplow.site_interaction"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core", "fqn": ["understood_analytics", "staging", "snowplow", "stg_sp_events"], "unique_id": "model.understood_analytics.stg_sp_events", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "staging/snowplow/stg_sp_events.sql", "original_file_path": "models/staging/snowplow/stg_sp_events.sql", "name": "stg_sp_events", "alias": "stg_sp_events", "checksum": {"name": "sha256", "checksum": "2a1f90732a4fbd723cc42cd7b1e9b30936e578a791148f76adff7d8e758b74c9"}, "tags": [], "refs": [], "sources": [["snowplow", "site_interaction"]], "description": "Snowplow events from the site_interaction table", "columns": {"unique_event_id": {"name": "unique_event_id", "description": "Unique id for account events.  Primary key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "understood_analytics://models/staging/snowplow/stg_sp.yml", "compiled_path": "target/compiled/understood_analytics/models/staging/snowplow/stg_sp_events.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3301365, "compiled_sql": "select\n    --ids\n    unique_event_id,\n    understood_id,\n    session_id,\n    application_id,\n    unique_pageview_id,\n    has_site_data,\n    has_wunder_data,\n    content_id as contentful_id,\n\n    --timestamps\n    derived_timestamp,\n    etl_timestamp,\n    device_created_timestamp,\n    --dates\n    to_date(convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz))) as event_date_est,\n    to_time(convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz))) as event_time_est,\n    convert_timezone('UTC', 'America/New_York', cast(derived_timestamp as timestamp_ntz)) as event_timestamp_est,\n    -- snowplow\n    sp_tracker_type,\n    sp_tracker_version,\n    sp_collector_version,\n    sp_etl_version,\n    --data\n    understood_site_section as site_section,\n    case when SPLIT_PART(understood_unit_name , '_', 1) ='carousel' then 'carousel' \n    when SPLIT_PART(understood_unit_name , ':', 1) ='contributor_spotlight' then 'contributor_spotlight'\n    when SPLIT_PART(understood_unit_name , ':', 1) ='contributor_spotlight_card' then 'contributor_spotlight_card'\n    when SPLIT_PART(understood_unit_name , ':', 1) ='author_card' then 'author_card'\n    when SPLIT_PART(understood_unit_name , ':', 1) ='social_modal' then 'social_modal'\n    else understood_unit_name  end as unit_name,\n    understood_unit_location as unit_location,\n    navigation_is_content as is_content,\n    navigation_is_external as is_external,\n    navigation_article_id as article_id,\n    navigation_article_url as article_url,\n    json_extract_path_text(custom_context_json, 'platform') as platform,\n    understood_position_in_unit as position_in_unit,\n    custom_context_json as json,\n    event_name,\n    event_type,\n    json_extract_path_text(custom_context_json, 'helpful') as helpful,\n    json_extract_path_text(custom_context_json, 'program') as program,\n    navigation_button_name as button_name,\n    json_extract_path_text(custom_context_json, 'button_type') as button_type,\n    engagement_submitted_text as submitted_text,\n    engagement_download_title as download_title,\n    json_extract_path_text(custom_context_json, 'submit_success') as submit_success,\n    json_extract_path_text(custom_context_json, 'video_id') as video_id,\n    json_extract_path_text(custom_context_json, 'interval') as interval,\n    json_extract_path_text(custom_context_json, 'percent_completed') as percent_completed,\n    json_extract_path_text(custom_context_json, 'audience') as audience,\n    engagement_submitted_list as submitted_list,\n    case when engagement_submitted_list[0] IN ('[null]') then 0 \n    else array_size(STRTOK_TO_ARRAY(engagement_submitted_list[0], ', []')) end as submitted_list_size,\n    json_extract_path_text(custom_context_json, 'linked_content_id') as linked_content_id,\n    json_extract_path_text(custom_context_json, 'linked_content_url') as linked_content_url,\n    signup_postalcode,\n    account_submit_success,\n    account_signup_type\nfrom reporting_database.snowplow_data_model.site_interaction", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "analytic_layer_prod.core.stg_sp_events"}, "model.dbt_artifacts.fct_dbt__critical_path": {"raw_sql": "with models as (\n\n    select *\n    from {{ ref('stg_dbt__models') }}\n\n),\n\nlatest_executions as (\n\n    select *\n    from {{ ref('fct_dbt__latest_full_model_executions') }}\n\n),\n\nlatest_id as (\n    -- Find the latest full, incremental execution\n\n    select\n        any_value(command_invocation_id) as command_invocation_id,\n        any_value(dbt_cloud_run_id) as dbt_cloud_run_id\n    from latest_executions\n\n),\n\nlatest_models as (\n    -- Get the latest set of models for the above execution\n\n    select\n        models.node_id,\n        models.depends_on_nodes,\n        models.model_materialization\n    from latest_id\n    left join models on\n        latest_id.command_invocation_id = models.command_invocation_id\n        or latest_id.dbt_cloud_run_id = models.dbt_cloud_run_id\n\n\n),\n\nnode_dependencies as (\n    -- Create a row for each model and dependency (could be another model, or source)\n\n    select\n        latest_models.node_id,\n        node.value::string as depends_on_node_id,\n        regexp_substr(node.value::string, '^([a-z]+)') as depends_on_node_type\n    from latest_models,\n    lateral flatten(input => latest_models.depends_on_nodes) as node\n\n),\n\nnode_dependencies_deduped as (\n    -- depends_on_nodes is simply a list of all the ref() statements used in a model, so it may contain duplicates\n\n    select distinct\n        node_id,\n        depends_on_node_type,\n        depends_on_node_id\n    from node_dependencies\n\n),\n\nmodel_dependencies_with_total_node_runtime as (\n    -- Model dependencies enriched with execution time\n\n    select distinct\n        node_dependencies_deduped.node_id,\n        latest_executions.total_node_runtime,\n        depends_on_node_id\n    from node_dependencies_deduped\n    left join latest_executions on node_dependencies_deduped.node_id = latest_executions.node_id\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_at_least_one_model_dependency as (\n    -- Return a list of model nodes which have at least one model dependency\n\n    select distinct\n        node_id\n    from node_dependencies\n    where depends_on_node_type = 'model'\n\n),\n\nmodels_with_no_model_dependencies_with_total_node_runtime as (\n    -- Models which have no dependencies enriched with execution time\n    -- These are models at the base of the tree\n\n    select\n        latest_models.node_id,\n        latest_executions.total_node_runtime\n    from latest_models\n    left join models_with_at_least_one_model_dependency\n        on latest_models.node_id = models_with_at_least_one_model_dependency.node_id\n    left join latest_executions on latest_models.node_id = latest_executions.node_id\n    where models_with_at_least_one_model_dependency.node_id is null\n\n),\n\nmodels_with_dependent_models as (\n    -- Get a list of all the models which have dependent models\n\n    select distinct depends_on_node_id as node_id\n    from node_dependencies_deduped\n\n),\n\nmodels_with_no_dependent_models as (\n    -- Models which have no dependents\n    -- These are models at the tips of the tree\n\n    select\n        latest_models.node_id\n    from latest_models\n    left join models_with_dependent_models\n    on latest_models.node_id = models_with_dependent_models.node_id\n    where models_with_dependent_models.node_id is null\n\n),\n\nanchor as (\n    -- The anchor of a recursive CTE is the initial query\n    -- The anchor in this case is models which have no dependents, the tips of the tree\n    -- The dependencies for these models are joined in to build out the paths during recursion\n\n    select\n        models_with_no_dependent_models.node_id,\n        coalesce(node_dependencies_deduped.depends_on_node_id, '') as depends_on_node_id,\n        coalesce(latest_executions.total_node_runtime, 0) as total_node_runtime\n    from models_with_no_dependent_models\n    left join node_dependencies_deduped on models_with_no_dependent_models.node_id = node_dependencies_deduped.node_id\n    left join latest_executions on models_with_no_dependent_models.node_id = latest_executions.node_id\n\n),\n\nall_needed_dependencies as (\n    -- Union all the base models with all other dependencies\n    -- Use an empty string for depends_on_node_id to avoid NULL result in a non-nullable column error\n    -- Nothing will join onto the empty string depends_on_node_id, ending the recursion at the base.\n\n    select\n        node_id,\n        total_node_runtime,\n        '' as depends_on_node_id\n    from models_with_no_model_dependencies_with_total_node_runtime\n    union\n    select\n        node_id,\n        total_node_runtime,\n        depends_on_node_id as depends_on_node_id\n    from model_dependencies_with_total_node_runtime\n\n),\n\nsearch_path (node_ids, total_time) as (\n    -- The recursive part\n    -- This CTE creates an array of node_ids and total_time for every possible path through the DAG\n    -- Starting with the tips of the tree, work backwards through every path until there's a '' depends_on_node_id\n\n    select\n        array_construct(depends_on_node_id, node_id),\n        total_node_runtime\n    from anchor\n    union all\n    select\n        array_cat(to_array(all_needed_dependencies.depends_on_node_id), search_path.node_ids) as node_ids,\n        coalesce(all_needed_dependencies.total_node_runtime, 0) + search_path.total_time\n    from search_path\n    left join all_needed_dependencies\n    where get(search_path.node_ids, 0) = all_needed_dependencies.node_id\n\n),\n\nlongest_path_node_ids as (\n    -- Find the path with the longest total time\n\n    select\n        -- Remove any empty strings from the beginning of the array that were introduced in search_path to prevent infinite recursion\n        case\n            when get(node_ids, 0) = ''\n            -- Ensure we keep the last element of the array by using array_size for the last index\n            then array_slice(node_ids, 1, array_size(node_ids))\n            else node_ids\n        end as node_ids,\n        total_time\n    from search_path\n    order by total_time desc\n    limit 1\n\n),\n\nflattened as (\n    -- Flatten the array of node_ids and keep the index\n\n    select\n        value as node_id,\n        index\n    from longest_path_node_ids,\n    lateral flatten (input => node_ids)\n\n),\n\nlongest_path_with_times as (\n    -- Join the indidivual model execution times back in along with the materializations\n\n    select\n        flattened.node_id::string as node_id,\n        flattened.index,\n        latest_executions.total_node_runtime/60 as execution_minutes,\n        latest_models.model_materialization\n    from flattened\n    left join latest_executions on flattened.node_id = latest_executions.node_id\n    left join latest_models on flattened.node_id = latest_models.node_id\n\n)\n\nselect * from longest_path_with_times", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.fct_dbt__latest_full_model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "fct_dbt__critical_path"], "unique_id": "model.dbt_artifacts.fct_dbt__critical_path", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "fct_dbt__critical_path.sql", "original_file_path": "models/fct_dbt__critical_path.sql", "name": "fct_dbt__critical_path", "alias": "fct_dbt__critical_path", "checksum": {"name": "sha256", "checksum": "4651234d16aacc6e392f9523229c2669af97ad61e0e46b80bed83fd2d480228c"}, "tags": [], "refs": [["stg_dbt__models"], ["fct_dbt__latest_full_model_executions"]], "sources": [], "description": "A table of models and executions times that make up the critical path of a full, incremental run.", "columns": {"node_id": {"name": "node_id", "description": "Primary key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index": {"name": "index", "description": "The index of the model in the critical path. Starts at 0.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_minutes": {"name": "execution_minutes", "description": "The duration of time in minutes for the model to run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426525.389074}, "model.dbt_artifacts.fct_dbt__latest_full_model_executions": {"raw_sql": "with run_results as (\n\n    select *\n    from {{ ref('fct_dbt__run_results') }}\n\n),\n\nmodel_executions as (\n\n    select *\n    from {{ ref('fct_dbt__model_executions') }}\n\n),\n\nlatest_full as (\n\n    select *\n    from run_results\n    where selected_models is null and was_full_refresh = false\n    order by artifact_generated_at desc\n    limit 1\n\n),\n\njoined as (\n\n    select\n        model_executions.*\n    from latest_full\n    left join model_executions on\n        model_executions.command_invocation_id = latest_full.command_invocation_id\n        or model_executions.dbt_cloud_run_id = latest_full.dbt_cloud_run_id\n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        model_execution_id,\n        model_materialization,\n        model_schema,\n        name,\n        node_id,\n        thread_id,\n        rows_affected,\n        status,\n        was_full_refresh\n    from joined\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.fct_dbt__run_results", "model.dbt_artifacts.fct_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "fct_dbt__latest_full_model_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__latest_full_model_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "fct_dbt__latest_full_model_executions.sql", "original_file_path": "models/fct_dbt__latest_full_model_executions.sql", "name": "fct_dbt__latest_full_model_executions", "alias": "fct_dbt__latest_full_model_executions", "checksum": {"name": "sha256", "checksum": "1db7cc8b413fc690d2f4fb6f692ed836551f4288c2fbc454ec7c710d3d6f864e"}, "tags": [], "refs": [["fct_dbt__run_results"], ["fct_dbt__model_executions"]], "sources": [], "description": "A list of all models and executions times from the most recent, incremental run.", "columns": {"node_id": {"name": "node_id", "description": "Primary key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "Foreign key to fct_dbt_run_results. The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp of when a model starts to be compiled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp of when a model's SQL is completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "The duration of time in seconds for the model to run. Note that this is _not_ equal to the delta between `compile_started_at` and `query_completed_at` since it includes extra tasks performed by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_execution_id": {"name": "model_execution_id", "description": "A surrogate key of command_invocation_id and node_id.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_schema": {"name": "model_schema", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The model name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "The number of rows affected by the model's execution. Always 1 for non-incremental executions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Success/fail status of the model's execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean value for whether this model was executed with a --full-refresh flag.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426525.4032695}, "model.dbt_artifacts.fct_dbt__exposures_updates": {"raw_sql": "with model_executions as (\n\n    select * from {{ ref('fct_dbt__model_executions') }}\n\n),\n\nexposures_record as (\n\n    select * from {{ ref('dim_dbt__exposures') }}\n\n),\n\n\nmodel_updates as (\n\n    select \n        max(query_completed_at) as latest_update,\n        node_id\n    from model_executions\n    group by node_id\n\n),\n\nexposures_latest as (\n\n    select\n        artifact_generated_at as latest_generation,\n        node_id,\n        name,\n        type,\n        owner,\n        maturity,\n        package_name,\n        output_feeds\n    from exposures_record\n    where artifact_generated_at = (select max(artifact_generated_at) from exposures_record)\n\n),\n\nexposures_updates as (\n\n    select \n        e.latest_generation,\n        e.node_id,\n        e.name, \n        e.type,\n        e.owner,\n        e.maturity,\n        e.package_name,\n        e.output_feeds,\n        latest_update as feed_latest_update\n    from exposures_latest e\n    left join model_updates m\n      on m.node_id = e.output_feeds\n\n)\n\nselect * from exposures_updates", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.fct_dbt__model_executions", "model.dbt_artifacts.dim_dbt__exposures"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "fct_dbt__exposures_updates"], "unique_id": "model.dbt_artifacts.fct_dbt__exposures_updates", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "fct_dbt__exposures_updates.sql", "original_file_path": "models/fct_dbt__exposures_updates.sql", "name": "fct_dbt__exposures_updates", "alias": "fct_dbt__exposures_updates", "checksum": {"name": "sha256", "checksum": "4576e81b8cbe4aed9e61109289fd3a38543a61c05db20c8b9cb78696d56628c6"}, "tags": [], "refs": [["fct_dbt__model_executions"], ["dim_dbt__exposures"]], "sources": [], "description": "A table of exposures and models feeding them. Latest update time for each models is provided.", "columns": {"latest_generation": {"name": "latest_generation", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of exposure.[package_name].[exposure_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User-defined name of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "User-defined type of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "User-defined owner of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "User-defined name of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Source package in which each feed of an exposure was defined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_feeds": {"name": "output_feeds", "description": "Unique id for each feed of an exposure, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feed_latest_update": {"name": "feed_latest_update", "description": "Timestamp of the latest update of each feed of an exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426525.3950224}, "model.dbt_artifacts.fct_dbt__model_executions": {"raw_sql": "{{ config( materialized='incremental', unique_key='model_execution_id' ) }}\n\nwith models as (\n\n    select *\n    from {{ ref('dim_dbt__models') }}\n\n),\n\nmodel_executions as (\n\n    select *\n    from {{ ref('int_dbt__model_executions') }}\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nmodel_executions_with_materialization as (\n\n    select\n        model_executions_incremental.*,\n        models.model_materialization,\n        models.model_schema,\n        models.name\n    from model_executions_incremental\n    left join models on\n        (\n            model_executions_incremental.command_invocation_id = models.command_invocation_id\n            or model_executions_incremental.dbt_cloud_run_id = models.dbt_cloud_run_id\n        )\n        and model_executions_incremental.node_id = models.node_id\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected,\n        model_materialization,\n        model_schema,\n        name\n    from model_executions_with_materialization\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_artifacts.dim_dbt__models", "model.dbt_artifacts.int_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "model_execution_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "fct_dbt__model_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__model_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "incremental/fct_dbt__model_executions.sql", "original_file_path": "models/incremental/fct_dbt__model_executions.sql", "name": "fct_dbt__model_executions", "alias": "fct_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "77e952e7773cd4b0ff5effb8a03d6181a24fcd4ba13c50d4837505215a5717e2"}, "tags": [], "refs": [["dim_dbt__models"], ["int_dbt__model_executions"]], "sources": [], "description": "All historic dbt model executions.", "columns": {"model_execution_id": {"name": "model_execution_id", "description": "Primary key.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_schema": {"name": "model_schema", "description": "The schema containing the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Boolean value for whether this model was executed with a --full-refresh flag.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "The configured materialization of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "Timestamp of when a model starts to be compiled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "query_completed_at": {"name": "query_completed_at", "description": "Timestamp of when a model's SQL is completed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_node_runtime": {"name": "total_node_runtime", "description": "The duration of time in seconds for the model to run. Note that this is _not_ equal to the delta between `compile_started_at` and `query_completed_at` since it includes extra tasks performed by dbt.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Success/fail status of the model's execution.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "Foreign key to fct_dbt_run_results. The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "The number of rows affected by the model's execution. Always 1 for non-incremental executions.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "model_execution_id", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426525.4105513}, "model.dbt_artifacts.int_dbt__model_executions": {"raw_sql": "{{ config( materialized='incremental', unique_key='model_execution_id' ) }}\n\nwith model_executions as (\n\n    select *\n    from {{ ref('stg_dbt__model_executions') }}\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_artifacts.stg_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "model_execution_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "int_dbt__model_executions"], "unique_id": "model.dbt_artifacts.int_dbt__model_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "incremental/int_dbt__model_executions.sql", "original_file_path": "models/incremental/int_dbt__model_executions.sql", "name": "int_dbt__model_executions", "alias": "int_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "c07703978fe740876c6b9d545a3c438171c7377ec307571a290d73d73306cbab"}, "tags": [], "refs": [["stg_dbt__model_executions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "model_execution_id", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.7497914}, "model.dbt_artifacts.fct_dbt__run_results": {"raw_sql": "{{ config( materialized='incremental', unique_key='command_invocation_id' ) }}\n\n{% set env_keys = dbt_utils.get_column_values(table=ref('stg_dbt__run_results_env_keys'), column='key', default=[]) %}\n\nwith run_results as (\n\n    select *\n    from {{ ref('stg_dbt__run_results') }}\n\n),\n\nincremental_run_results as (\n\n    select *\n    from run_results\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        dbt_version,\n        elapsed_time,\n        execution_command,\n        selected_models,\n        target,\n        was_full_refresh\n\n        {% if env_keys %}\n        -- Environment keys are sorted for determinism.\n        {% for key in env_keys|sort %}\n        ,env:{{ key }} as env_{{ key }}\n        {% endfor %}\n        {% endif %}\n    from incremental_run_results\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt.is_incremental"], "nodes": ["model.dbt_artifacts.stg_dbt__run_results_env_keys", "model.dbt_artifacts.stg_dbt__run_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "command_invocation_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "fct_dbt__run_results"], "unique_id": "model.dbt_artifacts.fct_dbt__run_results", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "incremental/fct_dbt__run_results.sql", "original_file_path": "models/incremental/fct_dbt__run_results.sql", "name": "fct_dbt__run_results", "alias": "fct_dbt__run_results", "checksum": {"name": "sha256", "checksum": "4cc5e33cca22aa846c1dd7dcc4e9a852aade17b2e777ecdfd72292786025b3d7"}, "tags": [], "refs": [["stg_dbt__run_results_env_keys"], ["stg_dbt__run_results"]], "sources": [], "description": "Metadata for dbt run commands.", "columns": {"command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dbt_version": {"name": "dbt_version", "description": "The version of dbt used to generate the source artifact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "elapsed_time": {"name": "elapsed_time", "description": "The total run time of the command.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_command": {"name": "execution_command", "description": "The actual command used.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "selected_models": {"name": "selected_models", "description": "A list of model selectors used in the command.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target": {"name": "target", "description": "The configured target for the command.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "was_full_refresh": {"name": "was_full_refresh", "description": "Was the run executed with a --full-refresh flag?", "meta": {}, "data_type": null, "quote": null, "tags": []}, "env_*": {"name": "env_*", "description": "Columns for the environment variables set when the command was executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "command_invocation_id", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426525.4159544}, "model.dbt_artifacts.dim_dbt__exposures": {"raw_sql": "{{\n  config(\n    materialized='incremental',\n    unique_key='manifest_model_id'\n    )\n}}\n\nwith dbt_models as (\n\n    select * from {{ ref('stg_dbt__exposures') }}\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_models\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n     select\n        t.manifest_model_id,\n        t.command_invocation_id,\n        t.dbt_cloud_run_id,\n        t.artifact_generated_at,\n        t.node_id,\n        t.name,\n        t.type,\n        t.owner,\n        t.maturity,\n        f.value::string as output_feeds,\n        t.package_name\n    from dbt_models_incremental as t,\n    lateral flatten(input => depends_on_nodes) as f\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_artifacts.stg_dbt__exposures"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "manifest_model_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__exposures"], "unique_id": "model.dbt_artifacts.dim_dbt__exposures", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__exposures.sql", "original_file_path": "models/incremental/dim_dbt__exposures.sql", "name": "dim_dbt__exposures", "alias": "dim_dbt__exposures", "checksum": {"name": "sha256", "checksum": "40be79b84f7ec54fa6c4c0f19c9b5fa5be64c8e1abc355301d7bf1cfab8f6208"}, "tags": [], "refs": [["stg_dbt__exposures"]], "sources": [], "description": "All dbt exposures metadata from every manifest.json.", "columns": {"manifest_model_id": {"name": "manifest_model_id", "description": "Primary key generated from the command_invocation_id and checksum. Note,\nthis is not unique for a given exposure.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of exposure.[package_name].[exposure_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "User-defined name of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "User-defined type of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner": {"name": "owner", "description": "User-defined owner of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "User-defined name of the exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "output_feeds": {"name": "output_feeds", "description": "Models exposed in the exposure, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Source package in which each feed of an exposure was defined.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_model_id", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426525.421765}, "model.dbt_artifacts.dim_dbt__models": {"raw_sql": "{{ config( materialized='incremental', unique_key='manifest_model_id' ) }}\n\nwith dbt_models as (\n\n    select * from {{ ref('stg_dbt__models') }}\n\n),\n\ndbt_models_incremental as (\n\n    select *\n    from dbt_models\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        model_database,\n        model_schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        model_path,\n        checksum,\n        model_materialization\n    from dbt_models_incremental\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_artifacts.stg_dbt__models"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "manifest_model_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__models"], "unique_id": "model.dbt_artifacts.dim_dbt__models", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__models.sql", "original_file_path": "models/incremental/dim_dbt__models.sql", "name": "dim_dbt__models", "alias": "dim_dbt__models", "checksum": {"name": "sha256", "checksum": "6665964075d2b9cfa81e73402c4e0d687bc6df1c6b55a2708f3185e21202f381"}, "tags": [], "refs": [["stg_dbt__models"]], "sources": [], "description": "All dbt model metadata from every manifest.json.", "columns": {"manifest_model_id": {"name": "manifest_model_id", "description": "Primary key generated from the command_invocation_id and checksum.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The model name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_schema": {"name": "model_schema", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "List of node ids the model depends on.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_path": {"name": "model_path", "description": "Filepath of the model.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "Unique identifier for the model. If a model is unchanged between separate executions this will remain the same.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model_materialization": {"name": "model_materialization", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_model_id", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426525.4285924}, "model.dbt_artifacts.dim_dbt__sources": {"raw_sql": "{{ config( materialized='incremental', unique_key='manifest_source_id' ) }}\n\nwith dbt_sources as (\n\n    select * from {{ ref('stg_dbt__sources') }}\n\n),\n\ndbt_sources_incremental as (\n\n    select *\n    from dbt_sources\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        source_name,\n        source_schema,\n        package_name,\n        relation_name,\n        source_path\n    from dbt_sources_incremental\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_artifacts.stg_dbt__sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "manifest_source_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "dim_dbt__sources"], "unique_id": "model.dbt_artifacts.dim_dbt__sources", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "incremental/dim_dbt__sources.sql", "original_file_path": "models/incremental/dim_dbt__sources.sql", "name": "dim_dbt__sources", "alias": "dim_dbt__sources", "checksum": {"name": "sha256", "checksum": "139f5314ed2b4fd6ccee7ecb3f36f4981f8a2a1dfbdecc96c9d77d6c60918a15"}, "tags": [], "refs": [["stg_dbt__sources"]], "sources": [], "description": "All dbt source metadata from every manifest.json.", "columns": {"manifest_source_id": {"name": "manifest_source_id", "description": "Primary key generated from the command_invocation_id and checksum.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "command_invocation_id": {"name": "command_invocation_id", "description": "The id of the command which resulted in the source artifact's generation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_generated_at": {"name": "artifact_generated_at", "description": "Timestamp of when the source artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "node_id": {"name": "node_id", "description": "Unique id for the node, in the form of model.[package_name].[model_name]", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The source node name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "The name of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_schema": {"name": "source_schema", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "Package source is defined in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "relation_name": {"name": "relation_name", "description": "Name of the database entity this source resolved to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_path": {"name": "source_path", "description": "Filepath of the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "dbt_artifacts://models/schemas.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "manifest_source_id", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426525.4358854}, "model.dbt_artifacts.fct_dbt__test_executions": {"raw_sql": "{{ config( materialized='incremental', unique_key='model_execution_id' ) }}\n\nwith model_executions as (\n\n    select *\n    from {{ ref('stg_dbt__test_executions') }}\n\n),\n\nmodel_executions_incremental as (\n\n    select *\n    from model_executions\n\n    {% if is_incremental() %}\n    -- this filter will only be applied on an incremental run\n    where artifact_generated_at > (select max(artifact_generated_at) from {{ this }})\n    {% endif %}\n\n),\n\nfields as (\n\n    select\n        model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from model_executions_incremental\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.dbt_artifacts.stg_dbt__test_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "model_execution_id", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "incremental", "fct_dbt__test_executions"], "unique_id": "model.dbt_artifacts.fct_dbt__test_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "incremental/fct_dbt__test_executions.sql", "original_file_path": "models/incremental/fct_dbt__test_executions.sql", "name": "fct_dbt__test_executions", "alias": "fct_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "63f088d2bea4f1fe4af6e663a413dbdbc8b2d8fa1a4f9f66111324df8b86be3d"}, "tags": [], "refs": [["stg_dbt__test_executions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "model_execution_id", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.7821512}, "model.dbt_artifacts.stg_dbt__models": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:database::string as model_database,\n        node.value:schema::string as model_schema,\n        node.value:name::string as name,\n        to_array(node.value:depends_on:nodes) as depends_on_nodes,\n        node.value:package_name::string as package_name,\n        node.value:path::string as model_path,\n        node.value:checksum.checksum::string as checksum,\n        node.value:config.materialized::string as model_materialization\n    from manifests,\n    lateral flatten(input => data:nodes) as node\n    where node.value:resource_type = 'model'\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        model_database,\n        model_schema,\n        name,\n        depends_on_nodes,\n        package_name,\n        model_path,\n        checksum,\n        model_materialization\n    from flatten\n\n)\n\nselect * from surrogate_key", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__models"], "unique_id": "model.dbt_artifacts.stg_dbt__models", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__models.sql", "original_file_path": "models/staging/stg_dbt__models.sql", "name": "stg_dbt__models", "alias": "stg_dbt__models", "checksum": {"name": "sha256", "checksum": "62f40a8717fbc9c2ff5e961f00b59c8d7bd31ed333f591c69f14272e37205e93"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.7895455}, "model.dbt_artifacts.stg_dbt__artifacts": {"raw_sql": "with base as (\n\n    select *\n    from {{ source('dbt_artifacts', 'artifacts') }}\n\n),\n\nfields as (\n\n    select\n        data:metadata:invocation_id::string as command_invocation_id,\n        data:metadata:env:DBT_CLOUD_RUN_ID::int as dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from base\n\n),\n\ndeduped as (\n\n    select\n        *,\n        row_number() over (\n            partition by command_invocation_id, artifact_type\n            order by generated_at desc\n        ) as index\n    from fields\n    qualify index = 1\n\n),\n\nartifacts as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at,\n        path,\n        artifact_type,\n        data\n    from deduped\n\n)\n\nselect * from artifacts", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.dbt_artifacts.dbt_artifacts.artifacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__artifacts"], "unique_id": "model.dbt_artifacts.stg_dbt__artifacts", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__artifacts.sql", "original_file_path": "models/staging/stg_dbt__artifacts.sql", "name": "stg_dbt__artifacts", "alias": "stg_dbt__artifacts", "checksum": {"name": "sha256", "checksum": "c33590d0b759dcaf3473cf8d59773d541dfe810d253ae31eaacade1c21d80b61"}, "tags": [], "refs": [], "sources": [["dbt_artifacts", "artifacts"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.811518}, "model.dbt_artifacts.stg_dbt__run_results": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nfields as (\n\n    select\n        generated_at as artifact_generated_at,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        data:metadata:dbt_version::string as dbt_version,\n        data:metadata:env as env,\n        data:elapsed_time::float as elapsed_time,\n        data:args:which::string as execution_command,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        data:args:models as selected_models,\n        data:args:target::string as target\n    from dbt_run\n\n)\n\nselect * from fields", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__run_results"], "unique_id": "model.dbt_artifacts.stg_dbt__run_results", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__run_results.sql", "original_file_path": "models/staging/stg_dbt__run_results.sql", "name": "stg_dbt__run_results", "alias": "stg_dbt__run_results", "checksum": {"name": "sha256", "checksum": "8219a132f9eb92629931470f29221924b6f82052aba58ec8c2ec91a409eafa93"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.8144336}, "model.dbt_artifacts.stg_dbt__test_executions": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'test'\n\n),\n\nfields as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        result.value:unique_id::string as node_id,\n        split(result.value:thread_id::string, '-')[1]::integer as thread_id,\n        result.value:status::string as status,\n        result.value:message::string as message,\n\n        -- The first item in the timing array is the model-level `compile`\n        result.value:timing[0]:started_at::timestamp_ntz as compile_started_at,\n\n        -- The second item in the timing array is `execute`.\n        result.value:timing[1]:completed_at::timestamp_ntz as query_completed_at,\n\n        -- Confusingly, this does not match the delta of the above two timestamps.\n        -- should we calculate it instead?\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\n\n        result.value:adapter_response:rows_affected::int as rows_affected\n    from dbt_run,\n    lateral flatten(input => data:results) as result\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        message,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from fields\n\n)\n\nselect * from surrogate_key", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__test_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__test_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__test_executions.sql", "original_file_path": "models/staging/stg_dbt__test_executions.sql", "name": "stg_dbt__test_executions", "alias": "stg_dbt__test_executions", "checksum": {"name": "sha256", "checksum": "9d5a7fdd7416b004e7c160c49cc12024c3f1eb8304c365ec28c21fddc226b992"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.8170578}, "model.dbt_artifacts.stg_dbt__sources": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:name::string as name,\n        node.value:source_name::string as source_name,\n        node.value:schema::string as source_schema,\n        node.value:package_name::string as package_name,\n        node.value:relation_name::string as relation_name,\n        node.value:path::string as source_path\n    from manifests,\n    lateral flatten(input => data:sources) as node\n    where node.value:resource_type = 'source'\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as manifest_source_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        source_name,\n        source_schema,\n        package_name,\n        relation_name,\n        source_path\n    from flatten\n\n)\n\nselect * from surrogate_key", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__sources"], "unique_id": "model.dbt_artifacts.stg_dbt__sources", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__sources.sql", "original_file_path": "models/staging/stg_dbt__sources.sql", "name": "stg_dbt__sources", "alias": "stg_dbt__sources", "checksum": {"name": "sha256", "checksum": "d78cd9140513a7ba667ffd88894295f53dd90986f05637154802c50a1f1bd720"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.8250964}, "model.dbt_artifacts.stg_dbt__model_executions": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nfields as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        coalesce(data:args:full_refresh, 'false')::boolean as was_full_refresh,\n        result.value:unique_id::string as node_id,\n        split(result.value:thread_id::string, '-')[1]::integer as thread_id,\n        result.value:status::string as status,\n\n        -- The first item in the timing array is the model-level `compile`\n        result.value:timing[0]:started_at::timestamp_ntz as compile_started_at,\n\n        -- The second item in the timing array is `execute`.\n        result.value:timing[1]:completed_at::timestamp_ntz as query_completed_at,\n\n        -- Confusingly, this does not match the delta of the above two timestamps.\n        -- should we calculate it instead?\n        coalesce(result.value:execution_time::float, 0) as total_node_runtime,\n\n        result.value:adapter_response:rows_affected::int as rows_affected\n    from dbt_run,\n    lateral flatten(input => data:results) as result\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as model_execution_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        was_full_refresh,\n        node_id,\n        thread_id,\n        status,\n        compile_started_at,\n        query_completed_at,\n        total_node_runtime,\n        rows_affected\n    from fields\n\n)\n\nselect * from surrogate_key", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__model_executions"], "unique_id": "model.dbt_artifacts.stg_dbt__model_executions", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__model_executions.sql", "original_file_path": "models/staging/stg_dbt__model_executions.sql", "name": "stg_dbt__model_executions", "alias": "stg_dbt__model_executions", "checksum": {"name": "sha256", "checksum": "8db08623fcf016a53b49936e8d85714d26f66da943f0f4eae0914dc0a559584c"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.8351703}, "model.dbt_artifacts.stg_dbt__run_results_env_keys": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nrun_results as (\n\n    select *\n    from base\n    where artifact_type = 'run_results.json'\n\n),\n\ndbt_run as (\n\n    select *\n    from run_results\n    where data:args:which = 'run'\n\n),\n\nenv_keys as (\n\n    select\n        distinct(env.key)\n    from dbt_run,\n    lateral flatten(input => data:metadata:env) as env\n    -- Sort results to ensure things are deterministic\n    order by 1\n\n)\n\nselect * from env_keys", "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__run_results_env_keys"], "unique_id": "model.dbt_artifacts.stg_dbt__run_results_env_keys", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__run_results_env_keys.sql", "original_file_path": "models/staging/stg_dbt__run_results_env_keys.sql", "name": "stg_dbt__run_results_env_keys", "alias": "stg_dbt__run_results_env_keys", "checksum": {"name": "sha256", "checksum": "fee22d08223cd2536fecb09556ad48b21483e72146b5535812c53ef731603651"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.8422537}, "model.dbt_artifacts.stg_dbt__exposures": {"raw_sql": "with base as (\n\n    select *\n    from {{ ref('stg_dbt__artifacts') }}\n\n),\n\nmanifests as (\n\n    select *\n    from base\n    where artifact_type = 'manifest.json'\n\n),\n\nflatten as (\n\n    select\n        command_invocation_id,\n        dbt_cloud_run_id,\n        generated_at as artifact_generated_at,\n        node.key as node_id,\n        node.value:name::string as name,\n        to_array(node.value:depends_on:nodes) as depends_on_nodes,\n        to_array(node.value:sources:nodes) as depends_on_sources,\n        node.value:type::string as type,\n        node.value:owner:name::string as owner,\n        node.value:maturity::string as maturity,\n        node.value:package_name::string as package_name\n    from manifests,\n    lateral flatten(input => data:exposures) as node\n\n),\n\nsurrogate_key as (\n\n    select\n        {{ dbt_utils.surrogate_key(['command_invocation_id', 'node_id']) }} as manifest_model_id,\n        command_invocation_id,\n        dbt_cloud_run_id,\n        artifact_generated_at,\n        node_id,\n        name,\n        depends_on_nodes,\n        depends_on_sources,\n        type,\n        owner,\n        maturity,\n        package_name\n    from flatten\n\n)\n\nselect * from surrogate_key", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.dbt_artifacts.stg_dbt__artifacts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_artifacts", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"columns": true, "relation": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "analytic_layer_prod", "schema": "core_dbt_artifacts", "fqn": ["dbt_artifacts", "staging", "stg_dbt__exposures"], "unique_id": "model.dbt_artifacts.stg_dbt__exposures", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "staging/stg_dbt__exposures.sql", "original_file_path": "models/staging/stg_dbt__exposures.sql", "name": "stg_dbt__exposures", "alias": "stg_dbt__exposures", "checksum": {"name": "sha256", "checksum": "bf35674d9f92eca84841231602eea633efae7555a9cc5057a1555001b1ac14b2"}, "tags": [], "refs": [["stg_dbt__artifacts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"columns": true, "relation": true}, "schema": "dbt_artifacts"}, "created_at": 1644426523.8449726}, "test.understood_analytics.unique_editorial_current_content_contentful_id.4fc5bbc2d2": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "contentful_id", "model": "{{ get_where_subquery(ref('editorial_current_content')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.editorial_current_content"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "editorial", "unique_editorial_current_content_contentful_id"], "unique_id": "test.understood_analytics.unique_editorial_current_content_contentful_id.4fc5bbc2d2", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "unique_editorial_current_content_contentful_id.sql", "original_file_path": "models/marts/editorial/editorial.yml", "name": "unique_editorial_current_content_contentful_id", "alias": "unique_editorial_current_content_contentful_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["editorial_current_content"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/editorial/editorial.yml/unique_editorial_current_content_contentful_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.108022, "compiled_sql": "\n    \n    \n\nselect\n    contentful_id as unique_field,\n    count(*) as n_records\n\nfrom analytic_layer_prod.core.editorial_current_content\nwhere contentful_id is not null\ngroup by contentful_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contentful_id", "file_key_name": "models.editorial_current_content"}, "test.understood_analytics.not_null_editorial_current_content_contentful_id.e50dd15bf2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contentful_id", "model": "{{ get_where_subquery(ref('editorial_current_content')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.editorial_current_content"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "editorial", "not_null_editorial_current_content_contentful_id"], "unique_id": "test.understood_analytics.not_null_editorial_current_content_contentful_id.e50dd15bf2", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_editorial_current_content_contentful_id.sql", "original_file_path": "models/marts/editorial/editorial.yml", "name": "not_null_editorial_current_content_contentful_id", "alias": "not_null_editorial_current_content_contentful_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["editorial_current_content"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/editorial/editorial.yml/not_null_editorial_current_content_contentful_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.1115725, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.editorial_current_content\nwhere contentful_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contentful_id", "file_key_name": "models.editorial_current_content"}, "test.understood_analytics.not_null_u_org_session_session_id.1d48a23b27": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_session_session_id"], "unique_id": "test.understood_analytics.not_null_u_org_session_session_id.1d48a23b27", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_session_session_id.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "not_null_u_org_session_session_id", "alias": "not_null_u_org_session_session_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/not_null_u_org_session_session_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.524583, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_session\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_id", "file_key_name": "models.u_org_session"}, "test.understood_analytics.not_null_u_org_session_understood_id.8a0e7ba50b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "understood_id", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_session_understood_id"], "unique_id": "test.understood_analytics.not_null_u_org_session_understood_id.8a0e7ba50b", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_session_understood_id.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "not_null_u_org_session_understood_id", "alias": "not_null_u_org_session_understood_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/not_null_u_org_session_understood_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.526614, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_session\nwhere understood_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "understood_id", "file_key_name": "models.u_org_session"}, "test.understood_analytics.not_null_u_org_session_application_id_initial.709a9cdd60": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "application_id_initial", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_session_application_id_initial"], "unique_id": "test.understood_analytics.not_null_u_org_session_application_id_initial.709a9cdd60", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_session_application_id_initial.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "not_null_u_org_session_application_id_initial", "alias": "not_null_u_org_session_application_id_initial", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/not_null_u_org_session_application_id_initial.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.5286713, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_session\nwhere application_id_initial is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id_initial", "file_key_name": "models.u_org_session"}, "test.understood_analytics.not_null_u_org_session_has_site_data.d58737152c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "has_site_data", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_session_has_site_data"], "unique_id": "test.understood_analytics.not_null_u_org_session_has_site_data.d58737152c", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_session_has_site_data.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "not_null_u_org_session_has_site_data", "alias": "not_null_u_org_session_has_site_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/not_null_u_org_session_has_site_data.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.5314915, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_session\nwhere has_site_data is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "has_site_data", "file_key_name": "models.u_org_session"}, "test.understood_analytics.not_null_u_org_session_has_wunder_data.5a26ec6c23": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "has_wunder_data", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_session_has_wunder_data"], "unique_id": "test.understood_analytics.not_null_u_org_session_has_wunder_data.5a26ec6c23", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_session_has_wunder_data.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "not_null_u_org_session_has_wunder_data", "alias": "not_null_u_org_session_has_wunder_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/not_null_u_org_session_has_wunder_data.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.5334387, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_session\nwhere has_wunder_data is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "has_wunder_data", "file_key_name": "models.u_org_session"}, "test.understood_analytics.accepted_values_u_org_session_flag_marketing_session__0__1.6192e6cc4a": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_marketing_session", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_session_flag_marketing_session__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_session_flag_marketing_session__0__1.6192e6cc4a", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_session_flag_marketing_session__0__1.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "accepted_values_u_org_session_flag_marketing_session__0__1", "alias": "accepted_values_u_org_session_flag_marketing_session__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/accepted_values_u_org_session_flag_marketing_session__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.5354052, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_marketing_session as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_session\n    group by flag_marketing_session\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_marketing_session", "file_key_name": "models.u_org_session"}, "test.understood_analytics.accepted_values_u_org_session_flag_user_initial_session__0__1.0d90952c8c": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_user_initial_session", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_session_flag_user_initial_session__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_session_flag_user_initial_session__0__1.0d90952c8c", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_session_flag_user_initial_session__0__1.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "accepted_values_u_org_session_flag_user_initial_session__0__1", "alias": "accepted_values_u_org_session_flag_user_initial_session__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/accepted_values_u_org_session_flag_user_initial_session__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.5507116, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_user_initial_session as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_session\n    group by flag_user_initial_session\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_user_initial_session", "file_key_name": "models.u_org_session"}, "test.understood_analytics.accepted_values_u_org_session_flag_user_returning_session__0__1.1fac4e242f": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_user_returning_session", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_session_flag_user_returning_session__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_session_flag_user_returning_session__0__1.1fac4e242f", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_session_flag_user_returning_session__0__1.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "accepted_values_u_org_session_flag_user_returning_session__0__1", "alias": "accepted_values_u_org_session_flag_user_returning_session__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/accepted_values_u_org_session_flag_user_returning_session__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.5558007, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_user_returning_session as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_session\n    group by flag_user_returning_session\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_user_returning_session", "file_key_name": "models.u_org_session"}, "test.understood_analytics.accepted_values_u_org_session_flag_unengaged_session__0__1.4cd75b042f": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_unengaged_session", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_session_flag_unengaged_session__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_session_flag_unengaged_session__0__1.4cd75b042f", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_session_flag_unengaged_session__0__1.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "accepted_values_u_org_session_flag_unengaged_session__0__1", "alias": "accepted_values_u_org_session_flag_unengaged_session__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/accepted_values_u_org_session_flag_unengaged_session__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.560434, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_unengaged_session as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_session\n    group by flag_unengaged_session\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_unengaged_session", "file_key_name": "models.u_org_session"}, "test.understood_analytics.accepted_values_u_org_session_flag_engaged_session__0__1.5b1d9d724d": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_engaged_session", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_session_flag_engaged_session__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_session_flag_engaged_session__0__1.5b1d9d724d", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_session_flag_engaged_session__0__1.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "accepted_values_u_org_session_flag_engaged_session__0__1", "alias": "accepted_values_u_org_session_flag_engaged_session__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/accepted_values_u_org_session_flag_engaged_session__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.565225, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_engaged_session as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_session\n    group by flag_engaged_session\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_engaged_session", "file_key_name": "models.u_org_session"}, "test.understood_analytics.accepted_values_u_org_session_flag_bounced_session__0__1.ebe8ec070e": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_bounced_session", "model": "{{ get_where_subquery(ref('u_org_session')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_session"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_session_flag_bounced_session__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_session_flag_bounced_session__0__1.ebe8ec070e", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_session_flag_bounced_session__0__1.sql", "original_file_path": "models/marts/u_org/u_org_session.yml", "name": "accepted_values_u_org_session_flag_bounced_session__0__1", "alias": "accepted_values_u_org_session_flag_bounced_session__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_session"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_session.yml/accepted_values_u_org_session_flag_bounced_session__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.5696473, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_bounced_session as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_session\n    group by flag_bounced_session\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_bounced_session", "file_key_name": "models.u_org_session"}, "test.understood_analytics.unique_u_org_event_unique_event_id.32171d5b04": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('u_org_event')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_event"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "unique_u_org_event_unique_event_id"], "unique_id": "test.understood_analytics.unique_u_org_event_unique_event_id.32171d5b04", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "unique_u_org_event_unique_event_id.sql", "original_file_path": "models/marts/u_org/u_org_event.yml", "name": "unique_u_org_event_unique_event_id", "alias": "unique_u_org_event_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_event"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_event.yml/unique_u_org_event_unique_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.8687153, "compiled_sql": "\n    \n    \n\nselect\n    unique_event_id as unique_field,\n    count(*) as n_records\n\nfrom analytic_layer_prod.core.u_org_event\nwhere unique_event_id is not null\ngroup by unique_event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_event_id", "file_key_name": "models.u_org_event"}, "test.understood_analytics.not_null_u_org_event_unique_event_id.aed3a78b36": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('u_org_event')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_event"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_event_unique_event_id"], "unique_id": "test.understood_analytics.not_null_u_org_event_unique_event_id.aed3a78b36", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_event_unique_event_id.sql", "original_file_path": "models/marts/u_org/u_org_event.yml", "name": "not_null_u_org_event_unique_event_id", "alias": "not_null_u_org_event_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_event"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_event.yml/not_null_u_org_event_unique_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.8709216, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_event\nwhere unique_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_event_id", "file_key_name": "models.u_org_event"}, "test.understood_analytics.not_null_u_org_event_session_id.ec071a0b8e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('u_org_event')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_event"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_event_session_id"], "unique_id": "test.understood_analytics.not_null_u_org_event_session_id.ec071a0b8e", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_event_session_id.sql", "original_file_path": "models/marts/u_org/u_org_event.yml", "name": "not_null_u_org_event_session_id", "alias": "not_null_u_org_event_session_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_event"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_event.yml/not_null_u_org_event_session_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.8728466, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_event\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_id", "file_key_name": "models.u_org_event"}, "test.understood_analytics.not_null_u_org_event_application_id.5f42aaa7bc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "application_id", "model": "{{ get_where_subquery(ref('u_org_event')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_event"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_event_application_id"], "unique_id": "test.understood_analytics.not_null_u_org_event_application_id.5f42aaa7bc", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_event_application_id.sql", "original_file_path": "models/marts/u_org/u_org_event.yml", "name": "not_null_u_org_event_application_id", "alias": "not_null_u_org_event_application_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_event"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_event.yml/not_null_u_org_event_application_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.8747818, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_event\nwhere application_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id", "file_key_name": "models.u_org_event"}, "test.understood_analytics.accepted_values_u_org_event_flag_core_actions__0__1.04cb03ed01": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_core_actions", "model": "{{ get_where_subquery(ref('u_org_event')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_event"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_event_flag_core_actions__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_event_flag_core_actions__0__1.04cb03ed01", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_event_flag_core_actions__0__1.sql", "original_file_path": "models/marts/u_org/u_org_event.yml", "name": "accepted_values_u_org_event_flag_core_actions__0__1", "alias": "accepted_values_u_org_event_flag_core_actions__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_event"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_event.yml/accepted_values_u_org_event_flag_core_actions__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426524.877031, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_core_actions as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_event\n    group by flag_core_actions\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_core_actions", "file_key_name": "models.u_org_event"}, "test.understood_analytics.not_null_u_org_pageview_understood_id.818bc95641": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "understood_id", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_pageview_understood_id"], "unique_id": "test.understood_analytics.not_null_u_org_pageview_understood_id.818bc95641", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_pageview_understood_id.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "not_null_u_org_pageview_understood_id", "alias": "not_null_u_org_pageview_understood_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/not_null_u_org_pageview_understood_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.2682984, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_pageview\nwhere understood_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "understood_id", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.not_null_u_org_pageview_session_id.d3514d6352": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "session_id", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_pageview_session_id"], "unique_id": "test.understood_analytics.not_null_u_org_pageview_session_id.d3514d6352", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_pageview_session_id.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "not_null_u_org_pageview_session_id", "alias": "not_null_u_org_pageview_session_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/not_null_u_org_pageview_session_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.2703612, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_pageview\nwhere session_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "session_id", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.not_null_u_org_pageview_application_id.d1d3a690db": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "application_id", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_pageview_application_id"], "unique_id": "test.understood_analytics.not_null_u_org_pageview_application_id.d1d3a690db", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_pageview_application_id.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "not_null_u_org_pageview_application_id", "alias": "not_null_u_org_pageview_application_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/not_null_u_org_pageview_application_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.27236, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_pageview\nwhere application_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "application_id", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.not_null_u_org_pageview_has_site_data.bec90040b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "has_site_data", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_pageview_has_site_data"], "unique_id": "test.understood_analytics.not_null_u_org_pageview_has_site_data.bec90040b6", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_pageview_has_site_data.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "not_null_u_org_pageview_has_site_data", "alias": "not_null_u_org_pageview_has_site_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/not_null_u_org_pageview_has_site_data.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.2743251, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_pageview\nwhere has_site_data is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "has_site_data", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.not_null_u_org_pageview_has_wunder_data.89c07510c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "has_wunder_data", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "not_null_u_org_pageview_has_wunder_data"], "unique_id": "test.understood_analytics.not_null_u_org_pageview_has_wunder_data.89c07510c4", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_u_org_pageview_has_wunder_data.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "not_null_u_org_pageview_has_wunder_data", "alias": "not_null_u_org_pageview_has_wunder_data", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/not_null_u_org_pageview_has_wunder_data.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.2765148, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.u_org_pageview\nwhere has_wunder_data is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "has_wunder_data", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.accepted_values_u_org_pageview_flag_new_user_page_view__0__1.a01675dab5": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_new_user_page_view", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_pageview_flag_new_user_page_view__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_pageview_flag_new_user_page_view__0__1.a01675dab5", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_pageview_flag_new_user_page_view__0__1.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "accepted_values_u_org_pageview_flag_new_user_page_view__0__1", "alias": "accepted_values_u_org_pageview_flag_new_user_page_view__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/accepted_values_u_org_pageview_flag_new_user_page_view__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.2784812, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_new_user_page_view as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_pageview\n    group by flag_new_user_page_view\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_new_user_page_view", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.accepted_values_u_org_pageview_flag_is_unengaged_page_view__0__1.93a0fa1f1a": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_u_org_pageview_c4d52a6a3f8e6c73e15df7beef81b262\") }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_is_unengaged_page_view", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": "accepted_values_u_org_pageview_c4d52a6a3f8e6c73e15df7beef81b262", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_pageview_flag_is_unengaged_page_view__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_pageview_flag_is_unengaged_page_view__0__1.93a0fa1f1a", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_pageview_c4d52a6a3f8e6c73e15df7beef81b262.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "accepted_values_u_org_pageview_flag_is_unengaged_page_view__0__1", "alias": "accepted_values_u_org_pageview_c4d52a6a3f8e6c73e15df7beef81b262", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/accepted_values_u_org_pageview_c4d52a6a3f8e6c73e15df7beef81b262.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_u_org_pageview_c4d52a6a3f8e6c73e15df7beef81b262"}, "created_at": 1644426525.2837532, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_is_unengaged_page_view as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_pageview\n    group by flag_is_unengaged_page_view\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_is_unengaged_page_view", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1.a83eadddab": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_is_engaged_page_view", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1.a83eadddab", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1", "alias": "accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.2887585, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_is_engaged_page_view as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_pageview\n    group by flag_is_engaged_page_view\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_is_engaged_page_view", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.accepted_values_u_org_pageview_flag_entry_page_page_view__0__1.1821c87eed": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_entry_page_page_view", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_pageview_flag_entry_page_page_view__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_pageview_flag_entry_page_page_view__0__1.1821c87eed", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_pageview_flag_entry_page_page_view__0__1.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "accepted_values_u_org_pageview_flag_entry_page_page_view__0__1", "alias": "accepted_values_u_org_pageview_flag_entry_page_page_view__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/accepted_values_u_org_pageview_flag_entry_page_page_view__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.2937064, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_entry_page_page_view as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_pageview\n    group by flag_entry_page_page_view\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_entry_page_page_view", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.accepted_values_u_org_pageview_flag_exit_page_page_view__0__1.3344a41078": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_exit_page_page_view", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_pageview_flag_exit_page_page_view__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_pageview_flag_exit_page_page_view__0__1.3344a41078", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_pageview_flag_exit_page_page_view__0__1.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "accepted_values_u_org_pageview_flag_exit_page_page_view__0__1", "alias": "accepted_values_u_org_pageview_flag_exit_page_page_view__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/accepted_values_u_org_pageview_flag_exit_page_page_view__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.2987387, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_exit_page_page_view as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_pageview\n    group by flag_exit_page_page_view\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_exit_page_page_view", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.accepted_values_u_org_pageview_flag_page_completion__0__1.32c245fac5": {"raw_sql": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "accepted_values", "kwargs": {"values": [0, 1], "column_name": "flag_page_completion", "model": "{{ get_where_subquery(ref('u_org_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.u_org_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "marts", "u_org", "accepted_values_u_org_pageview_flag_page_completion__0__1"], "unique_id": "test.understood_analytics.accepted_values_u_org_pageview_flag_page_completion__0__1.32c245fac5", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "accepted_values_u_org_pageview_flag_page_completion__0__1.sql", "original_file_path": "models/marts/u_org/u_org_pageview.yml", "name": "accepted_values_u_org_pageview_flag_page_completion__0__1", "alias": "accepted_values_u_org_pageview_flag_page_completion__0__1", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["u_org_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/marts/u_org/u_org_pageview.yml/accepted_values_u_org_pageview_flag_page_completion__0__1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3033292, "compiled_sql": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag_page_completion as value_field,\n        count(*) as n_records\n\n    from analytic_layer_prod.core.u_org_pageview\n    group by flag_page_completion\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    '0','1'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag_page_completion", "file_key_name": "models.u_org_pageview"}, "test.understood_analytics.unique_stg_sp_events_unique_event_id.8a43c4552b": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.stg_sp_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "unique_stg_sp_events_unique_event_id"], "unique_id": "test.understood_analytics.unique_stg_sp_events_unique_event_id.8a43c4552b", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "unique_stg_sp_events_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "unique_stg_sp_events_unique_event_id", "alias": "unique_stg_sp_events_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/snowplow/stg_sp.yml/unique_stg_sp_events_unique_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3451445, "compiled_sql": "\n    \n    \n\nselect\n    unique_event_id as unique_field,\n    count(*) as n_records\n\nfrom analytic_layer_prod.core.stg_sp_events\nwhere unique_event_id is not null\ngroup by unique_event_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_events"}, "test.understood_analytics.not_null_stg_sp_events_unique_event_id.a77567f585": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_events')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.stg_sp_events"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "not_null_stg_sp_events_unique_event_id"], "unique_id": "test.understood_analytics.not_null_stg_sp_events_unique_event_id.a77567f585", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_stg_sp_events_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "not_null_stg_sp_events_unique_event_id", "alias": "not_null_stg_sp_events_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_events"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/snowplow/stg_sp.yml/not_null_stg_sp_events_unique_event_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3473907, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.stg_sp_events\nwhere unique_event_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_events"}, "test.understood_analytics.unique_stg_sp_event_account_unique_event_id.197d99c223": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_event_account')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "unique_stg_sp_event_account_unique_event_id"], "unique_id": "test.understood_analytics.unique_stg_sp_event_account_unique_event_id.197d99c223", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "unique_stg_sp_event_account_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "unique_stg_sp_event_account_unique_event_id", "alias": "unique_stg_sp_event_account_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_event_account"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3497076, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_event_account"}, "test.understood_analytics.not_null_stg_sp_event_account_unique_event_id.5344505ac5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_event_account')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "not_null_stg_sp_event_account_unique_event_id"], "unique_id": "test.understood_analytics.not_null_stg_sp_event_account_unique_event_id.5344505ac5", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_stg_sp_event_account_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "not_null_stg_sp_event_account_unique_event_id", "alias": "not_null_stg_sp_event_account_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_event_account"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3517191, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_event_account"}, "test.understood_analytics.unique_stg_sp_event_click_unique_event_id.d67ec144fa": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_event_click')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "unique_stg_sp_event_click_unique_event_id"], "unique_id": "test.understood_analytics.unique_stg_sp_event_click_unique_event_id.d67ec144fa", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "unique_stg_sp_event_click_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "unique_stg_sp_event_click_unique_event_id", "alias": "unique_stg_sp_event_click_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_event_click"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3537624, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_event_click"}, "test.understood_analytics.not_null_stg_sp_event_click_unique_event_id.838cd1471b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_event_click')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "not_null_stg_sp_event_click_unique_event_id"], "unique_id": "test.understood_analytics.not_null_stg_sp_event_click_unique_event_id.838cd1471b", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_stg_sp_event_click_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "not_null_stg_sp_event_click_unique_event_id", "alias": "not_null_stg_sp_event_click_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_event_click"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3560393, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_event_click"}, "test.understood_analytics.unique_stg_sp_event_engagement_unique_event_id.2bf36bd0fc": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_event_engagement')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "unique_stg_sp_event_engagement_unique_event_id"], "unique_id": "test.understood_analytics.unique_stg_sp_event_engagement_unique_event_id.2bf36bd0fc", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "unique_stg_sp_event_engagement_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "unique_stg_sp_event_engagement_unique_event_id", "alias": "unique_stg_sp_event_engagement_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_event_engagement"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.35797, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_event_engagement"}, "test.understood_analytics.not_null_stg_sp_event_engagement_unique_event_id.a4f49d0bdb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_event_engagement')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "not_null_stg_sp_event_engagement_unique_event_id"], "unique_id": "test.understood_analytics.not_null_stg_sp_event_engagement_unique_event_id.a4f49d0bdb", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_stg_sp_event_engagement_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "not_null_stg_sp_event_engagement_unique_event_id", "alias": "not_null_stg_sp_event_engagement_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_event_engagement"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.359925, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_event_engagement"}, "test.understood_analytics.unique_stg_sp_event_impression_unique_event_id.2f95089665": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_event_impression')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "unique_stg_sp_event_impression_unique_event_id"], "unique_id": "test.understood_analytics.unique_stg_sp_event_impression_unique_event_id.2f95089665", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "unique_stg_sp_event_impression_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "unique_stg_sp_event_impression_unique_event_id", "alias": "unique_stg_sp_event_impression_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_event_impression"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3618617, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_event_impression"}, "test.understood_analytics.not_null_stg_sp_event_impression_unique_event_id.de1b06bf2f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_event_id", "model": "{{ get_where_subquery(ref('stg_sp_event_impression')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "not_null_stg_sp_event_impression_unique_event_id"], "unique_id": "test.understood_analytics.not_null_stg_sp_event_impression_unique_event_id.de1b06bf2f", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_stg_sp_event_impression_unique_event_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "not_null_stg_sp_event_impression_unique_event_id", "alias": "not_null_stg_sp_event_impression_unique_event_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_event_impression"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.364203, "column_name": "unique_event_id", "file_key_name": "models.stg_sp_event_impression"}, "test.understood_analytics.unique_stg_sp_pageview_unique_pageview_id.44f68b2707": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "unique_pageview_id", "model": "{{ get_where_subquery(ref('stg_sp_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.stg_sp_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "unique_stg_sp_pageview_unique_pageview_id"], "unique_id": "test.understood_analytics.unique_stg_sp_pageview_unique_pageview_id.44f68b2707", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "unique_stg_sp_pageview_unique_pageview_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "unique_stg_sp_pageview_unique_pageview_id", "alias": "unique_stg_sp_pageview_unique_pageview_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/snowplow/stg_sp.yml/unique_stg_sp_pageview_unique_pageview_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.366073, "compiled_sql": "\n    \n    \n\nselect\n    unique_pageview_id as unique_field,\n    count(*) as n_records\n\nfrom analytic_layer_prod.core.stg_sp_pageview\nwhere unique_pageview_id is not null\ngroup by unique_pageview_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_pageview_id", "file_key_name": "models.stg_sp_pageview"}, "test.understood_analytics.not_null_stg_sp_pageview_unique_pageview_id.41595dc181": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "unique_pageview_id", "model": "{{ get_where_subquery(ref('stg_sp_pageview')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.understood_analytics.stg_sp_pageview"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["understood_analytics", "staging", "snowplow", "not_null_stg_sp_pageview_unique_pageview_id"], "unique_id": "test.understood_analytics.not_null_stg_sp_pageview_unique_pageview_id.41595dc181", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "not_null_stg_sp_pageview_unique_pageview_id.sql", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "not_null_stg_sp_pageview_unique_pageview_id", "alias": "not_null_stg_sp_pageview_unique_pageview_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["stg_sp_pageview"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/understood_analytics/models/staging/snowplow/stg_sp.yml/not_null_stg_sp_pageview_unique_pageview_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.3680632, "compiled_sql": "\n    \n    \n\nselect *\nfrom analytic_layer_prod.core.stg_sp_pageview\nwhere unique_pageview_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "unique_pageview_id", "file_key_name": "models.stg_sp_pageview"}, "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "node_id", "model": "{{ get_where_subquery(ref('fct_dbt__critical_path')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_artifacts.fct_dbt__critical_path"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "unique_fct_dbt__critical_path_node_id"], "unique_id": "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "unique_fct_dbt__critical_path_node_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_fct_dbt__critical_path_node_id", "alias": "unique_fct_dbt__critical_path_node_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__critical_path"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4378254, "column_name": "node_id", "file_key_name": "models.fct_dbt__critical_path"}, "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "node_id", "model": "{{ get_where_subquery(ref('fct_dbt__critical_path')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_artifacts.fct_dbt__critical_path"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_fct_dbt__critical_path_node_id"], "unique_id": "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "not_null_fct_dbt__critical_path_node_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_fct_dbt__critical_path_node_id", "alias": "not_null_fct_dbt__critical_path_node_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__critical_path"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4414103, "column_name": "node_id", "file_key_name": "models.fct_dbt__critical_path"}, "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "node_id", "model": "{{ get_where_subquery(ref('fct_dbt__latest_full_model_executions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_artifacts.fct_dbt__latest_full_model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "unique_fct_dbt__latest_full_model_executions_node_id"], "unique_id": "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "unique_fct_dbt__latest_full_model_executions_node_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_fct_dbt__latest_full_model_executions_node_id", "alias": "unique_fct_dbt__latest_full_model_executions_node_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__latest_full_model_executions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4443233, "column_name": "node_id", "file_key_name": "models.fct_dbt__latest_full_model_executions"}, "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "node_id", "model": "{{ get_where_subquery(ref('fct_dbt__latest_full_model_executions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_artifacts.fct_dbt__latest_full_model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_fct_dbt__latest_full_model_executions_node_id"], "unique_id": "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "not_null_fct_dbt__latest_full_model_executions_node_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_fct_dbt__latest_full_model_executions_node_id", "alias": "not_null_fct_dbt__latest_full_model_executions_node_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__latest_full_model_executions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4465833, "column_name": "node_id", "file_key_name": "models.fct_dbt__latest_full_model_executions"}, "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "model_execution_id", "model": "{{ get_where_subquery(ref('fct_dbt__model_executions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_artifacts.fct_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "unique_fct_dbt__model_executions_model_execution_id"], "unique_id": "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "unique_fct_dbt__model_executions_model_execution_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_fct_dbt__model_executions_model_execution_id", "alias": "unique_fct_dbt__model_executions_model_execution_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__model_executions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4497488, "column_name": "model_execution_id", "file_key_name": "models.fct_dbt__model_executions"}, "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "model_execution_id", "model": "{{ get_where_subquery(ref('fct_dbt__model_executions')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_artifacts.fct_dbt__model_executions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_fct_dbt__model_executions_model_execution_id"], "unique_id": "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "not_null_fct_dbt__model_executions_model_execution_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_fct_dbt__model_executions_model_execution_id", "alias": "not_null_fct_dbt__model_executions_model_execution_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__model_executions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4519877, "column_name": "model_execution_id", "file_key_name": "models.fct_dbt__model_executions"}, "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "command_invocation_id", "model": "{{ get_where_subquery(ref('fct_dbt__run_results')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_artifacts.fct_dbt__run_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "unique_fct_dbt__run_results_command_invocation_id"], "unique_id": "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "unique_fct_dbt__run_results_command_invocation_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_fct_dbt__run_results_command_invocation_id", "alias": "unique_fct_dbt__run_results_command_invocation_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__run_results"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4549143, "column_name": "command_invocation_id", "file_key_name": "models.fct_dbt__run_results"}, "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "command_invocation_id", "model": "{{ get_where_subquery(ref('fct_dbt__run_results')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_artifacts.fct_dbt__run_results"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_fct_dbt__run_results_command_invocation_id"], "unique_id": "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "not_null_fct_dbt__run_results_command_invocation_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_fct_dbt__run_results_command_invocation_id", "alias": "not_null_fct_dbt__run_results_command_invocation_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["fct_dbt__run_results"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4580176, "column_name": "command_invocation_id", "file_key_name": "models.fct_dbt__run_results"}, "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manifest_model_id", "model": "{{ get_where_subquery(ref('dim_dbt__exposures')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_artifacts.dim_dbt__exposures"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_dim_dbt__exposures_manifest_model_id"], "unique_id": "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "not_null_dim_dbt__exposures_manifest_model_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_dim_dbt__exposures_manifest_model_id", "alias": "not_null_dim_dbt__exposures_manifest_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__exposures"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4601505, "column_name": "manifest_model_id", "file_key_name": "models.dim_dbt__exposures"}, "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "manifest_model_id || '-' || output_feeds", "model": "{{ get_where_subquery(ref('dim_dbt__exposures')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_artifacts.dim_dbt__exposures"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "unique_dim_dbt__exposures_manifest_model_id_output_feeds"], "unique_id": "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "unique_dim_dbt__exposures_manifest_model_id_output_feeds.sql", "original_file_path": "models/schemas.yml", "name": "unique_dim_dbt__exposures_manifest_model_id_output_feeds", "alias": "unique_dim_dbt__exposures_manifest_model_id_output_feeds", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__exposures"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4621472, "column_name": null, "file_key_name": "models.dim_dbt__exposures"}, "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "manifest_model_id", "model": "{{ get_where_subquery(ref('dim_dbt__models')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_artifacts.dim_dbt__models"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "unique_dim_dbt__models_manifest_model_id"], "unique_id": "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "unique_dim_dbt__models_manifest_model_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_dim_dbt__models_manifest_model_id", "alias": "unique_dim_dbt__models_manifest_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__models"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.46422, "column_name": "manifest_model_id", "file_key_name": "models.dim_dbt__models"}, "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manifest_model_id", "model": "{{ get_where_subquery(ref('dim_dbt__models')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_artifacts.dim_dbt__models"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_dim_dbt__models_manifest_model_id"], "unique_id": "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "not_null_dim_dbt__models_manifest_model_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_dim_dbt__models_manifest_model_id", "alias": "not_null_dim_dbt__models_manifest_model_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__models"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4665368, "column_name": "manifest_model_id", "file_key_name": "models.dim_dbt__models"}, "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": {"raw_sql": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "manifest_source_id", "model": "{{ get_where_subquery(ref('dim_dbt__sources')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.dbt_artifacts.dim_dbt__sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "unique_dim_dbt__sources_manifest_source_id"], "unique_id": "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "unique_dim_dbt__sources_manifest_source_id.sql", "original_file_path": "models/schemas.yml", "name": "unique_dim_dbt__sources_manifest_source_id", "alias": "unique_dim_dbt__sources_manifest_source_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__sources"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4686272, "column_name": "manifest_source_id", "file_key_name": "models.dim_dbt__sources"}, "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "manifest_source_id", "model": "{{ get_where_subquery(ref('dim_dbt__sources')) }}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.dbt_artifacts.dim_dbt__sources"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "analytic_layer_prod", "schema": "core_dbt_test__audit", "fqn": ["dbt_artifacts", "not_null_dim_dbt__sources_manifest_source_id"], "unique_id": "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "not_null_dim_dbt__sources_manifest_source_id.sql", "original_file_path": "models/schemas.yml", "name": "not_null_dim_dbt__sources_manifest_source_id", "alias": "not_null_dim_dbt__sources_manifest_source_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dim_dbt__sources"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1644426525.4706388, "column_name": "manifest_source_id", "file_key_name": "models.dim_dbt__sources"}}, "sources": {"source.understood_analytics.contentful.article": {"fqn": ["understood_analytics", "staging", "contentful", "contentful", "article"], "database": "reporting_database", "schema": "contentful", "unique_id": "source.understood_analytics.contentful.article", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "models/staging/contentful/stg_contentful.yml", "original_file_path": "models/staging/contentful/stg_contentful.yml", "name": "article", "source_name": "contentful", "source_description": "", "loader": "", "identifier": "article", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "insert_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "reporting_database.contentful.article", "created_at": 1644426525.4804385}, "source.understood_analytics.contentful.article_tag": {"fqn": ["understood_analytics", "staging", "contentful", "contentful", "article_tag"], "database": "reporting_database", "schema": "contentful", "unique_id": "source.understood_analytics.contentful.article_tag", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "models/staging/contentful/stg_contentful.yml", "original_file_path": "models/staging/contentful/stg_contentful.yml", "name": "article_tag", "source_name": "contentful", "source_description": "", "loader": "", "identifier": "article_tag", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "insert_timestamp", "freshness": {"warn_after": {"count": 24, "period": "hour"}, "error_after": {"count": 48, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "reporting_database.contentful.article_tag", "created_at": 1644426525.4806206}, "source.understood_analytics.snowplow.user": {"fqn": ["understood_analytics", "staging", "snowplow", "snowplow", "user"], "database": "reporting_database", "schema": "snowplow_data_model", "unique_id": "source.understood_analytics.snowplow.user", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "models/staging/snowplow/stg_sp.yml", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "user", "source_name": "snowplow", "source_description": "", "loader": "", "identifier": "user", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "insert_timestamp", "freshness": {"warn_after": {"count": 4, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "reporting_database.snowplow_data_model.user", "created_at": 1644426525.4807405}, "source.understood_analytics.snowplow.session": {"fqn": ["understood_analytics", "staging", "snowplow", "snowplow", "session"], "database": "reporting_database", "schema": "snowplow_data_model", "unique_id": "source.understood_analytics.snowplow.session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "models/staging/snowplow/stg_sp.yml", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "session", "source_name": "snowplow", "source_description": "", "loader": "", "identifier": "session", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "session_derived_timestamp_start", "freshness": {"warn_after": {"count": 4, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "reporting_database.snowplow_data_model.session", "created_at": 1644426525.4809628}, "source.understood_analytics.snowplow.pageview": {"fqn": ["understood_analytics", "staging", "snowplow", "snowplow", "pageview"], "database": "reporting_database", "schema": "snowplow_data_model", "unique_id": "source.understood_analytics.snowplow.pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "models/staging/snowplow/stg_sp.yml", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "pageview", "source_name": "snowplow", "source_description": "", "loader": "", "identifier": "pageview", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "derived_timestamp", "freshness": {"warn_after": {"count": 4, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "reporting_database.snowplow_data_model.pageview", "created_at": 1644426525.4811866}, "source.understood_analytics.snowplow.site_interaction": {"fqn": ["understood_analytics", "staging", "snowplow", "snowplow", "site_interaction"], "database": "reporting_database", "schema": "snowplow_data_model", "unique_id": "source.understood_analytics.snowplow.site_interaction", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "models/staging/snowplow/stg_sp.yml", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "site_interaction", "source_name": "snowplow", "source_description": "", "loader": "", "identifier": "site_interaction", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "derived_timestamp", "freshness": {"warn_after": {"count": 4, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "reporting_database.snowplow_data_model.site_interaction", "created_at": 1644426525.4813855}, "source.understood_analytics.snowplow.app_interaction": {"fqn": ["understood_analytics", "staging", "snowplow", "snowplow", "app_interaction"], "database": "reporting_database", "schema": "snowplow_data_model", "unique_id": "source.understood_analytics.snowplow.app_interaction", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "models/staging/snowplow/stg_sp.yml", "original_file_path": "models/staging/snowplow/stg_sp.yml", "name": "app_interaction", "source_name": "snowplow", "source_description": "", "loader": "", "identifier": "app_interaction", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "derived_timestamp", "freshness": {"warn_after": {"count": 4, "period": "hour"}, "error_after": {"count": 24, "period": "hour"}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "reporting_database.snowplow_data_model.app_interaction", "created_at": 1644426525.4815953}, "source.dbt_artifacts.dbt_artifacts.artifacts": {"fqn": ["dbt_artifacts", "staging", "dbt_artifacts", "artifacts"], "database": "analytic_layer_prod", "schema": "dbt_artifacts", "unique_id": "source.dbt_artifacts.dbt_artifacts.artifacts", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "models/staging/sources.yml", "original_file_path": "models/staging/sources.yml", "name": "artifacts", "source_name": "dbt_artifacts", "source_description": "", "loader": "", "identifier": "artifacts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "The source table containing loaded dbt artifacts. All of the artifacts must be loaded into this table. See the README for more info.\n", "columns": {"data": {"name": "data", "description": "A variant type object containing all the artifact's data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "Timestamp for when the artifact was generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "The path of the artifact in the external stage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artifact_type": {"name": "artifact_type", "description": "The type of the artifact, e.g. manifest.json", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "analytic_layer_prod.dbt_artifacts.artifacts", "created_at": 1644426525.481809}}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6623025}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6631265}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6641593}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} \n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    \n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6657956}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6675198}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6687658}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6699052}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6706376}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6708283}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6712666}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6715171}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.671953}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6725235}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6729782}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6740983}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.674791}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6759503}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6771355}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.678877}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.67942}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6800086}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6820154}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.685263}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6897106}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6906867}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.69515}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.6970472}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7017577}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.704582}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7053838}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.705968}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7070343}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.708443}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7111595}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.711776}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7122376}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7126107}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.713011}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7135556}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7140353}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7147152}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.715176}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7155666}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7186465}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7190268}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7197485}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7201676}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7210712}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7215893}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7229166}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7235494}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7252836}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.726488}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.726827}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7273612}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7283068}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7298183}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7302043}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7306607}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7310433}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7316804}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.732733}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7358427}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7365265}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7369413}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7374308}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7378526}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7382274}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.738676}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.739334}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7401037}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7413118}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7418225}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7422695}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7433636}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7437844}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.744153}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7445703}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7457228}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7460444}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7464058}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7473264}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7486007}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7492695}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7499666}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7510197}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7515748}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7526164}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.753193}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.756415}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.75952}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.761802}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7626054}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7663434}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7682838}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7692616}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7705355}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7715054}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7735355}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7748926}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7762947}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.777317}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.778355}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.781865}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7825272}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7830186}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7835464}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7840328}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7940006}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7959235}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7966142}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7973464}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.7988296}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8032792}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8047097}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.805495}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8066297}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.80701}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8074539}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8080587}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8149776}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.824714}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8334017}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.836215}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8388588}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8408813}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8433874}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8513188}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8553596}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8560138}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8570936}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8577619}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8592207}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8618774}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8631787}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8646848}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8716824}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8736866}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8742318}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8753393}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8756948}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8759723}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8765032}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8768992}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.878084}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8785348}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8817604}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.889573}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8915224}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8927133}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.8988638}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9001603}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.901582}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9080875}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9087603}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9091487}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9093633}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9098215}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9118311}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9122913}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.912868}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9138236}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.920742}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.921253}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9217925}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9221425}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.922387}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9239893}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9243786}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9247704}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9269524}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9313786}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9327548}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9334152}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9456718}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.947361}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9479265}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9485745}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9493556}, "macro.audit_helper.pop_columns": {"unique_id": "macro.audit_helper.pop_columns", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "name": "pop_columns", "macro_sql": "{% macro pop_columns(columns, columns_to_pop) %}\n{% set popped_columns=[] %}\n\n{% for column in columns %}\n    {% if column.name | lower not in columns_to_pop | lower %}\n        {% do popped_columns.append(column) %}\n    {% endif %}\n{% endfor %}\n\n{{ return(popped_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9521735}, "macro.audit_helper.compare_relations": {"unique_id": "macro.audit_helper.compare_relations", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "name": "compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None) %}\n\n{%- set a_columns = adapter.get_columns_in_relation(a_relation) -%}\n\n{% set check_columns=audit_helper.pop_columns(a_columns, exclude_columns) %}\n\n{% set check_cols_csv = check_columns | map(attribute='quoted') | join(', ') %}\n\n{% set a_query %}\nselect\n    {{ check_cols_csv }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n    {{ check_cols_csv }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.audit_helper.pop_columns", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9539914}, "macro.audit_helper.compare_queries": {"unique_id": "macro.audit_helper.compare_queries", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "name": "compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9559202}, "macro.audit_helper.default__compare_queries": {"unique_id": "macro.audit_helper.default__compare_queries", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "name": "default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt_utils.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt_utils.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt_utils.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\nsummary_stats as (\n    select\n        in_a,\n        in_b,\n        count(*) as count\n    from all_records\n\n    group by 1, 2\n)\n-- select * from all_records\n-- where not (in_a and in_b)\n-- order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\nselect\n    *,\n    round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\nfrom summary_stats\norder by in_a desc, in_b desc\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.intersect", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9568622}, "macro.audit_helper.compare_column_values": {"unique_id": "macro.audit_helper.compare_column_values", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "name": "compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9621227}, "macro.audit_helper.default__compare_column_values": {"unique_id": "macro.audit_helper.default__compare_column_values", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "name": "default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '\u2705: perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '\u2705: both are null'\n            when a_query.{{ primary_key }} is null then '\ud83e\udd37: \u200dmissing from a'\n            when b_query.{{ primary_key }} is null then '\ud83e\udd37: missing from b'\n            when a_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in a only'\n            when b_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in b only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '\ud83d\ude45: \u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by match_status, match_order\n)\n\nselect\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.963925}, "macro.audit_helper.compare_relation_columns": {"unique_id": "macro.audit_helper.compare_relation_columns", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "name": "compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9663258}, "macro.audit_helper.default__compare_relation_columns": {"unique_id": "macro.audit_helper.default__compare_relation_columns", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "name": "default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9668162}, "macro.audit_helper.get_columns_in_relation_sql": {"unique_id": "macro.audit_helper.get_columns_in_relation_sql", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "name": "get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.audit_helper.snowflake__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.967253}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "name": "redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n{#-\nSee https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/redshift/dbt/include/redshift/macros/adapters.sql#L71\nEdited to include ordinal_position\n-#}\nwith bound_views as (\n  select\n    ordinal_position,\n    table_schema,\n    column_name,\n    data_type,\n    character_maximum_length,\n    numeric_precision,\n    numeric_scale\n\n  from information_schema.\"columns\"\n  where table_name = '{{ relation.identifier }}'\n),\n\nunbound_views as (\nselect\n  ordinal_position,\n  view_schema,\n  col_name,\n  case\n    when col_type ilike 'character varying%' then\n      'character varying'\n    when col_type ilike 'numeric%' then 'numeric'\n    else col_type\n  end as col_type,\n  case\n    when col_type like 'character%'\n    then nullif(REGEXP_SUBSTR(col_type, '[0-9]+'), '')::int\n    else null\n  end as character_maximum_length,\n  case\n    when col_type like 'numeric%'\n    then nullif(\n      SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 1),\n      '')::int\n    else null\n  end as numeric_precision,\n  case\n    when col_type like 'numeric%'\n    then nullif(\n      SPLIT_PART(REGEXP_SUBSTR(col_type, '[0-9,]+'), ',', 2),\n      '')::int\n    else null\n  end as numeric_scale\n\nfrom pg_get_late_binding_view_cols()\ncols(view_schema name, view_name name, col_name name,\n     col_type varchar, ordinal_position int)\nwhere view_name = '{{ relation.identifier }}'\n),\n\nunioned as (\nselect * from bound_views\nunion all\nselect * from unbound_views\n)\n\nselect\n*\n\nfrom unioned\n{% if relation.schema %}\nwhere table_schema = '{{ relation.schema }}'\n{% endif %}\norder by ordinal_position\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9679272}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "name": "snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9687052}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "name": "postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9693284}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "package_name": "audit_helper", "root_path": "/tmp/jobs/43531564/target/dbt_packages/audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "name": "bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9697256}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9708598}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.972175}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9731674}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9739995}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.975197}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9766161}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.977503}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9779887}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9793253}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.980174}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9805596}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9815767}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9822288}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9838483}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.986042}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9885666}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.991315}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426522.9957607}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0006435}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0028687}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0042708}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0048132}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0056314}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0078132}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.008466}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.009941}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0122359}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0149791}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0162368}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0167136}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0186489}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0199711}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0207543}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0219193}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0225577}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0240886}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0261765}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0273333}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0282834}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0320127}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n{% if default is none %}\n    {% set default = [] %}\n{% endif %}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return(default) }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0369549}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.042492}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0480697}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0491645}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.04975}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.051608}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.053974}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0554633}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0575192}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0585227}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.059339}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0621557}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0627244}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0642693}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0653858}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0676694}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0694442}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.070391}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0707805}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.071843}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.072574}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0739381}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0758438}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0772502}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0784788}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0796921}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0803578}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0814967}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0818875}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.083354}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0841203}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.08921}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0925214}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.093691}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0940776}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0953093}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0958297}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0972407}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0983872}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.0993516}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.099772}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1009529}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.101635}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1027164}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1040702}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1057086}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.107699}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1089532}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1097271}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1109881}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1118803}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1126704}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.112921}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.113848}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.114261}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1155138}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1158528}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1162217}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1165814}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1176724}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.118055}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1184578}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1194718}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1198032}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1200995}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1203942}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.121395}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1221757}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1224983}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1236212}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1240015}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1243224}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1252613}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1255999}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.125903}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1306694}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1313698}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.132}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1360762}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.136575}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1380024}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1382723}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1384473}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1386163}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.138967}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1392539}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1395874}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.13987}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1401753}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1414118}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.141667}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1419008}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1431878}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.14358}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1439521}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.144312}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1447442}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1459267}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1472445}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1478677}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1482098}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1492567}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1496673}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.151165}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.151362}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.151537}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.151707}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1518729}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1522367}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1524143}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1525974}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1529584}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1531332}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.153301}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1536565}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1538293}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1539934}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1543493}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.154521}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1546853}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1550388}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1552827}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1554635}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1562893}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1564796}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1566544}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1578128}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.158137}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1584444}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1609492}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1619642}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1630065}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1634622}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1653893}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1662567}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.166511}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1667492}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1675568}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1678655}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.16864}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.168828}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1690006}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.179382}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1805356}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.181232}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1823711}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.194369}, "macro.dbt_artifacts.create_artifact_resources": {"unique_id": "macro.dbt_artifacts.create_artifact_resources", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "macros/create_artifact_resources.sql", "original_file_path": "macros/create_artifact_resources.sql", "name": "create_artifact_resources", "macro_sql": "{% macro create_artifact_resources() %}\n\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\n\n{{ create_schema( src_dbt_artifacts ) }}\n\n{% set create_stage_query %}\ncreate stage if not exists {{ src_dbt_artifacts }}\nfile_format = ( type =  json );\n{% endset %}\n\n{% set create_table_query %}\ncreate table if not exists {{ src_dbt_artifacts }} (\n    data variant,\n    generated_at timestamp,\n    path string,\n    artifact_type string\n);\n\n{% endset %}\n\n\n{% do log(\"Creating Stage: \" ~ create_stage_query, info=True) %}\n{% do run_query(create_stage_query) %}\n\n{% do log(\"Creating Table: \" ~ create_table_query, info=True) %}\n{% do run_query(create_table_query) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.1965766}, "macro.dbt_artifacts.upload_dbt_artifacts": {"unique_id": "macro.dbt_artifacts.upload_dbt_artifacts", "package_name": "dbt_artifacts", "root_path": "/tmp/jobs/43531564/target/dbt_packages/dbt_artifacts", "path": "macros/upload_artifacts.sql", "original_file_path": "macros/upload_artifacts.sql", "name": "upload_dbt_artifacts", "macro_sql": "{% macro upload_dbt_artifacts(filenames) %}\n\n{% set src_dbt_artifacts = source('dbt_artifacts', 'artifacts') %}\n\n{% set remove_query %}\n    remove @{{ src_dbt_artifacts }} pattern='.*.json.gz';\n{% endset %}\n\n{% do log(\"Clearing existing files from Stage: \" ~ remove_query, info=True) %}\n{% do run_query(remove_query) %}\n\n{% for filename in filenames %}\n\n    {% set file = filename ~ '.json' %}\n\n    {% set put_query %}\n        put file://target/{{ file }} @{{ src_dbt_artifacts }} auto_compress=true;\n    {% endset %}\n\n    {% do log(\"Uploading \" ~ file ~ \" to Stage: \" ~ put_query, info=True) %}\n    {% do run_query(put_query) %}\n\n    {% set copy_query %}\n        begin;\n        copy into {{ src_dbt_artifacts }} from\n            (\n                select\n                $1 as data,\n                $1:metadata:generated_at::timestamp_ntz as generated_at,\n                metadata$filename as path,\n                regexp_substr(metadata$filename, '([a-z_]+.json)') as artifact_type\n                from  @{{ src_dbt_artifacts }}\n            )\n            file_format=(type='JSON')\n            on_error='skip_file';\n        commit;\n    {% endset %}\n\n    {% do log(\"Copying \" ~ file ~ \" from Stage: \" ~ copy_query, info=True) %}\n    {% do run_query(copy_query) %}\n\n{% endfor %}\n\n{% do log(\"Clearing new files from Stage: \" ~ remove_query, info=True) %}\n{% do run_query(remove_query) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1644426523.2003856}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/dist-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {"metric.understood_analytics.account_creation_success": {"fqn": ["understood_analytics", "marts", "u_org", "account_creation_success"], "unique_id": "metric.understood_analytics.account_creation_success", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "account_creation_success", "description": "The number of accounts created via u.org", "label": "New Accounts - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name = 'account' and u_org_event.event_type = 'account_creation' then u_org_event.understood_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.1233017}, "metric.understood_analytics.download": {"fqn": ["understood_analytics", "marts", "u_org", "download"], "unique_id": "metric.understood_analytics.download", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "download", "description": "The count of downloadables on a page", "label": "Downloads of content - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'download' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.1310682}, "metric.understood_analytics.click": {"fqn": ["understood_analytics", "marts", "u_org", "click"], "unique_id": "metric.understood_analytics.click", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "click", "description": "The count of clicks on a page", "label": "Clicks - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'click' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.14096}, "metric.understood_analytics.share": {"fqn": ["understood_analytics", "marts", "u_org", "share"], "unique_id": "metric.understood_analytics.share", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "share", "description": "Number of times users shared a piece of content", "label": "Clicks - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'share' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.150905}, "metric.understood_analytics.rating": {"fqn": ["understood_analytics", "marts", "u_org", "rating"], "unique_id": "metric.understood_analytics.rating", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "rating", "description": "Number of times users rated an article helpful or not", "label": "Ratings - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'rating' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.1598077}, "metric.understood_analytics.helpful_yes_rating": {"fqn": ["understood_analytics", "marts", "u_org", "helpful_yes_rating"], "unique_id": "metric.understood_analytics.helpful_yes_rating", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "helpful_yes_rating", "description": "Number of times users rated an article as helpful", "label": "Helpful 'yes' Ratings - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'rating' and u_org_event.helpful = 'yes' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.1668694}, "metric.understood_analytics.helpful_no_rating": {"fqn": ["understood_analytics", "marts", "u_org", "helpful_no_rating"], "unique_id": "metric.understood_analytics.helpful_no_rating", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "helpful_no_rating", "description": "Number of times users rated an article as not helpful", "label": "Helpful 'no' Ratings - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'rating' and u_org_event.helpful = 'no' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.1762645}, "metric.understood_analytics.impression": {"fqn": ["understood_analytics", "marts", "u_org", "impression"], "unique_id": "metric.understood_analytics.impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "impression", "description": "Number of impressions of content.", "label": "Impressions - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression'  then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.1863983}, "metric.understood_analytics.search": {"fqn": ["understood_analytics", "marts", "u_org", "search"], "unique_id": "metric.understood_analytics.search", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "search", "description": "Number of times users searched for content", "label": "Search - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'search' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.1965911}, "metric.understood_analytics.print": {"fqn": ["understood_analytics", "marts", "u_org", "print"], "unique_id": "metric.understood_analytics.print", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "print", "description": "Number of times users printed content", "label": "Print - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'print' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.207262}, "metric.understood_analytics.bookmark": {"fqn": ["understood_analytics", "marts", "u_org", "bookmark"], "unique_id": "metric.understood_analytics.bookmark", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "bookmark", "description": "Number of times users bookmarked content", "label": "Bookmark - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'bookmark' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.2164598}, "metric.understood_analytics.subscribe_successful": {"fqn": ["understood_analytics", "marts", "u_org", "subscribe_successful"], "unique_id": "metric.understood_analytics.subscribe_successful", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "subscribe_successful", "description": "Number of times users subscribed email successfully", "label": "Bookmark - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'subscribe' and u_org_event.submit_success = 'true'  then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.225514}, "metric.understood_analytics.hub_content_feed_click": {"fqn": ["understood_analytics", "marts", "u_org", "hub_content_feed_click"], "unique_id": "metric.understood_analytics.hub_content_feed_click", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "hub_content_feed_click", "description": "Number of times users clicked on content from hub feed", "label": "Clicks on hub content feed - U.org", "type": "count_distinct", "sql": "case when u_org_event.unit_name in ('recommended for you', 'quick tips', 'deeper dives', 'our community', 'trending') \n  and (u_org_event.site_section='hub')  \n  and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'click'\nthen u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.2339087}, "metric.understood_analytics.hub_content_feed_impression": {"fqn": ["understood_analytics", "marts", "u_org", "hub_content_feed_impression"], "unique_id": "metric.understood_analytics.hub_content_feed_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "hub_content_feed_impression", "description": "Number of times users saw content from hub feed", "label": "Impression on hub content feed - U.org", "type": "count_distinct", "sql": "case when u_org_event.unit_name in ('recommended for you', 'quick tips', 'deeper dives', 'our community', 'trending')  and (u_org_event.site_section='hub')   and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Impression"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.241089}, "metric.understood_analytics.rate_hub_content_feed_ctr": {"fqn": ["understood_analytics", "marts", "u_org", "rate_hub_content_feed_ctr"], "unique_id": "metric.understood_analytics.rate_hub_content_feed_ctr", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "rate_hub_content_feed_ctr", "description": "Number of times content feed was clicked for hub per impression", "label": "% ctr on hub content feed - U.org", "type": "number", "sql": "count(distinct \n  case when u_org_event.unit_name in ('recommended for you', 'quick tips', 'deeper dives', 'our community', 'trending') \n    and (u_org_event.site_section='hub')  \n    and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'click'\n  then u_org_event.unique_event_id end\n) / nullif(count(distinct \n  case when u_org_event.unit_name in ('recommended for you', 'quick tips', 'deeper dives', 'our community', 'trending') \n    and (u_org_event.site_section='hub')  \n    and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression'\n  then u_org_event.unique_event_id end)\n,0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Conversion", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.2485325}, "metric.understood_analytics.hub_topic_select": {"fqn": ["understood_analytics", "marts", "u_org", "hub_topic_select"], "unique_id": "metric.understood_analytics.hub_topic_select", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "hub_topic_select", "description": "Number of times topics were selected for hub", "label": "Hub topic select - U.org", "type": "count_distinct", "sql": "case when u_org_event.unit_name in ('topic preferences inline', 'topic preferences','topic_preferences') \n  and u_org_event.site_section in ('hub','articles') \n  and u_org_event.event_name= 'engagement' and u_org_event.event_type in ('select','select topics') \nthen u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.2563806}, "metric.understood_analytics.hub_topic_impression": {"fqn": ["understood_analytics", "marts", "u_org", "hub_topic_impression"], "unique_id": "metric.understood_analytics.hub_topic_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "hub_topic_impression", "description": "Number of times topics were selected for hub", "label": "Impression of hub topic selector - U.org", "type": "count_distinct", "sql": "case when u_org_event.unit_name in ('topic preferences inline', 'topic preferences','topic_preferences') \n  and u_org_event.site_section in ('hub','articles') \n  and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression'\nthen u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Impression"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.2642379}, "metric.understood_analytics.rate_hub_selects_ctr": {"fqn": ["understood_analytics", "marts", "u_org", "rate_hub_selects_ctr"], "unique_id": "metric.understood_analytics.rate_hub_selects_ctr", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "rate_hub_selects_ctr", "description": "Number of times topics were selected for hub per impression", "label": "% Topics selection per Impression - U.org", "type": "number", "sql": "count(distinct \n  case when u_org_event.unit_name in ('topic preferences inline', 'topic preferences','topic_preferences') \n    and u_org_event.site_section in ('hub','articles') \n    and u_org_event.event_name= 'engagement' and u_org_event.event_type in ('select','select topics') \n  then u_org_event.unique_event_id end)\n/ nullif(count(distinct       \n  case when u_org_event.unit_name in ('topic preferences inline', 'topic preferences','topic_preferences') \n    and u_org_event.site_section in ('hub','articles') \n    and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression'\n  then u_org_event.unique_event_id end)\n,0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Conversion", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.273385}, "metric.understood_analytics.carousel_click": {"fqn": ["understood_analytics", "marts", "u_org", "carousel_click"], "unique_id": "metric.understood_analytics.carousel_click", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "carousel_click", "description": "Number of times users clicked on carousel", "label": "Clicks on carousel - U.org", "type": "count_distinct", "sql": "case when u_org_event.unit_name ='carousel' \n  and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'click' \nthen u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.283905}, "metric.understood_analytics.accordion_click": {"fqn": ["understood_analytics", "marts", "u_org", "accordion_click"], "unique_id": "metric.understood_analytics.accordion_click", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "accordion_click", "description": "Number of times users clicked on accordion", "label": "Clicks on accordion - U.org", "type": "count_distinct", "sql": "case when u_org_event.unit_name ='accordion' \n  and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'click' \nthen u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.293844}, "metric.understood_analytics.learn_more_click": {"fqn": ["understood_analytics", "marts", "u_org", "learn_more_click"], "unique_id": "metric.understood_analytics.learn_more_click", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "learn_more_click", "description": "Number of times users clicked on learn more button", "label": "Clicks on learn more button - U.org", "type": "count_distinct", "sql": "case when u_org_event.button_name = 'learn_more'\n  and u_org_event.event_name= 'navigation' and u_org_event.event_type = 'click' \nthen u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.3040378}, "metric.understood_analytics.community_download_store": {"fqn": ["understood_analytics", "marts", "u_org", "community_download_store"], "unique_id": "metric.understood_analytics.community_download_store", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "community_download_store", "description": "Number of times users clicked on link to community app", "label": "Link to Wunder app store - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'community_download' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.3125668}, "metric.understood_analytics.actions_taken": {"fqn": ["understood_analytics", "marts", "u_org", "actions_taken"], "unique_id": "metric.understood_analytics.actions_taken", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "actions_taken", "description": "Number of times users took a core action.", "label": "All core actions count - U.org", "type": "count_distinct", "sql": "case when u_org_event.flag_core_actions = 1 then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.320674}, "metric.understood_analytics.email_impression": {"fqn": ["understood_analytics", "marts", "u_org", "email_impression"], "unique_id": "metric.understood_analytics.email_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "email_impression", "description": "Number of times email signup unit loaded on page", "label": "Email Impression events - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' and u_org_event.unit_name ilike '%email%' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Impression"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.328366}, "metric.understood_analytics.download_impression": {"fqn": ["understood_analytics", "marts", "u_org", "download_impression"], "unique_id": "metric.understood_analytics.download_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "download_impression", "description": "Number of times download unit loaded on page", "label": "Download Impression events - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' and u_org_event.unit_name = 'downloadable' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Impression"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.336019}, "metric.understood_analytics.helpful_impression": {"fqn": ["understood_analytics", "marts", "u_org", "helpful_impression"], "unique_id": "metric.understood_analytics.helpful_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "helpful_impression", "description": "Number of times helpful rating unit loaded on page", "label": "Helpful Rating Impression events - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' and u_org_event.unit_name = 'helpful_rating' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Impression"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.343935}, "metric.understood_analytics.carousel_impression": {"fqn": ["understood_analytics", "marts", "u_org", "carousel_impression"], "unique_id": "metric.understood_analytics.carousel_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "carousel_impression", "description": "Number of times carousel unit loaded on page", "label": "Carousel Impression events - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' and u_org_event.unit_name ='carousel' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Impression"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.3527615}, "metric.understood_analytics.accordion_impression": {"fqn": ["understood_analytics", "marts", "u_org", "accordion_impression"], "unique_id": "metric.understood_analytics.accordion_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "accordion_impression", "description": "Number of times accordion unit loaded on page", "label": "Accordion Impression events - U.org", "type": "count_distinct", "sql": "case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' and u_org_event.unit_name ='accordion' then u_org_event.unique_event_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Impression"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.3603618}, "metric.understood_analytics.rate_accordion_clicks_per_impression": {"fqn": ["understood_analytics", "marts", "u_org", "rate_accordion_clicks_per_impression"], "unique_id": "metric.understood_analytics.rate_accordion_clicks_per_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "rate_accordion_clicks_per_impression", "description": "Number of times accordion unit was clicked on per load on page", "label": "Accordion Clicks per Impression events - U.org", "type": "number", "sql": "count(distinct case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'click' and u_org_event.unit_name ='accordion' then u_org_event.unique_event_id end) / nullif(count(distinct case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' and u_org_event.unit_name ='accordion' then u_org_event.unique_event_id end),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Conversion", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.3672602}, "metric.understood_analytics.rate_email_signups_per_impression": {"fqn": ["understood_analytics", "marts", "u_org", "rate_email_signups_per_impression"], "unique_id": "metric.understood_analytics.rate_email_signups_per_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "rate_email_signups_per_impression", "description": "Number of times a user subscribed their email was clicked on per load on page", "label": "Email subscriptions per Impression events - U.org", "type": "number", "sql": "count(distinct case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'subscribe' and u_org_event.submit_success = 'true'  then u_org_event.unique_event_id end) / nullif(count(distinct case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' and u_org_event.unit_name ilike '%email%' then u_org_event.unique_event_id end),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Conversion", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.3768551}, "metric.understood_analytics.rate_downloads_per_impression": {"fqn": ["understood_analytics", "marts", "u_org", "rate_downloads_per_impression"], "unique_id": "metric.understood_analytics.rate_downloads_per_impression", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_event_metrics.yml", "original_file_path": "models/marts/u_org/u_org_event_metrics.yml", "model": "ref('u_org_event')", "name": "rate_downloads_per_impression", "description": "Number of times a user downloaded per unit load on page", "label": "Email downloads per impression events - U.org", "type": "number", "sql": "count(distinct case when u_org_event.event_name= 'engagement' and u_org_event.event_type = 'download' then u_org_event.unique_event_id end) / nullif(count(distinct case when u_org_event.event_name= 'navigation' and u_org_event.event_type = 'impression' and u_org_event.unit_name = 'downloadable' then u_org_event.unique_event_id end),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Conversion", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_event"]}, "refs": [["u_org_event"]], "created_at": 1644426524.387168}, "metric.understood_analytics.pageview": {"fqn": ["understood_analytics", "marts", "u_org", "pageview"], "unique_id": "metric.understood_analytics.pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "pageview", "description": "Count of pageview, all pages loaded from u.org", "label": "Pageview - U.org", "type": "count_distinct", "sql": "u_org_pageview.unique_pageview_id", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.5808973}, "metric.understood_analytics.engaged_pageview": {"fqn": ["understood_analytics", "marts", "u_org", "engaged_pageview"], "unique_id": "metric.understood_analytics.engaged_pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "engaged_pageview", "description": "Pageviews over 15 seconds or unbounced.", "label": "Engaged pageview - U.org", "type": "count_distinct", "sql": "case when u_org_pageview.engagement_is_unengaged = false then u_org_pageview.unique_pageview_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.59055}, "metric.understood_analytics.unengaged_pageview": {"fqn": ["understood_analytics", "marts", "u_org", "unengaged_pageview"], "unique_id": "metric.understood_analytics.unengaged_pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "unengaged_pageview", "description": "Bounced pageviews with duration less than 15 second.", "label": "Unengaged pageview - U.org", "type": "count_distinct", "sql": "case when u_org_pageview.engagement_is_unengaged = true then u_org_pageview.unique_pageview_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.5985641}, "metric.understood_analytics.entry_pageview": {"fqn": ["understood_analytics", "marts", "u_org", "entry_pageview"], "unique_id": "metric.understood_analytics.entry_pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "entry_pageview", "description": "Counts is first pageview of session.", "label": "Entry pageview - U.org", "type": "count_distinct", "sql": "case when u_org_pageview.is_initial_session_pageview = true then u_org_pageview.unique_pageview_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.605124}, "metric.understood_analytics.exit_pageview": {"fqn": ["understood_analytics", "marts", "u_org", "exit_pageview"], "unique_id": "metric.understood_analytics.exit_pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "exit_pageview", "description": "Counts if last pageview of session.", "label": "Exit pageview - U.org", "type": "count_distinct", "sql": "case when u_org_pageview.is_latest_session_pageview = true then u_org_pageview.unique_pageview_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.6122673}, "metric.understood_analytics.completion_pageview": {"fqn": ["understood_analytics", "marts", "u_org", "completion_pageview"], "unique_id": "metric.understood_analytics.completion_pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "completion_pageview", "description": "Counts if user scrolled more than 80% of page.", "label": "Completion of pageview - U.org", "type": "count_distinct", "sql": "case when u_org_pageview.engagement_y_percentage_scrolled >=80 then u_org_pageview.unique_pageview_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.6191268}, "metric.understood_analytics.new_user_pageview": {"fqn": ["understood_analytics", "marts", "u_org", "new_user_pageview"], "unique_id": "metric.understood_analytics.new_user_pageview", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "new_user_pageview", "description": "Counts page if new user.", "label": "New User pageview - U.org", "type": "count_distinct", "sql": "case when u_org_pageview.is_initial_user_pageview then u_org_pageview.unique_pageview_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.6259909}, "metric.understood_analytics.avg_percentage_scrolled": {"fqn": ["understood_analytics", "marts", "u_org", "avg_percentage_scrolled"], "unique_id": "metric.understood_analytics.avg_percentage_scrolled", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "avg_percentage_scrolled", "description": "Counts page if new user.", "label": "Avg % Scrolled - U.org", "type": "average", "sql": "u_org_pageview.engagement_y_percentage_scrolled/100", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.6339445}, "metric.understood_analytics.rate_pageview_completion": {"fqn": ["understood_analytics", "marts", "u_org", "rate_pageview_completion"], "unique_id": "metric.understood_analytics.rate_pageview_completion", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "rate_pageview_completion", "description": "% of Pageviews that completed.", "label": "% of pageviews completed - U.org", "type": "number", "sql": "count(distinct case when u_org_pageview.engagement_y_percentage_scrolled >=80 then u_org_pageview.unique_pageview_id end) / nullif(count(distinct u_org_pageview.unique_pageview_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.6411238}, "metric.understood_analytics.rate_pageview_entry": {"fqn": ["understood_analytics", "marts", "u_org", "rate_pageview_entry"], "unique_id": "metric.understood_analytics.rate_pageview_entry", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "rate_pageview_entry", "description": "% of Pageviews that were 1st page of session.", "label": "% of entry pageviews - U.org", "type": "number", "sql": "count(distinct case when u_org_pageview.is_initial_session_pageview = true then u_org_pageview.unique_pageview_id end) / nullif(count(distinct u_org_pageview.unique_pageview_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.648666}, "metric.understood_analytics.rate_pageview_exit": {"fqn": ["understood_analytics", "marts", "u_org", "rate_pageview_exit"], "unique_id": "metric.understood_analytics.rate_pageview_exit", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "rate_pageview_exit", "description": "% of Pageviews that were 1st page of session.", "label": "% of exit pageviews - U.org", "type": "number", "sql": "count(distinct case when u_org_pageview.is_latest_session_pageview = true then u_org_pageview.unique_pageview_id end) / nullif(count(distinct u_org_pageview.unique_pageview_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format": "0.0%"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.656472}, "metric.understood_analytics.avg_pageview_duration": {"fqn": ["understood_analytics", "marts", "u_org", "avg_pageview_duration"], "unique_id": "metric.understood_analytics.avg_pageview_duration", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_pageview_metrics.yml", "original_file_path": "models/marts/u_org/u_org_pageview_metrics.yml", "model": "ref('u_org_pageview')", "name": "avg_pageview_duration", "description": "Average time for pageview.", "label": "Avg pageview duration - U.org", "type": "average", "sql": "u_org_pageview.engagement_second", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format": "0.00\\\"s\\\""}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_pageview"]}, "refs": [["u_org_pageview"]], "created_at": 1644426524.6637282}, "metric.understood_analytics.session": {"fqn": ["understood_analytics", "marts", "u_org", "session"], "unique_id": "metric.understood_analytics.session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "session", "description": "Count of sessions, all consecutive events within 30-min on u.org", "label": "session - U.org", "type": "count_distinct", "sql": "u_org_session.session_id", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.671063}, "metric.understood_analytics.bounced_session": {"fqn": ["understood_analytics", "marts", "u_org", "bounced_session"], "unique_id": "metric.understood_analytics.bounced_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "bounced_session", "description": "The number of sessions where user read a single page without clicking any content.", "label": "Bounced session - U.org", "type": "count_distinct", "sql": "case when u_org_session.engagement_is_bounce_session = true then u_org_session.session_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.6779587}, "metric.understood_analytics.engaged_session": {"fqn": ["understood_analytics", "marts", "u_org", "engaged_session"], "unique_id": "metric.understood_analytics.engaged_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "engaged_session", "description": "Sessions over 15 seconds or unbounced.", "label": "Engaged Session - U.org", "type": "count_distinct", "sql": "case when u_org_session.engagement_is_unengaged = false then u_org_session.session_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.684817}, "metric.understood_analytics.unengaged_session": {"fqn": ["understood_analytics", "marts", "u_org", "unengaged_session"], "unique_id": "metric.understood_analytics.unengaged_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "unengaged_session", "description": "Bounced sessions with duration less than 15 second.", "label": "Unengaged Session - U.org", "type": "count_distinct", "sql": "case when u_org_session.engagement_is_unengaged = true then u_org_session.session_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.6918545}, "metric.understood_analytics.initial_session": {"fqn": ["understood_analytics", "marts", "u_org", "initial_session"], "unique_id": "metric.understood_analytics.initial_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "initial_session", "description": "Initial sessions for user.", "label": "Initial Session - U.org", "type": "count_distinct", "sql": "case when u_org_session.is_user_initial_session = true then u_org_session.session_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.6984167}, "metric.understood_analytics.return_session": {"fqn": ["understood_analytics", "marts", "u_org", "return_session"], "unique_id": "metric.understood_analytics.return_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "return_session", "description": "Returning sessions for user.", "label": "Return Session - U.org", "type": "count_distinct", "sql": "case when u_org_session.is_user_initial_session = false then u_org_session.session_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7064402}, "metric.understood_analytics.marketing_session": {"fqn": ["understood_analytics", "marts", "u_org", "marketing_session"], "unique_id": "metric.understood_analytics.marketing_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "marketing_session", "description": "Sessions from a marketing medium.", "label": "Return Session - U.org", "type": "count_distinct", "sql": "case when u_org_session.is_marketing_traffic = true then u_org_session.session_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7148304}, "metric.understood_analytics.user": {"fqn": ["understood_analytics", "marts", "u_org", "user"], "unique_id": "metric.understood_analytics.user", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "user", "description": "Count of Users.", "label": "User - U.org", "type": "count_distinct", "sql": "u_org_session.understood_id", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7215648}, "metric.understood_analytics.return_user": {"fqn": ["understood_analytics", "marts", "u_org", "return_user"], "unique_id": "metric.understood_analytics.return_user", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "return_user", "description": "Count of Users.", "label": "User - U.org", "type": "count_distinct", "sql": "case when u_org_session.is_user_initial_session = false then u_org_session.understood_id end", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Counts", "looker_value_format_name": "percent_1"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7290714}, "metric.understood_analytics.rate_bounce_session": {"fqn": ["understood_analytics", "marts", "u_org", "rate_bounce_session"], "unique_id": "metric.understood_analytics.rate_bounce_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "rate_bounce_session", "description": "% of Sessions which bounced", "label": "% Bounce Session - U.org", "type": "number", "sql": "count(distinct case when u_org_session.engagement_is_bounce_session = true then u_org_session.session_id end) / NULLIF(count(distinct u_org_session.session_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format_name": "percent_1"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.736581}, "metric.understood_analytics.rate_engaged_session": {"fqn": ["understood_analytics", "marts", "u_org", "rate_engaged_session"], "unique_id": "metric.understood_analytics.rate_engaged_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "rate_engaged_session", "description": "% of Sessions which bounced", "label": "% Engaged Session - U.org", "type": "number", "sql": "count(distinct case when u_org_session.engagement_is_unengaged = false then u_org_session.session_id end) / NULLIF(count(distinct u_org_session.session_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7435591}, "metric.understood_analytics.rate_return_session": {"fqn": ["understood_analytics", "marts", "u_org", "rate_return_session"], "unique_id": "metric.understood_analytics.rate_return_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "rate_return_session", "description": "% of Sessions with prior visit.", "label": "% Return Session - U.org", "type": "number", "sql": "count(distinct case when u_org_session.is_user_initial_session = false then u_org_session.session_id end) / NULLIF(count(distinct u_org_session.session_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format_name": "percent_1"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7510655}, "metric.understood_analytics.rate_return_user": {"fqn": ["understood_analytics", "marts", "u_org", "rate_return_user"], "unique_id": "metric.understood_analytics.rate_return_user", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "rate_return_user", "description": "% of user with prior visit.", "label": "% Return User - U.org", "type": "number", "sql": "count(distinct case when u_org_session.is_user_initial_session = false then u_org_session.understood_id end) / NULLIF(count(distinct u_org_session.understood_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format_name": "percent_1"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7582648}, "metric.understood_analytics.rate_2nd_page": {"fqn": ["understood_analytics", "marts", "u_org", "rate_2nd_page"], "unique_id": "metric.understood_analytics.rate_2nd_page", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "rate_2nd_page", "description": "% of sessions that have 2 or more pageviews", "label": "% of sessions reach 2nd page - U.org", "type": "number", "sql": "count(distinct case when u_org_session.engagement_pageview_count > 1 then u_org_session.session_id end) / NULLIF(count(distinct u_org_session.session_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format_name": "percent_1"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7661302}, "metric.understood_analytics.sessions_per_user": {"fqn": ["understood_analytics", "marts", "u_org", "sessions_per_user"], "unique_id": "metric.understood_analytics.sessions_per_user", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "sessions_per_user", "description": "Count of session per Count of user.", "label": "Sessions per user - U.org", "type": "number", "sql": "count(distinct u_org_session.session_id) / NULLIF(count(distinct u_org_session.understood_id ),0)", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.7736776}, "metric.understood_analytics.pageview_per_session": {"fqn": ["understood_analytics", "marts", "u_org", "pageview_per_session"], "unique_id": "metric.understood_analytics.pageview_per_session", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "pageview_per_session", "description": "Count of pageview per Count of session.", "label": "Pageviews per session - U.org", "type": "average", "sql": "u_org_session.engagement_pageview_count", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement"}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.781231}, "metric.understood_analytics.avg_session_duration": {"fqn": ["understood_analytics", "marts", "u_org", "avg_session_duration"], "unique_id": "metric.understood_analytics.avg_session_duration", "package_name": "understood_analytics", "root_path": "/tmp/jobs/43531564/target", "path": "marts/u_org/u_org_session_metrics.yml", "original_file_path": "models/marts/u_org/u_org_session_metrics.yml", "model": "ref('u_org_session')", "name": "avg_session_duration", "description": "Average time for session.", "label": "Avg session duration - U.org", "type": "average", "sql": "u_org_session.engagement_second", "timestamp": "event_date_est", "filters": [], "time_grains": ["day", "week", "month", "year"], "dimensions": ["site_section"], "resource_type": "metric", "meta": {"looker": true, "looker_hidden": false, "looker_field_group": "Engagement", "looker_value_format": "0.00\\\"s\\\""}, "tags": [], "sources": [], "depends_on": {"macros": [], "nodes": ["model.understood_analytics.u_org_session"]}, "refs": [["u_org_session"]], "created_at": 1644426524.788719}}, "selectors": {}, "disabled": {}, "parent_map": {"model.understood_analytics.editorial_current_content": ["model.understood_analytics.stg_contentful_external_pivot", "model.understood_analytics.stg_contentful_external_pivot", "model.understood_analytics.stg_contentful_kab_pivot", "model.understood_analytics.stg_contentful_kab_pivot", "model.understood_analytics.stg_contentful_moments_pivot", "model.understood_analytics.stg_contentful_moments_pivot", "model.understood_analytics.stg_contentful_stages_pivot", "model.understood_analytics.stg_contentful_stages_pivot", "model.understood_analytics.stg_contentful_tags_agg_json", "source.understood_analytics.contentful.article"], "model.understood_analytics.u_org_session": ["model.understood_analytics.stg_sp_session"], "model.understood_analytics.u_org_event": ["model.understood_analytics.stg_sp_events"], "model.understood_analytics.u_org_pageview": ["model.understood_analytics.stg_sp_pageview"], "model.understood_analytics.meta_manifest_columns": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.understood_analytics.meta_metrics": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.understood_analytics.meta_looker_dimensions": ["model.understood_analytics.meta_manifest_columns"], "model.understood_analytics.meta_looker_view": ["model.understood_analytics.meta_looker_dimensions", "model.understood_analytics.meta_looker_metrics"], "model.understood_analytics.meta_looker_metrics": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.understood_analytics.stg_current_contentful_tag_external": ["source.understood_analytics.contentful.article_tag"], "model.understood_analytics.stg_contentful_external_pivot": ["model.understood_analytics.stg_current_contentful_tag_external", "model.understood_analytics.stg_current_contentful_tag_external"], "model.understood_analytics.stg_current_contentful_tag_moments": ["source.understood_analytics.contentful.article_tag"], "model.understood_analytics.stg_contentful_moments_pivot": ["model.understood_analytics.stg_current_contentful_tag_moments", "model.understood_analytics.stg_current_contentful_tag_moments"], "model.understood_analytics.stg_contentful_stages_pivot": ["model.understood_analytics.stg_current_contentful_tag_stages", "model.understood_analytics.stg_current_contentful_tag_stages"], "model.understood_analytics.stg_contentful_tags_agg_json": ["source.understood_analytics.contentful.article_tag"], "model.understood_analytics.stg_contentful_kab_pivot": ["model.understood_analytics.stg_current_contentful_tag_kab", "model.understood_analytics.stg_current_contentful_tag_kab"], "model.understood_analytics.stg_current_contentful_tag_stages": ["source.understood_analytics.contentful.article_tag"], "model.understood_analytics.stg_current_contentful_tag_kab": ["source.understood_analytics.contentful.article_tag"], "model.understood_analytics.stg_sp_pageview": ["source.understood_analytics.snowplow.pageview"], "model.understood_analytics.stg_sp_session": ["source.understood_analytics.snowplow.session"], "model.understood_analytics.stg_sp_events": ["source.understood_analytics.snowplow.site_interaction"], "model.dbt_artifacts.fct_dbt__critical_path": ["model.dbt_artifacts.fct_dbt__latest_full_model_executions", "model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.fct_dbt__latest_full_model_executions": ["model.dbt_artifacts.fct_dbt__model_executions", "model.dbt_artifacts.fct_dbt__run_results"], "model.dbt_artifacts.fct_dbt__exposures_updates": ["model.dbt_artifacts.dim_dbt__exposures", "model.dbt_artifacts.fct_dbt__model_executions"], "model.dbt_artifacts.fct_dbt__model_executions": ["model.dbt_artifacts.dim_dbt__models", "model.dbt_artifacts.int_dbt__model_executions"], "model.dbt_artifacts.int_dbt__model_executions": ["model.dbt_artifacts.stg_dbt__model_executions"], "model.dbt_artifacts.fct_dbt__run_results": ["model.dbt_artifacts.stg_dbt__run_results", "model.dbt_artifacts.stg_dbt__run_results_env_keys"], "model.dbt_artifacts.dim_dbt__exposures": ["model.dbt_artifacts.stg_dbt__exposures"], "model.dbt_artifacts.dim_dbt__models": ["model.dbt_artifacts.stg_dbt__models"], "model.dbt_artifacts.dim_dbt__sources": ["model.dbt_artifacts.stg_dbt__sources"], "model.dbt_artifacts.fct_dbt__test_executions": ["model.dbt_artifacts.stg_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.dbt_artifacts.stg_dbt__artifacts": ["source.dbt_artifacts.dbt_artifacts.artifacts"], "model.dbt_artifacts.stg_dbt__run_results": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.dbt_artifacts.stg_dbt__run_results_env_keys": ["model.dbt_artifacts.stg_dbt__artifacts"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.stg_dbt__artifacts"], "test.understood_analytics.unique_editorial_current_content_contentful_id.4fc5bbc2d2": ["model.understood_analytics.editorial_current_content"], "test.understood_analytics.not_null_editorial_current_content_contentful_id.e50dd15bf2": ["model.understood_analytics.editorial_current_content"], "test.understood_analytics.not_null_u_org_session_session_id.1d48a23b27": ["model.understood_analytics.u_org_session"], "test.understood_analytics.not_null_u_org_session_understood_id.8a0e7ba50b": ["model.understood_analytics.u_org_session"], "test.understood_analytics.not_null_u_org_session_application_id_initial.709a9cdd60": ["model.understood_analytics.u_org_session"], "test.understood_analytics.not_null_u_org_session_has_site_data.d58737152c": ["model.understood_analytics.u_org_session"], "test.understood_analytics.not_null_u_org_session_has_wunder_data.5a26ec6c23": ["model.understood_analytics.u_org_session"], "test.understood_analytics.accepted_values_u_org_session_flag_marketing_session__0__1.6192e6cc4a": ["model.understood_analytics.u_org_session"], "test.understood_analytics.accepted_values_u_org_session_flag_user_initial_session__0__1.0d90952c8c": ["model.understood_analytics.u_org_session"], "test.understood_analytics.accepted_values_u_org_session_flag_user_returning_session__0__1.1fac4e242f": ["model.understood_analytics.u_org_session"], "test.understood_analytics.accepted_values_u_org_session_flag_unengaged_session__0__1.4cd75b042f": ["model.understood_analytics.u_org_session"], "test.understood_analytics.accepted_values_u_org_session_flag_engaged_session__0__1.5b1d9d724d": ["model.understood_analytics.u_org_session"], "test.understood_analytics.accepted_values_u_org_session_flag_bounced_session__0__1.ebe8ec070e": ["model.understood_analytics.u_org_session"], "test.understood_analytics.unique_u_org_event_unique_event_id.32171d5b04": ["model.understood_analytics.u_org_event"], "test.understood_analytics.not_null_u_org_event_unique_event_id.aed3a78b36": ["model.understood_analytics.u_org_event"], "test.understood_analytics.not_null_u_org_event_session_id.ec071a0b8e": ["model.understood_analytics.u_org_event"], "test.understood_analytics.not_null_u_org_event_application_id.5f42aaa7bc": ["model.understood_analytics.u_org_event"], "test.understood_analytics.accepted_values_u_org_event_flag_core_actions__0__1.04cb03ed01": ["model.understood_analytics.u_org_event"], "test.understood_analytics.not_null_u_org_pageview_understood_id.818bc95641": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.not_null_u_org_pageview_session_id.d3514d6352": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.not_null_u_org_pageview_application_id.d1d3a690db": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.not_null_u_org_pageview_has_site_data.bec90040b6": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.not_null_u_org_pageview_has_wunder_data.89c07510c4": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.accepted_values_u_org_pageview_flag_new_user_page_view__0__1.a01675dab5": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.accepted_values_u_org_pageview_flag_is_unengaged_page_view__0__1.93a0fa1f1a": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1.a83eadddab": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.accepted_values_u_org_pageview_flag_entry_page_page_view__0__1.1821c87eed": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.accepted_values_u_org_pageview_flag_exit_page_page_view__0__1.3344a41078": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.accepted_values_u_org_pageview_flag_page_completion__0__1.32c245fac5": ["model.understood_analytics.u_org_pageview"], "test.understood_analytics.unique_stg_sp_events_unique_event_id.8a43c4552b": ["model.understood_analytics.stg_sp_events"], "test.understood_analytics.not_null_stg_sp_events_unique_event_id.a77567f585": ["model.understood_analytics.stg_sp_events"], "test.understood_analytics.unique_stg_sp_event_account_unique_event_id.197d99c223": [], "test.understood_analytics.not_null_stg_sp_event_account_unique_event_id.5344505ac5": [], "test.understood_analytics.unique_stg_sp_event_click_unique_event_id.d67ec144fa": [], "test.understood_analytics.not_null_stg_sp_event_click_unique_event_id.838cd1471b": [], "test.understood_analytics.unique_stg_sp_event_engagement_unique_event_id.2bf36bd0fc": [], "test.understood_analytics.not_null_stg_sp_event_engagement_unique_event_id.a4f49d0bdb": [], "test.understood_analytics.unique_stg_sp_event_impression_unique_event_id.2f95089665": [], "test.understood_analytics.not_null_stg_sp_event_impression_unique_event_id.de1b06bf2f": [], "test.understood_analytics.unique_stg_sp_pageview_unique_pageview_id.44f68b2707": ["model.understood_analytics.stg_sp_pageview"], "test.understood_analytics.not_null_stg_sp_pageview_unique_pageview_id.41595dc181": ["model.understood_analytics.stg_sp_pageview"], "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": ["model.dbt_artifacts.fct_dbt__critical_path"], "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": ["model.dbt_artifacts.fct_dbt__critical_path"], "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": ["model.dbt_artifacts.fct_dbt__latest_full_model_executions"], "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": ["model.dbt_artifacts.fct_dbt__latest_full_model_executions"], "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": ["model.dbt_artifacts.fct_dbt__model_executions"], "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": ["model.dbt_artifacts.fct_dbt__model_executions"], "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": ["model.dbt_artifacts.fct_dbt__run_results"], "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": ["model.dbt_artifacts.fct_dbt__run_results"], "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94": ["model.dbt_artifacts.dim_dbt__exposures"], "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44": ["model.dbt_artifacts.dim_dbt__exposures"], "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": ["model.dbt_artifacts.dim_dbt__models"], "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": ["model.dbt_artifacts.dim_dbt__models"], "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": ["model.dbt_artifacts.dim_dbt__sources"], "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": ["model.dbt_artifacts.dim_dbt__sources"], "source.understood_analytics.contentful.article": [], "source.understood_analytics.contentful.article_tag": [], "source.understood_analytics.snowplow.user": [], "source.understood_analytics.snowplow.session": [], "source.understood_analytics.snowplow.pageview": [], "source.understood_analytics.snowplow.site_interaction": [], "source.understood_analytics.snowplow.app_interaction": [], "source.dbt_artifacts.dbt_artifacts.artifacts": [], "metric.understood_analytics.account_creation_success": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.download": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.click": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.share": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.rating": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.helpful_yes_rating": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.helpful_no_rating": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.search": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.print": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.bookmark": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.subscribe_successful": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.hub_content_feed_click": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.hub_content_feed_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.rate_hub_content_feed_ctr": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.hub_topic_select": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.hub_topic_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.rate_hub_selects_ctr": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.carousel_click": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.accordion_click": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.learn_more_click": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.community_download_store": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.actions_taken": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.email_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.download_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.helpful_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.carousel_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.accordion_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.rate_accordion_clicks_per_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.rate_email_signups_per_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.rate_downloads_per_impression": ["model.understood_analytics.u_org_event"], "metric.understood_analytics.pageview": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.engaged_pageview": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.unengaged_pageview": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.entry_pageview": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.exit_pageview": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.completion_pageview": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.new_user_pageview": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.avg_percentage_scrolled": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.rate_pageview_completion": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.rate_pageview_entry": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.rate_pageview_exit": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.avg_pageview_duration": ["model.understood_analytics.u_org_pageview"], "metric.understood_analytics.session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.bounced_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.engaged_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.unengaged_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.initial_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.return_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.marketing_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.user": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.return_user": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.rate_bounce_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.rate_engaged_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.rate_return_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.rate_return_user": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.rate_2nd_page": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.sessions_per_user": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.pageview_per_session": ["model.understood_analytics.u_org_session"], "metric.understood_analytics.avg_session_duration": ["model.understood_analytics.u_org_session"]}, "child_map": {"model.understood_analytics.editorial_current_content": ["test.understood_analytics.not_null_editorial_current_content_contentful_id.e50dd15bf2", "test.understood_analytics.unique_editorial_current_content_contentful_id.4fc5bbc2d2"], "model.understood_analytics.u_org_session": ["metric.understood_analytics.avg_session_duration", "metric.understood_analytics.bounced_session", "metric.understood_analytics.engaged_session", "metric.understood_analytics.initial_session", "metric.understood_analytics.marketing_session", "metric.understood_analytics.pageview_per_session", "metric.understood_analytics.rate_2nd_page", "metric.understood_analytics.rate_bounce_session", "metric.understood_analytics.rate_engaged_session", "metric.understood_analytics.rate_return_session", "metric.understood_analytics.rate_return_user", "metric.understood_analytics.return_session", "metric.understood_analytics.return_user", "metric.understood_analytics.session", "metric.understood_analytics.sessions_per_user", "metric.understood_analytics.unengaged_session", "metric.understood_analytics.user", "test.understood_analytics.accepted_values_u_org_session_flag_bounced_session__0__1.ebe8ec070e", "test.understood_analytics.accepted_values_u_org_session_flag_engaged_session__0__1.5b1d9d724d", "test.understood_analytics.accepted_values_u_org_session_flag_marketing_session__0__1.6192e6cc4a", "test.understood_analytics.accepted_values_u_org_session_flag_unengaged_session__0__1.4cd75b042f", "test.understood_analytics.accepted_values_u_org_session_flag_user_initial_session__0__1.0d90952c8c", "test.understood_analytics.accepted_values_u_org_session_flag_user_returning_session__0__1.1fac4e242f", "test.understood_analytics.not_null_u_org_session_application_id_initial.709a9cdd60", "test.understood_analytics.not_null_u_org_session_has_site_data.d58737152c", "test.understood_analytics.not_null_u_org_session_has_wunder_data.5a26ec6c23", "test.understood_analytics.not_null_u_org_session_session_id.1d48a23b27", "test.understood_analytics.not_null_u_org_session_understood_id.8a0e7ba50b"], "model.understood_analytics.u_org_event": ["metric.understood_analytics.accordion_click", "metric.understood_analytics.accordion_impression", "metric.understood_analytics.account_creation_success", "metric.understood_analytics.actions_taken", "metric.understood_analytics.bookmark", "metric.understood_analytics.carousel_click", "metric.understood_analytics.carousel_impression", "metric.understood_analytics.click", "metric.understood_analytics.community_download_store", "metric.understood_analytics.download", "metric.understood_analytics.download_impression", "metric.understood_analytics.email_impression", "metric.understood_analytics.helpful_impression", "metric.understood_analytics.helpful_no_rating", "metric.understood_analytics.helpful_yes_rating", "metric.understood_analytics.hub_content_feed_click", "metric.understood_analytics.hub_content_feed_impression", "metric.understood_analytics.hub_topic_impression", "metric.understood_analytics.hub_topic_select", "metric.understood_analytics.impression", "metric.understood_analytics.learn_more_click", "metric.understood_analytics.print", "metric.understood_analytics.rate_accordion_clicks_per_impression", "metric.understood_analytics.rate_downloads_per_impression", "metric.understood_analytics.rate_email_signups_per_impression", "metric.understood_analytics.rate_hub_content_feed_ctr", "metric.understood_analytics.rate_hub_selects_ctr", "metric.understood_analytics.rating", "metric.understood_analytics.search", "metric.understood_analytics.share", "metric.understood_analytics.subscribe_successful", "test.understood_analytics.accepted_values_u_org_event_flag_core_actions__0__1.04cb03ed01", "test.understood_analytics.not_null_u_org_event_application_id.5f42aaa7bc", "test.understood_analytics.not_null_u_org_event_session_id.ec071a0b8e", "test.understood_analytics.not_null_u_org_event_unique_event_id.aed3a78b36", "test.understood_analytics.unique_u_org_event_unique_event_id.32171d5b04"], "model.understood_analytics.u_org_pageview": ["metric.understood_analytics.avg_pageview_duration", "metric.understood_analytics.avg_percentage_scrolled", "metric.understood_analytics.completion_pageview", "metric.understood_analytics.engaged_pageview", "metric.understood_analytics.entry_pageview", "metric.understood_analytics.exit_pageview", "metric.understood_analytics.new_user_pageview", "metric.understood_analytics.pageview", "metric.understood_analytics.rate_pageview_completion", "metric.understood_analytics.rate_pageview_entry", "metric.understood_analytics.rate_pageview_exit", "metric.understood_analytics.unengaged_pageview", "test.understood_analytics.accepted_values_u_org_pageview_flag_entry_page_page_view__0__1.1821c87eed", "test.understood_analytics.accepted_values_u_org_pageview_flag_exit_page_page_view__0__1.3344a41078", "test.understood_analytics.accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1.a83eadddab", "test.understood_analytics.accepted_values_u_org_pageview_flag_is_unengaged_page_view__0__1.93a0fa1f1a", "test.understood_analytics.accepted_values_u_org_pageview_flag_new_user_page_view__0__1.a01675dab5", "test.understood_analytics.accepted_values_u_org_pageview_flag_page_completion__0__1.32c245fac5", "test.understood_analytics.not_null_u_org_pageview_application_id.d1d3a690db", "test.understood_analytics.not_null_u_org_pageview_has_site_data.bec90040b6", "test.understood_analytics.not_null_u_org_pageview_has_wunder_data.89c07510c4", "test.understood_analytics.not_null_u_org_pageview_session_id.d3514d6352", "test.understood_analytics.not_null_u_org_pageview_understood_id.818bc95641"], "model.understood_analytics.meta_manifest_columns": ["model.understood_analytics.meta_looker_dimensions"], "model.understood_analytics.meta_metrics": [], "model.understood_analytics.meta_looker_dimensions": ["model.understood_analytics.meta_looker_view"], "model.understood_analytics.meta_looker_view": [], "model.understood_analytics.meta_looker_metrics": ["model.understood_analytics.meta_looker_view"], "model.understood_analytics.stg_current_contentful_tag_external": ["model.understood_analytics.stg_contentful_external_pivot", "model.understood_analytics.stg_contentful_external_pivot"], "model.understood_analytics.stg_contentful_external_pivot": ["model.understood_analytics.editorial_current_content", "model.understood_analytics.editorial_current_content"], "model.understood_analytics.stg_current_contentful_tag_moments": ["model.understood_analytics.stg_contentful_moments_pivot", "model.understood_analytics.stg_contentful_moments_pivot"], "model.understood_analytics.stg_contentful_moments_pivot": ["model.understood_analytics.editorial_current_content", "model.understood_analytics.editorial_current_content"], "model.understood_analytics.stg_contentful_stages_pivot": ["model.understood_analytics.editorial_current_content", "model.understood_analytics.editorial_current_content"], "model.understood_analytics.stg_contentful_tags_agg_json": ["model.understood_analytics.editorial_current_content"], "model.understood_analytics.stg_contentful_kab_pivot": ["model.understood_analytics.editorial_current_content", "model.understood_analytics.editorial_current_content"], "model.understood_analytics.stg_current_contentful_tag_stages": ["model.understood_analytics.stg_contentful_stages_pivot", "model.understood_analytics.stg_contentful_stages_pivot"], "model.understood_analytics.stg_current_contentful_tag_kab": ["model.understood_analytics.stg_contentful_kab_pivot", "model.understood_analytics.stg_contentful_kab_pivot"], "model.understood_analytics.stg_sp_pageview": ["model.understood_analytics.u_org_pageview", "test.understood_analytics.not_null_stg_sp_pageview_unique_pageview_id.41595dc181", "test.understood_analytics.unique_stg_sp_pageview_unique_pageview_id.44f68b2707"], "model.understood_analytics.stg_sp_session": ["model.understood_analytics.u_org_session"], "model.understood_analytics.stg_sp_events": ["model.understood_analytics.u_org_event", "test.understood_analytics.not_null_stg_sp_events_unique_event_id.a77567f585", "test.understood_analytics.unique_stg_sp_events_unique_event_id.8a43c4552b"], "model.dbt_artifacts.fct_dbt__critical_path": ["test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496", "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10"], "model.dbt_artifacts.fct_dbt__latest_full_model_executions": ["model.dbt_artifacts.fct_dbt__critical_path", "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66", "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c"], "model.dbt_artifacts.fct_dbt__exposures_updates": [], "model.dbt_artifacts.fct_dbt__model_executions": ["model.dbt_artifacts.fct_dbt__exposures_updates", "model.dbt_artifacts.fct_dbt__latest_full_model_executions", "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69", "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59"], "model.dbt_artifacts.int_dbt__model_executions": ["model.dbt_artifacts.fct_dbt__model_executions"], "model.dbt_artifacts.fct_dbt__run_results": ["model.dbt_artifacts.fct_dbt__latest_full_model_executions", "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935", "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3"], "model.dbt_artifacts.dim_dbt__exposures": ["model.dbt_artifacts.fct_dbt__exposures_updates", "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94", "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44"], "model.dbt_artifacts.dim_dbt__models": ["model.dbt_artifacts.fct_dbt__model_executions", "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60", "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e"], "model.dbt_artifacts.dim_dbt__sources": ["test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000", "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce"], "model.dbt_artifacts.fct_dbt__test_executions": [], "model.dbt_artifacts.stg_dbt__models": ["model.dbt_artifacts.dim_dbt__models", "model.dbt_artifacts.fct_dbt__critical_path"], "model.dbt_artifacts.stg_dbt__artifacts": ["model.dbt_artifacts.stg_dbt__exposures", "model.dbt_artifacts.stg_dbt__model_executions", "model.dbt_artifacts.stg_dbt__models", "model.dbt_artifacts.stg_dbt__run_results", "model.dbt_artifacts.stg_dbt__run_results_env_keys", "model.dbt_artifacts.stg_dbt__sources", "model.dbt_artifacts.stg_dbt__test_executions", "model.understood_analytics.meta_looker_metrics", "model.understood_analytics.meta_manifest_columns", "model.understood_analytics.meta_metrics"], "model.dbt_artifacts.stg_dbt__run_results": ["model.dbt_artifacts.fct_dbt__run_results"], "model.dbt_artifacts.stg_dbt__test_executions": ["model.dbt_artifacts.fct_dbt__test_executions"], "model.dbt_artifacts.stg_dbt__sources": ["model.dbt_artifacts.dim_dbt__sources"], "model.dbt_artifacts.stg_dbt__model_executions": ["model.dbt_artifacts.int_dbt__model_executions"], "model.dbt_artifacts.stg_dbt__run_results_env_keys": ["model.dbt_artifacts.fct_dbt__run_results"], "model.dbt_artifacts.stg_dbt__exposures": ["model.dbt_artifacts.dim_dbt__exposures"], "test.understood_analytics.unique_editorial_current_content_contentful_id.4fc5bbc2d2": [], "test.understood_analytics.not_null_editorial_current_content_contentful_id.e50dd15bf2": [], "test.understood_analytics.not_null_u_org_session_session_id.1d48a23b27": [], "test.understood_analytics.not_null_u_org_session_understood_id.8a0e7ba50b": [], "test.understood_analytics.not_null_u_org_session_application_id_initial.709a9cdd60": [], "test.understood_analytics.not_null_u_org_session_has_site_data.d58737152c": [], "test.understood_analytics.not_null_u_org_session_has_wunder_data.5a26ec6c23": [], "test.understood_analytics.accepted_values_u_org_session_flag_marketing_session__0__1.6192e6cc4a": [], "test.understood_analytics.accepted_values_u_org_session_flag_user_initial_session__0__1.0d90952c8c": [], "test.understood_analytics.accepted_values_u_org_session_flag_user_returning_session__0__1.1fac4e242f": [], "test.understood_analytics.accepted_values_u_org_session_flag_unengaged_session__0__1.4cd75b042f": [], "test.understood_analytics.accepted_values_u_org_session_flag_engaged_session__0__1.5b1d9d724d": [], "test.understood_analytics.accepted_values_u_org_session_flag_bounced_session__0__1.ebe8ec070e": [], "test.understood_analytics.unique_u_org_event_unique_event_id.32171d5b04": [], "test.understood_analytics.not_null_u_org_event_unique_event_id.aed3a78b36": [], "test.understood_analytics.not_null_u_org_event_session_id.ec071a0b8e": [], "test.understood_analytics.not_null_u_org_event_application_id.5f42aaa7bc": [], "test.understood_analytics.accepted_values_u_org_event_flag_core_actions__0__1.04cb03ed01": [], "test.understood_analytics.not_null_u_org_pageview_understood_id.818bc95641": [], "test.understood_analytics.not_null_u_org_pageview_session_id.d3514d6352": [], "test.understood_analytics.not_null_u_org_pageview_application_id.d1d3a690db": [], "test.understood_analytics.not_null_u_org_pageview_has_site_data.bec90040b6": [], "test.understood_analytics.not_null_u_org_pageview_has_wunder_data.89c07510c4": [], "test.understood_analytics.accepted_values_u_org_pageview_flag_new_user_page_view__0__1.a01675dab5": [], "test.understood_analytics.accepted_values_u_org_pageview_flag_is_unengaged_page_view__0__1.93a0fa1f1a": [], "test.understood_analytics.accepted_values_u_org_pageview_flag_is_engaged_page_view__0__1.a83eadddab": [], "test.understood_analytics.accepted_values_u_org_pageview_flag_entry_page_page_view__0__1.1821c87eed": [], "test.understood_analytics.accepted_values_u_org_pageview_flag_exit_page_page_view__0__1.3344a41078": [], "test.understood_analytics.accepted_values_u_org_pageview_flag_page_completion__0__1.32c245fac5": [], "test.understood_analytics.unique_stg_sp_events_unique_event_id.8a43c4552b": [], "test.understood_analytics.not_null_stg_sp_events_unique_event_id.a77567f585": [], "test.understood_analytics.unique_stg_sp_event_account_unique_event_id.197d99c223": [], "test.understood_analytics.not_null_stg_sp_event_account_unique_event_id.5344505ac5": [], "test.understood_analytics.unique_stg_sp_event_click_unique_event_id.d67ec144fa": [], "test.understood_analytics.not_null_stg_sp_event_click_unique_event_id.838cd1471b": [], "test.understood_analytics.unique_stg_sp_event_engagement_unique_event_id.2bf36bd0fc": [], "test.understood_analytics.not_null_stg_sp_event_engagement_unique_event_id.a4f49d0bdb": [], "test.understood_analytics.unique_stg_sp_event_impression_unique_event_id.2f95089665": [], "test.understood_analytics.not_null_stg_sp_event_impression_unique_event_id.de1b06bf2f": [], "test.understood_analytics.unique_stg_sp_pageview_unique_pageview_id.44f68b2707": [], "test.understood_analytics.not_null_stg_sp_pageview_unique_pageview_id.41595dc181": [], "test.dbt_artifacts.unique_fct_dbt__critical_path_node_id.a430b9cf10": [], "test.dbt_artifacts.not_null_fct_dbt__critical_path_node_id.8a76d88496": [], "test.dbt_artifacts.unique_fct_dbt__latest_full_model_executions_node_id.b6f2773b6c": [], "test.dbt_artifacts.not_null_fct_dbt__latest_full_model_executions_node_id.75b07a2f66": [], "test.dbt_artifacts.unique_fct_dbt__model_executions_model_execution_id.ab9f314f59": [], "test.dbt_artifacts.not_null_fct_dbt__model_executions_model_execution_id.ecb7ddbb69": [], "test.dbt_artifacts.unique_fct_dbt__run_results_command_invocation_id.08941b96a3": [], "test.dbt_artifacts.not_null_fct_dbt__run_results_command_invocation_id.11abc48935": [], "test.dbt_artifacts.not_null_dim_dbt__exposures_manifest_model_id.1cfdaa0c94": [], "test.dbt_artifacts.unique_dim_dbt__exposures_manifest_model_id_output_feeds.b0bf30fb44": [], "test.dbt_artifacts.unique_dim_dbt__models_manifest_model_id.c105319f3e": [], "test.dbt_artifacts.not_null_dim_dbt__models_manifest_model_id.df81d26c60": [], "test.dbt_artifacts.unique_dim_dbt__sources_manifest_source_id.a9a1a372ce": [], "test.dbt_artifacts.not_null_dim_dbt__sources_manifest_source_id.34e9829000": [], "source.understood_analytics.contentful.article": ["model.understood_analytics.editorial_current_content"], "source.understood_analytics.contentful.article_tag": ["model.understood_analytics.stg_contentful_tags_agg_json", "model.understood_analytics.stg_current_contentful_tag_external", "model.understood_analytics.stg_current_contentful_tag_kab", "model.understood_analytics.stg_current_contentful_tag_moments", "model.understood_analytics.stg_current_contentful_tag_stages"], "source.understood_analytics.snowplow.user": [], "source.understood_analytics.snowplow.session": ["model.understood_analytics.stg_sp_session"], "source.understood_analytics.snowplow.pageview": ["model.understood_analytics.stg_sp_pageview"], "source.understood_analytics.snowplow.site_interaction": ["model.understood_analytics.stg_sp_events"], "source.understood_analytics.snowplow.app_interaction": [], "source.dbt_artifacts.dbt_artifacts.artifacts": ["model.dbt_artifacts.stg_dbt__artifacts"], "metric.understood_analytics.account_creation_success": [], "metric.understood_analytics.download": [], "metric.understood_analytics.click": [], "metric.understood_analytics.share": [], "metric.understood_analytics.rating": [], "metric.understood_analytics.helpful_yes_rating": [], "metric.understood_analytics.helpful_no_rating": [], "metric.understood_analytics.impression": [], "metric.understood_analytics.search": [], "metric.understood_analytics.print": [], "metric.understood_analytics.bookmark": [], "metric.understood_analytics.subscribe_successful": [], "metric.understood_analytics.hub_content_feed_click": [], "metric.understood_analytics.hub_content_feed_impression": [], "metric.understood_analytics.rate_hub_content_feed_ctr": [], "metric.understood_analytics.hub_topic_select": [], "metric.understood_analytics.hub_topic_impression": [], "metric.understood_analytics.rate_hub_selects_ctr": [], "metric.understood_analytics.carousel_click": [], "metric.understood_analytics.accordion_click": [], "metric.understood_analytics.learn_more_click": [], "metric.understood_analytics.community_download_store": [], "metric.understood_analytics.actions_taken": [], "metric.understood_analytics.email_impression": [], "metric.understood_analytics.download_impression": [], "metric.understood_analytics.helpful_impression": [], "metric.understood_analytics.carousel_impression": [], "metric.understood_analytics.accordion_impression": [], "metric.understood_analytics.rate_accordion_clicks_per_impression": [], "metric.understood_analytics.rate_email_signups_per_impression": [], "metric.understood_analytics.rate_downloads_per_impression": [], "metric.understood_analytics.pageview": [], "metric.understood_analytics.engaged_pageview": [], "metric.understood_analytics.unengaged_pageview": [], "metric.understood_analytics.entry_pageview": [], "metric.understood_analytics.exit_pageview": [], "metric.understood_analytics.completion_pageview": [], "metric.understood_analytics.new_user_pageview": [], "metric.understood_analytics.avg_percentage_scrolled": [], "metric.understood_analytics.rate_pageview_completion": [], "metric.understood_analytics.rate_pageview_entry": [], "metric.understood_analytics.rate_pageview_exit": [], "metric.understood_analytics.avg_pageview_duration": [], "metric.understood_analytics.session": [], "metric.understood_analytics.bounced_session": [], "metric.understood_analytics.engaged_session": [], "metric.understood_analytics.unengaged_session": [], "metric.understood_analytics.initial_session": [], "metric.understood_analytics.return_session": [], "metric.understood_analytics.marketing_session": [], "metric.understood_analytics.user": [], "metric.understood_analytics.return_user": [], "metric.understood_analytics.rate_bounce_session": [], "metric.understood_analytics.rate_engaged_session": [], "metric.understood_analytics.rate_return_session": [], "metric.understood_analytics.rate_return_user": [], "metric.understood_analytics.rate_2nd_page": [], "metric.understood_analytics.sessions_per_user": [], "metric.understood_analytics.pageview_per_session": [], "metric.understood_analytics.avg_session_duration": []}}